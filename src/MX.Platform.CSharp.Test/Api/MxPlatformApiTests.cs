/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Api;
// uncomment below to import models
//using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Test.Api
{
    /// <summary>
    ///  Class for testing MxPlatformApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MxPlatformApiTests : IDisposable
    {
        private MxPlatformApi instance;

        public MxPlatformApiTests()
        {
            instance = new MxPlatformApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MxPlatformApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MxPlatformApi
            //Assert.IsType<MxPlatformApi>(instance);
        }

        /// <summary>
        /// Test AggregateMember
        /// </summary>
        [Fact]
        public void AggregateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.AggregateMember(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test CheckBalances
        /// </summary>
        [Fact]
        public void CheckBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.CheckBalances(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test CreateCategory
        /// </summary>
        [Fact]
        public void CreateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //CategoryCreateRequestBody categoryCreateRequestBody = null;
            //var response = instance.CreateCategory(userGuid, categoryCreateRequestBody);
            //Assert.IsType<CategoryResponseBody>(response);
        }

        /// <summary>
        /// Test CreateManagedAccount
        /// </summary>
        [Fact]
        public void CreateManagedAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //ManagedAccountCreateRequestBody managedAccountCreateRequestBody = null;
            //var response = instance.CreateManagedAccount(memberGuid, userGuid, managedAccountCreateRequestBody);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test CreateManagedMember
        /// </summary>
        [Fact]
        public void CreateManagedMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //ManagedMemberCreateRequestBody managedMemberCreateRequestBody = null;
            //var response = instance.CreateManagedMember(userGuid, managedMemberCreateRequestBody);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test CreateManagedTransaction
        /// </summary>
        [Fact]
        public void CreateManagedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody = null;
            //var response = instance.CreateManagedTransaction(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody);
            //Assert.IsType<TransactionResponseBody>(response);
        }

        /// <summary>
        /// Test CreateManualAccount
        /// </summary>
        [Fact]
        public void CreateManualAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //AccountCreateRequestBody accountCreateRequestBody = null;
            //var response = instance.CreateManualAccount(userGuid, accountCreateRequestBody);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test CreateMember
        /// </summary>
        [Fact]
        public void CreateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //MemberCreateRequestBody memberCreateRequestBody = null;
            //var response = instance.CreateMember(userGuid, memberCreateRequestBody);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Fact]
        public void CreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //TagCreateRequestBody tagCreateRequestBody = null;
            //var response = instance.CreateTag(userGuid, tagCreateRequestBody);
            //Assert.IsType<TagResponseBody>(response);
        }

        /// <summary>
        /// Test CreateTagging
        /// </summary>
        [Fact]
        public void CreateTaggingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //TaggingCreateRequestBody taggingCreateRequestBody = null;
            //var response = instance.CreateTagging(userGuid, taggingCreateRequestBody);
            //Assert.IsType<TaggingResponseBody>(response);
        }

        /// <summary>
        /// Test CreateTransactionRule
        /// </summary>
        [Fact]
        public void CreateTransactionRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //TransactionRuleCreateRequestBody transactionRuleCreateRequestBody = null;
            //var response = instance.CreateTransactionRule(userGuid, transactionRuleCreateRequestBody);
            //Assert.IsType<TransactionRuleResponseBody>(response);
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreateRequestBody userCreateRequestBody = null;
            //var response = instance.CreateUser(userCreateRequestBody);
            //Assert.IsType<UserResponseBody>(response);
        }

        /// <summary>
        /// Test CreditCard
        /// </summary>
        [Fact]
        public void CreditCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string creditCardProductGuid = null;
            //var response = instance.CreditCard(creditCardProductGuid);
            //Assert.IsType<CreditCardProductResponse>(response);
        }

        /// <summary>
        /// Test DeleteCategory
        /// </summary>
        [Fact]
        public void DeleteCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryGuid = null;
            //string userGuid = null;
            //instance.DeleteCategory(categoryGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteManagedAccount
        /// </summary>
        [Fact]
        public void DeleteManagedAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //instance.DeleteManagedAccount(accountGuid, memberGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteManagedMember
        /// </summary>
        [Fact]
        public void DeleteManagedMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //instance.DeleteManagedMember(memberGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteManagedTransaction
        /// </summary>
        [Fact]
        public void DeleteManagedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string transactionGuid = null;
            //string userGuid = null;
            //instance.DeleteManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteManualAccount
        /// </summary>
        [Fact]
        public void DeleteManualAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string userGuid = null;
            //instance.DeleteManualAccount(accountGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteMember
        /// </summary>
        [Fact]
        public void DeleteMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //instance.DeleteMember(memberGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Fact]
        public void DeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGuid = null;
            //string userGuid = null;
            //instance.DeleteTag(tagGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteTagging
        /// </summary>
        [Fact]
        public void DeleteTaggingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taggingGuid = null;
            //string userGuid = null;
            //instance.DeleteTagging(taggingGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteTransactionRule
        /// </summary>
        [Fact]
        public void DeleteTransactionRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionRuleGuid = null;
            //string userGuid = null;
            //instance.DeleteTransactionRule(transactionRuleGuid, userGuid);
        }

        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Fact]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //instance.DeleteUser(userGuid);
        }

        /// <summary>
        /// Test DeprecatedRequestPaymentProcessorAuthorizationCode
        /// </summary>
        [Fact]
        public void DeprecatedRequestPaymentProcessorAuthorizationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody = null;
            //var response = instance.DeprecatedRequestPaymentProcessorAuthorizationCode(paymentProcessorAuthorizationCodeRequestBody);
            //Assert.IsType<PaymentProcessorAuthorizationCodeResponseBody>(response);
        }

        /// <summary>
        /// Test DownloadStatementPDF
        /// </summary>
        [Fact]
        public void DownloadStatementPDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string statementGuid = null;
            //string userGuid = null;
            //var response = instance.DownloadStatementPDF(memberGuid, statementGuid, userGuid);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test DownloadTaxDocument
        /// </summary>
        [Fact]
        public void DownloadTaxDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taxDocumentGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.DownloadTaxDocument(taxDocumentGuid, memberGuid, userGuid);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test EnhanceTransactions
        /// </summary>
        [Fact]
        public void EnhanceTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnhanceTransactionsRequestBody enhanceTransactionsRequestBody = null;
            //var response = instance.EnhanceTransactions(enhanceTransactionsRequestBody);
            //Assert.IsType<EnhanceTransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ExtendHistory
        /// </summary>
        [Fact]
        public void ExtendHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ExtendHistory(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test FetchRewards
        /// </summary>
        [Fact]
        public void FetchRewardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string memberGuid = null;
            //var response = instance.FetchRewards(userGuid, memberGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test FetchStatements
        /// </summary>
        [Fact]
        public void FetchStatementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.FetchStatements(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test FetchTaxDocuments
        /// </summary>
        [Fact]
        public void FetchTaxDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.FetchTaxDocuments(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test IdentifyMember
        /// </summary>
        [Fact]
        public void IdentifyMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.IdentifyMember(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test ListAccountNumbersByAccount
        /// </summary>
        [Fact]
        public void ListAccountNumbersByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListAccountNumbersByAccount(accountGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<AccountNumbersResponseBody>(response);
        }

        /// <summary>
        /// Test ListAccountNumbersByMember
        /// </summary>
        [Fact]
        public void ListAccountNumbersByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListAccountNumbersByMember(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<AccountNumbersResponseBody>(response);
        }

        /// <summary>
        /// Test ListAccountOwnersByMember
        /// </summary>
        [Fact]
        public void ListAccountOwnersByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListAccountOwnersByMember(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<AccountOwnersResponseBody>(response);
        }

        /// <summary>
        /// Test ListCategories
        /// </summary>
        [Fact]
        public void ListCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListCategories(userGuid, page, recordsPerPage);
            //Assert.IsType<CategoriesResponseBody>(response);
        }

        /// <summary>
        /// Test ListDefaultCategories
        /// </summary>
        [Fact]
        public void ListDefaultCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListDefaultCategories(page, recordsPerPage);
            //Assert.IsType<CategoriesResponseBody>(response);
        }

        /// <summary>
        /// Test ListDefaultCategoriesByUser
        /// </summary>
        [Fact]
        public void ListDefaultCategoriesByUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListDefaultCategoriesByUser(userGuid, page, recordsPerPage);
            //Assert.IsType<CategoriesResponseBody>(response);
        }

        /// <summary>
        /// Test ListFavoriteInstitutions
        /// </summary>
        [Fact]
        public void ListFavoriteInstitutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListFavoriteInstitutions(page, recordsPerPage);
            //Assert.IsType<InstitutionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListHoldings
        /// </summary>
        [Fact]
        public void ListHoldingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListHoldings(userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<HoldingsResponseBody>(response);
        }

        /// <summary>
        /// Test ListHoldingsByAccount
        /// </summary>
        [Fact]
        public void ListHoldingsByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListHoldingsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<HoldingsResponseBody>(response);
        }

        /// <summary>
        /// Test ListHoldingsByMember
        /// </summary>
        [Fact]
        public void ListHoldingsByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListHoldingsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<HoldingsResponseBody>(response);
        }

        /// <summary>
        /// Test ListInstitutionCredentials
        /// </summary>
        [Fact]
        public void ListInstitutionCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string institutionCode = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListInstitutionCredentials(institutionCode, page, recordsPerPage);
            //Assert.IsType<CredentialsResponseBody>(response);
        }

        /// <summary>
        /// Test ListInstitutions
        /// </summary>
        [Fact]
        public void ListInstitutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //bool? supportsAccountIdentification = null;
            //bool? supportsAccountStatement = null;
            //bool? supportsAccountVerification = null;
            //bool? supportsTransactionHistory = null;
            //var response = instance.ListInstitutions(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory);
            //Assert.IsType<InstitutionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListManagedAccounts
        /// </summary>
        [Fact]
        public void ListManagedAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListManagedAccounts(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<AccountsResponseBody>(response);
        }

        /// <summary>
        /// Test ListManagedInstitutions
        /// </summary>
        [Fact]
        public void ListManagedInstitutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListManagedInstitutions(page, recordsPerPage);
            //Assert.IsType<InstitutionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListManagedMembers
        /// </summary>
        [Fact]
        public void ListManagedMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListManagedMembers(userGuid, page, recordsPerPage);
            //Assert.IsType<MembersResponseBody>(response);
        }

        /// <summary>
        /// Test ListManagedTransactions
        /// </summary>
        [Fact]
        public void ListManagedTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListManagedTransactions(accountGuid, memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<TransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListMemberAccounts
        /// </summary>
        [Fact]
        public void ListMemberAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string memberGuid = null;
            //bool? memberIsManagedByUser = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListMemberAccounts(userGuid, memberGuid, memberIsManagedByUser, page, recordsPerPage);
            //Assert.IsType<AccountsResponseBody>(response);
        }

        /// <summary>
        /// Test ListMemberChallenges
        /// </summary>
        [Fact]
        public void ListMemberChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListMemberChallenges(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<ChallengesResponseBody>(response);
        }

        /// <summary>
        /// Test ListMemberCredentials
        /// </summary>
        [Fact]
        public void ListMemberCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListMemberCredentials(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<CredentialsResponseBody>(response);
        }

        /// <summary>
        /// Test ListMembers
        /// </summary>
        [Fact]
        public void ListMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListMembers(userGuid, page, recordsPerPage);
            //Assert.IsType<MembersResponseBody>(response);
        }

        /// <summary>
        /// Test ListMerchants
        /// </summary>
        [Fact]
        public void ListMerchantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListMerchants(page, recordsPerPage);
            //Assert.IsType<MerchantsResponseBody>(response);
        }

        /// <summary>
        /// Test ListRewards
        /// </summary>
        [Fact]
        public void ListRewardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string memberGuid = null;
            //var response = instance.ListRewards(userGuid, memberGuid);
            //Assert.IsType<RewardsResponseBody>(response);
        }

        /// <summary>
        /// Test ListStatementsByMember
        /// </summary>
        [Fact]
        public void ListStatementsByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListStatementsByMember(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<StatementsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTaggings
        /// </summary>
        [Fact]
        public void ListTaggingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListTaggings(userGuid, page, recordsPerPage);
            //Assert.IsType<TaggingsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTags
        /// </summary>
        [Fact]
        public void ListTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListTags(userGuid, page, recordsPerPage);
            //Assert.IsType<TagsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTaxDocuments
        /// </summary>
        [Fact]
        public void ListTaxDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListTaxDocuments(memberGuid, userGuid, page, recordsPerPage);
            //Assert.IsType<TaxDocumentsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTransactionRules
        /// </summary>
        [Fact]
        public void ListTransactionRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //var response = instance.ListTransactionRules(userGuid, page, recordsPerPage);
            //Assert.IsType<TransactionRulesResponseBody>(response);
        }

        /// <summary>
        /// Test ListTransactions
        /// </summary>
        [Fact]
        public void ListTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListTransactions(userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<TransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTransactionsByAccount
        /// </summary>
        [Fact]
        public void ListTransactionsByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListTransactionsByAccount(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<TransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTransactionsByMember
        /// </summary>
        [Fact]
        public void ListTransactionsByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListTransactionsByMember(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<TransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListTransactionsByTag
        /// </summary>
        [Fact]
        public void ListTransactionsByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGuid = null;
            //string userGuid = null;
            //string? fromDate = null;
            //int? page = null;
            //int? recordsPerPage = null;
            //string? toDate = null;
            //var response = instance.ListTransactionsByTag(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            //Assert.IsType<TransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test ListUserAccounts
        /// </summary>
        [Fact]
        public void ListUserAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //bool? memberIsManagedByUser = null;
            //int? page = null;
            //bool? isManual = null;
            //int? recordsPerPage = null;
            //var response = instance.ListUserAccounts(userGuid, memberIsManagedByUser, page, isManual, recordsPerPage);
            //Assert.IsType<AccountsResponseBody>(response);
        }

        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Fact]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? recordsPerPage = null;
            //string? id = null;
            //string? email = null;
            //bool? isDisabled = null;
            //var response = instance.ListUsers(page, recordsPerPage, id, email, isDisabled);
            //Assert.IsType<UsersResponseBody>(response);
        }

        /// <summary>
        /// Test ReadAccount
        /// </summary>
        [Fact]
        public void ReadAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string userGuid = null;
            //var response = instance.ReadAccount(accountGuid, userGuid);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test ReadAccountByMember
        /// </summary>
        [Fact]
        public void ReadAccountByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadAccountByMember(accountGuid, memberGuid, userGuid);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test ReadCategory
        /// </summary>
        [Fact]
        public void ReadCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryGuid = null;
            //string userGuid = null;
            //var response = instance.ReadCategory(categoryGuid, userGuid);
            //Assert.IsType<CategoryResponseBody>(response);
        }

        /// <summary>
        /// Test ReadDefaultCategory
        /// </summary>
        [Fact]
        public void ReadDefaultCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryGuid = null;
            //var response = instance.ReadDefaultCategory(categoryGuid);
            //Assert.IsType<CategoryResponseBody>(response);
        }

        /// <summary>
        /// Test ReadHolding
        /// </summary>
        [Fact]
        public void ReadHoldingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string holdingGuid = null;
            //string userGuid = null;
            //var response = instance.ReadHolding(holdingGuid, userGuid);
            //Assert.IsType<HoldingResponseBody>(response);
        }

        /// <summary>
        /// Test ReadInstitution
        /// </summary>
        [Fact]
        public void ReadInstitutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string institutionCode = null;
            //var response = instance.ReadInstitution(institutionCode);
            //Assert.IsType<InstitutionResponseBody>(response);
        }

        /// <summary>
        /// Test ReadManagedAccount
        /// </summary>
        [Fact]
        public void ReadManagedAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadManagedAccount(accountGuid, memberGuid, userGuid);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test ReadManagedMember
        /// </summary>
        [Fact]
        public void ReadManagedMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadManagedMember(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test ReadManagedTransaction
        /// </summary>
        [Fact]
        public void ReadManagedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string transactionGuid = null;
            //string userGuid = null;
            //var response = instance.ReadManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid);
            //Assert.IsType<TransactionResponseBody>(response);
        }

        /// <summary>
        /// Test ReadMember
        /// </summary>
        [Fact]
        public void ReadMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadMember(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test ReadMemberStatus
        /// </summary>
        [Fact]
        public void ReadMemberStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadMemberStatus(memberGuid, userGuid);
            //Assert.IsType<MemberStatusResponseBody>(response);
        }

        /// <summary>
        /// Test ReadMerchant
        /// </summary>
        [Fact]
        public void ReadMerchantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string merchantGuid = null;
            //var response = instance.ReadMerchant(merchantGuid);
            //Assert.IsType<MerchantResponseBody>(response);
        }

        /// <summary>
        /// Test ReadMerchantLocation
        /// </summary>
        [Fact]
        public void ReadMerchantLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string merchantLocationGuid = null;
            //var response = instance.ReadMerchantLocation(merchantLocationGuid);
            //Assert.IsType<MerchantLocationResponseBody>(response);
        }

        /// <summary>
        /// Test ReadRewards
        /// </summary>
        [Fact]
        public void ReadRewardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string memberGuid = null;
            //string rewardGuid = null;
            //var response = instance.ReadRewards(userGuid, memberGuid, rewardGuid);
            //Assert.IsType<RewardResponseBody>(response);
        }

        /// <summary>
        /// Test ReadStatementByMember
        /// </summary>
        [Fact]
        public void ReadStatementByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string statementGuid = null;
            //string userGuid = null;
            //var response = instance.ReadStatementByMember(memberGuid, statementGuid, userGuid);
            //Assert.IsType<StatementResponseBody>(response);
        }

        /// <summary>
        /// Test ReadTag
        /// </summary>
        [Fact]
        public void ReadTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGuid = null;
            //string userGuid = null;
            //var response = instance.ReadTag(tagGuid, userGuid);
            //Assert.IsType<TagResponseBody>(response);
        }

        /// <summary>
        /// Test ReadTagging
        /// </summary>
        [Fact]
        public void ReadTaggingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taggingGuid = null;
            //string userGuid = null;
            //var response = instance.ReadTagging(taggingGuid, userGuid);
            //Assert.IsType<TaggingResponseBody>(response);
        }

        /// <summary>
        /// Test ReadTaxDocument
        /// </summary>
        [Fact]
        public void ReadTaxDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taxDocumentGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.ReadTaxDocument(taxDocumentGuid, memberGuid, userGuid);
            //Assert.IsType<TaxDocumentResponseBody>(response);
        }

        /// <summary>
        /// Test ReadTransaction
        /// </summary>
        [Fact]
        public void ReadTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionGuid = null;
            //string userGuid = null;
            //var response = instance.ReadTransaction(transactionGuid, userGuid);
            //Assert.IsType<TransactionResponseBody>(response);
        }

        /// <summary>
        /// Test ReadTransactionRule
        /// </summary>
        [Fact]
        public void ReadTransactionRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionRuleGuid = null;
            //string userGuid = null;
            //var response = instance.ReadTransactionRule(transactionRuleGuid, userGuid);
            //Assert.IsType<TransactionRuleResponseBody>(response);
        }

        /// <summary>
        /// Test ReadUser
        /// </summary>
        [Fact]
        public void ReadUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //var response = instance.ReadUser(userGuid);
            //Assert.IsType<UserResponseBody>(response);
        }

        /// <summary>
        /// Test RequestAuthorizationCode
        /// </summary>
        [Fact]
        public void RequestAuthorizationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthorizationCodeRequestBody authorizationCodeRequestBody = null;
            //var response = instance.RequestAuthorizationCode(authorizationCodeRequestBody);
            //Assert.IsType<AuthorizationCodeResponseBody>(response);
        }

        /// <summary>
        /// Test RequestConnectWidgetURL
        /// </summary>
        [Fact]
        public void RequestConnectWidgetURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //ConnectWidgetRequestBody connectWidgetRequestBody = null;
            //var response = instance.RequestConnectWidgetURL(userGuid, connectWidgetRequestBody);
            //Assert.IsType<ConnectWidgetResponseBody>(response);
        }

        /// <summary>
        /// Test RequestOAuthWindowURI
        /// </summary>
        [Fact]
        public void RequestOAuthWindowURITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //string? clientRedirectUrl = null;
            //string? enableApp2app = null;
            //string? referralSource = null;
            //bool? skipAggregation = null;
            //string? uiMessageWebviewUrlScheme = null;
            //var response = instance.RequestOAuthWindowURI(memberGuid, userGuid, clientRedirectUrl, enableApp2app, referralSource, skipAggregation, uiMessageWebviewUrlScheme);
            //Assert.IsType<OAuthWindowResponseBody>(response);
        }

        /// <summary>
        /// Test RequestWidgetURL
        /// </summary>
        [Fact]
        public void RequestWidgetURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //WidgetRequestBody widgetRequestBody = null;
            //string? acceptLanguage = null;
            //var response = instance.RequestWidgetURL(userGuid, widgetRequestBody, acceptLanguage);
            //Assert.IsType<WidgetResponseBody>(response);
        }

        /// <summary>
        /// Test ResumeAggregation
        /// </summary>
        [Fact]
        public void ResumeAggregationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //MemberResumeRequestBody memberResumeRequestBody = null;
            //var response = instance.ResumeAggregation(memberGuid, userGuid, memberResumeRequestBody);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateAccountByMember
        /// </summary>
        [Fact]
        public void UpdateAccountByMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //AccountUpdateRequestBody accountUpdateRequestBody = null;
            //var response = instance.UpdateAccountByMember(accountGuid, memberGuid, userGuid, accountUpdateRequestBody);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateCategory
        /// </summary>
        [Fact]
        public void UpdateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryGuid = null;
            //string userGuid = null;
            //CategoryUpdateRequestBody categoryUpdateRequestBody = null;
            //var response = instance.UpdateCategory(categoryGuid, userGuid, categoryUpdateRequestBody);
            //Assert.IsType<CategoryResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateManagedAccount
        /// </summary>
        [Fact]
        public void UpdateManagedAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string userGuid = null;
            //ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody = null;
            //var response = instance.UpdateManagedAccount(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody);
            //Assert.IsType<AccountResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateManagedMember
        /// </summary>
        [Fact]
        public void UpdateManagedMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody = null;
            //var response = instance.UpdateManagedMember(memberGuid, userGuid, managedMemberUpdateRequestBody);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateManagedTransaction
        /// </summary>
        [Fact]
        public void UpdateManagedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountGuid = null;
            //string memberGuid = null;
            //string transactionGuid = null;
            //string userGuid = null;
            //ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody = null;
            //var response = instance.UpdateManagedTransaction(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody);
            //Assert.IsType<TransactionResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateMember
        /// </summary>
        [Fact]
        public void UpdateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //MemberUpdateRequestBody memberUpdateRequestBody = null;
            //var response = instance.UpdateMember(memberGuid, userGuid, memberUpdateRequestBody);
            //Assert.IsType<MemberResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Fact]
        public void UpdateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagGuid = null;
            //string userGuid = null;
            //TagUpdateRequestBody tagUpdateRequestBody = null;
            //var response = instance.UpdateTag(tagGuid, userGuid, tagUpdateRequestBody);
            //Assert.IsType<TagResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateTagging
        /// </summary>
        [Fact]
        public void UpdateTaggingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taggingGuid = null;
            //string userGuid = null;
            //TaggingUpdateRequestBody taggingUpdateRequestBody = null;
            //var response = instance.UpdateTagging(taggingGuid, userGuid, taggingUpdateRequestBody);
            //Assert.IsType<TaggingResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Fact]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionGuid = null;
            //string userGuid = null;
            //TransactionUpdateRequestBody transactionUpdateRequestBody = null;
            //var response = instance.UpdateTransaction(transactionGuid, userGuid, transactionUpdateRequestBody);
            //Assert.IsType<TransactionResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateTransactionRule
        /// </summary>
        [Fact]
        public void UpdateTransactionRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionRuleGuid = null;
            //string userGuid = null;
            //TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody = null;
            //var response = instance.UpdateTransactionRule(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody);
            //Assert.IsType<TransactionRuleResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //UserUpdateRequestBody userUpdateRequestBody = null;
            //var response = instance.UpdateUser(userGuid, userUpdateRequestBody);
            //Assert.IsType<UserResponseBody>(response);
        }

        /// <summary>
        /// Test UsersUserGuidMonthlyCashFlowProfileGet
        /// </summary>
        [Fact]
        public void UsersUserGuidMonthlyCashFlowProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //var response = instance.UsersUserGuidMonthlyCashFlowProfileGet(userGuid);
            //Assert.IsType<MonthlyCashFlowResponseBody>(response);
        }

        /// <summary>
        /// Test UsersUserGuidMonthlyCashFlowProfilePut
        /// </summary>
        [Fact]
        public void UsersUserGuidMonthlyCashFlowProfilePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody = null;
            //var response = instance.UsersUserGuidMonthlyCashFlowProfilePut(userGuid, monthlyCashFlowProfileRequestBody);
            //Assert.IsType<MonthlyCashFlowResponseBody>(response);
        }

        /// <summary>
        /// Test UsersUserGuidTransactionsTransactionGuidSplitDelete
        /// </summary>
        [Fact]
        public void UsersUserGuidTransactionsTransactionGuidSplitDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionGuid = null;
            //string userGuid = null;
            //instance.UsersUserGuidTransactionsTransactionGuidSplitDelete(transactionGuid, userGuid);
        }

        /// <summary>
        /// Test UsersUserGuidTransactionsTransactionGuidSplitPost
        /// </summary>
        [Fact]
        public void UsersUserGuidTransactionsTransactionGuidSplitPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userGuid = null;
            //string transactionGuid = null;
            //SplitTransactionRequestBody? splitTransactionRequestBody = null;
            //var response = instance.UsersUserGuidTransactionsTransactionGuidSplitPost(userGuid, transactionGuid, splitTransactionRequestBody);
            //Assert.IsType<SplitTransactionsResponseBody>(response);
        }

        /// <summary>
        /// Test VerifyMember
        /// </summary>
        [Fact]
        public void VerifyMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string memberGuid = null;
            //string userGuid = null;
            //var response = instance.VerifyMember(memberGuid, userGuid);
            //Assert.IsType<MemberResponseBody>(response);
        }
    }
}
