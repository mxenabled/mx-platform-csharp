/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all accounts associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the accounts associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        AccountsResponseBody ListAccountsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all accounts associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the accounts associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        ApiResponse<AccountsResponseBody> ListAccountsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all categories associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the categories associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        CategoriesResponseBody ListCategoriesInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all categories associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the categories associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        ApiResponse<CategoriesResponseBody> ListCategoriesInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List insights by account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all insights associated with a specified account GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsResponseBody</returns>
        InsightsResponseBody ListInsightsByAccount(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List insights by account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all insights associated with a specified account GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsResponseBody</returns>
        ApiResponse<InsightsResponseBody> ListInsightsByAccountWithHttpInfo(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all insights for a user.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the insights associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsResponseBody</returns>
        InsightsResponseBody ListInsightsUser(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all insights for a user.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the insights associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsResponseBody</returns>
        ApiResponse<InsightsResponseBody> ListInsightsUserWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all merchants associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the merchants associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantsResponseBody</returns>
        MerchantsResponseBody ListMerchantsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all merchants associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the merchants associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantsResponseBody</returns>
        ApiResponse<MerchantsResponseBody> ListMerchantsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all scheduled payments associated with an insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the scheduled payments associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPaymentsResponseBody</returns>
        ScheduledPaymentsResponseBody ListScheduledPaymentsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all scheduled payments associated with an insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the scheduled payments associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPaymentsResponseBody</returns>
        ApiResponse<ScheduledPaymentsResponseBody> ListScheduledPaymentsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all transactions associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the transactions associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListTransactionsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all transactions associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the transactions associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListTransactionsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Read a specific insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightResponseBody</returns>
        InsightResponseBody ReadInsightsUser(string userGuid, string insightGuid, int operationIndex = 0);

        /// <summary>
        /// Read a specific insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightResponseBody</returns>
        ApiResponse<InsightResponseBody> ReadInsightsUserWithHttpInfo(string userGuid, string insightGuid, int operationIndex = 0);
        /// <summary>
        /// Update insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightResponse</returns>
        InsightResponse UpdateInsight(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightResponse</returns>
        ApiResponse<InsightResponse> UpdateInsightWithHttpInfo(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all accounts associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the accounts associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        System.Threading.Tasks.Task<AccountsResponseBody> ListAccountsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all accounts associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the accounts associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponseBody>> ListAccountsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all categories associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the categories associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        System.Threading.Tasks.Task<CategoriesResponseBody> ListCategoriesInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all categories associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the categories associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesResponseBody>> ListCategoriesInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List insights by account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all insights associated with a specified account GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsResponseBody</returns>
        System.Threading.Tasks.Task<InsightsResponseBody> ListInsightsByAccountAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List insights by account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all insights associated with a specified account GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsResponseBody>> ListInsightsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all insights for a user.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the insights associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsResponseBody</returns>
        System.Threading.Tasks.Task<InsightsResponseBody> ListInsightsUserAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all insights for a user.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the insights associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsResponseBody>> ListInsightsUserWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all merchants associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the merchants associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantsResponseBody</returns>
        System.Threading.Tasks.Task<MerchantsResponseBody> ListMerchantsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all merchants associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the merchants associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantsResponseBody>> ListMerchantsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all scheduled payments associated with an insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the scheduled payments associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPaymentsResponseBody</returns>
        System.Threading.Tasks.Task<ScheduledPaymentsResponseBody> ListScheduledPaymentsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all scheduled payments associated with an insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the scheduled payments associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPaymentsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledPaymentsResponseBody>> ListScheduledPaymentsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all transactions associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the transactions associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all transactions associated with an insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the transactions associated with the insight.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListTransactionsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a specific insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightResponseBody</returns>
        System.Threading.Tasks.Task<InsightResponseBody> ReadInsightsUserAsync(string userGuid, string insightGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a specific insight.
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightResponseBody>> ReadInsightsUserWithHttpInfoAsync(string userGuid, string insightGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightResponse</returns>
        System.Threading.Tasks.Task<InsightResponse> UpdateInsightAsync(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update insight
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightResponse>> UpdateInsightWithHttpInfoAsync(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInsightsApi : IInsightsApiSync, IInsightsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InsightsApi : IInsightsApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InsightsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InsightsApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InsightsApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InsightsApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all accounts associated with an insight. Use this endpoint to list all the accounts associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        public AccountsResponseBody ListAccountsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = ListAccountsInsightWithHttpInfo(userGuid, insightGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts associated with an insight. Use this endpoint to list all the accounts associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> ListAccountsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListAccountsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListAccountsInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListAccountsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsResponseBody>("/users/{user_guid}/insights/{insight_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all accounts associated with an insight. Use this endpoint to list all the accounts associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountsResponseBody> ListAccountsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = await ListAccountsInsightWithHttpInfoAsync(userGuid, insightGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts associated with an insight. Use this endpoint to list all the accounts associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody>> ListAccountsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListAccountsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListAccountsInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListAccountsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsResponseBody>("/users/{user_guid}/insights/{insight_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all categories associated with an insight. Use this endpoint to list all the categories associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        public CategoriesResponseBody ListCategoriesInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = ListCategoriesInsightWithHttpInfo(userGuid, insightGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all categories associated with an insight. Use this endpoint to list all the categories associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> ListCategoriesInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListCategoriesInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListCategoriesInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListCategoriesInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoriesResponseBody>("/users/{user_guid}/insights/{insight_guid}/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategoriesInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all categories associated with an insight. Use this endpoint to list all the categories associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoriesResponseBody> ListCategoriesInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = await ListCategoriesInsightWithHttpInfoAsync(userGuid, insightGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all categories associated with an insight. Use this endpoint to list all the categories associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody>> ListCategoriesInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListCategoriesInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListCategoriesInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListCategoriesInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoriesResponseBody>("/users/{user_guid}/insights/{insight_guid}/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategoriesInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List insights by account Use this endpoint to list all insights associated with a specified account GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsResponseBody</returns>
        public InsightsResponseBody ListInsightsByAccount(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> localVarResponse = ListInsightsByAccountWithHttpInfo(accountGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List insights by account Use this endpoint to list all insights associated with a specified account GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> ListInsightsByAccountWithHttpInfo(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling InsightsApi->ListInsightsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListInsightsByAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListInsightsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsResponseBody>("/users/{user_guid}/accounts/{account_guid}/insights", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsightsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List insights by account Use this endpoint to list all insights associated with a specified account GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsResponseBody</returns>
        public async System.Threading.Tasks.Task<InsightsResponseBody> ListInsightsByAccountAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> localVarResponse = await ListInsightsByAccountWithHttpInfoAsync(accountGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List insights by account Use this endpoint to list all insights associated with a specified account GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody>> ListInsightsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling InsightsApi->ListInsightsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListInsightsByAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListInsightsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsResponseBody>("/users/{user_guid}/accounts/{account_guid}/insights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsightsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all insights for a user. Use this endpoint to list all the insights associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsResponseBody</returns>
        public InsightsResponseBody ListInsightsUser(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> localVarResponse = ListInsightsUserWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all insights for a user. Use this endpoint to list all the insights associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> ListInsightsUserWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListInsightsUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListInsightsUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsResponseBody>("/users/{user_guid}/insights", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsightsUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all insights for a user. Use this endpoint to list all the insights associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsResponseBody</returns>
        public async System.Threading.Tasks.Task<InsightsResponseBody> ListInsightsUserAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody> localVarResponse = await ListInsightsUserWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all insights for a user. Use this endpoint to list all the insights associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InsightsResponseBody>> ListInsightsUserWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListInsightsUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListInsightsUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsResponseBody>("/users/{user_guid}/insights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsightsUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all merchants associated with an insight. Use this endpoint to list all the merchants associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantsResponseBody</returns>
        public MerchantsResponseBody ListMerchantsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> localVarResponse = ListMerchantsInsightWithHttpInfo(userGuid, insightGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all merchants associated with an insight. Use this endpoint to list all the merchants associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> ListMerchantsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListMerchantsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListMerchantsInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListMerchantsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MerchantsResponseBody>("/users/{user_guid}/insights/{insight_guid}/merchants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchantsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all merchants associated with an insight. Use this endpoint to list all the merchants associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantsResponseBody</returns>
        public async System.Threading.Tasks.Task<MerchantsResponseBody> ListMerchantsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> localVarResponse = await ListMerchantsInsightWithHttpInfoAsync(userGuid, insightGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all merchants associated with an insight. Use this endpoint to list all the merchants associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody>> ListMerchantsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListMerchantsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListMerchantsInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListMerchantsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerchantsResponseBody>("/users/{user_guid}/insights/{insight_guid}/merchants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchantsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all scheduled payments associated with an insight Use this endpoint to list all the scheduled payments associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduledPaymentsResponseBody</returns>
        public ScheduledPaymentsResponseBody ListScheduledPaymentsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<ScheduledPaymentsResponseBody> localVarResponse = ListScheduledPaymentsInsightWithHttpInfo(userGuid, insightGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all scheduled payments associated with an insight Use this endpoint to list all the scheduled payments associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduledPaymentsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<ScheduledPaymentsResponseBody> ListScheduledPaymentsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListScheduledPaymentsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListScheduledPaymentsInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListScheduledPaymentsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduledPaymentsResponseBody>("/users/{user_guid}/insights/{insight_guid}/scheduled_payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListScheduledPaymentsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all scheduled payments associated with an insight Use this endpoint to list all the scheduled payments associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduledPaymentsResponseBody</returns>
        public async System.Threading.Tasks.Task<ScheduledPaymentsResponseBody> ListScheduledPaymentsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<ScheduledPaymentsResponseBody> localVarResponse = await ListScheduledPaymentsInsightWithHttpInfoAsync(userGuid, insightGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all scheduled payments associated with an insight Use this endpoint to list all the scheduled payments associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduledPaymentsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<ScheduledPaymentsResponseBody>> ListScheduledPaymentsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListScheduledPaymentsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListScheduledPaymentsInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListScheduledPaymentsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduledPaymentsResponseBody>("/users/{user_guid}/insights/{insight_guid}/scheduled_payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListScheduledPaymentsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions associated with an insight. Use this endpoint to list all the transactions associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListTransactionsInsight(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListTransactionsInsightWithHttpInfo(userGuid, insightGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions associated with an insight. Use this endpoint to list all the transactions associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListTransactionsInsightWithHttpInfo(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListTransactionsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListTransactionsInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListTransactionsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/insights/{insight_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions associated with an insight. Use this endpoint to list all the transactions associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsInsightAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListTransactionsInsightWithHttpInfoAsync(userGuid, insightGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions associated with an insight. Use this endpoint to list all the transactions associated with the insight.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListTransactionsInsightWithHttpInfoAsync(string userGuid, string insightGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ListTransactionsInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ListTransactionsInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "InsightsApi.ListTransactionsInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/insights/{insight_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a specific insight. Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightResponseBody</returns>
        public InsightResponseBody ReadInsightsUser(string userGuid, string insightGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightResponseBody> localVarResponse = ReadInsightsUserWithHttpInfo(userGuid, insightGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a specific insight. Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InsightResponseBody> ReadInsightsUserWithHttpInfo(string userGuid, string insightGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ReadInsightsUser");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ReadInsightsUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter

            localVarRequestOptions.Operation = "InsightsApi.ReadInsightsUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightResponseBody>("/users/{user_guid}/insights{insight_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadInsightsUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a specific insight. Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightResponseBody</returns>
        public async System.Threading.Tasks.Task<InsightResponseBody> ReadInsightsUserAsync(string userGuid, string insightGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightResponseBody> localVarResponse = await ReadInsightsUserWithHttpInfoAsync(userGuid, insightGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a specific insight. Use this endpoint to read the attributes of a specific insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InsightResponseBody>> ReadInsightsUserWithHttpInfoAsync(string userGuid, string insightGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->ReadInsightsUser");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->ReadInsightsUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter

            localVarRequestOptions.Operation = "InsightsApi.ReadInsightsUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightResponseBody>("/users/{user_guid}/insights{insight_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadInsightsUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update insight Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightResponse</returns>
        public InsightResponse UpdateInsight(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightResponse> localVarResponse = UpdateInsightWithHttpInfo(userGuid, insightGuid, insightUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update insight Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InsightResponse> UpdateInsightWithHttpInfo(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->UpdateInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->UpdateInsight");
            }

            // verify the required parameter 'insightUpdateRequest' is set
            if (insightUpdateRequest == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightUpdateRequest' when calling InsightsApi->UpdateInsight");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            localVarRequestOptions.Data = insightUpdateRequest;

            localVarRequestOptions.Operation = "InsightsApi.UpdateInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InsightResponse>("/users/{user_guid}/insights{insight_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update insight Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightResponse</returns>
        public async System.Threading.Tasks.Task<InsightResponse> UpdateInsightAsync(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InsightResponse> localVarResponse = await UpdateInsightWithHttpInfoAsync(userGuid, insightGuid, insightUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update insight Use this endpoint to update the attributes of a particular insight according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="insightGuid">The unique identifier for the insight. Defined by MX.</param>
        /// <param name="insightUpdateRequest">The insight to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InsightResponse>> UpdateInsightWithHttpInfoAsync(string userGuid, string insightGuid, InsightUpdateRequest insightUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling InsightsApi->UpdateInsight");
            }

            // verify the required parameter 'insightGuid' is set
            if (insightGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightGuid' when calling InsightsApi->UpdateInsight");
            }

            // verify the required parameter 'insightUpdateRequest' is set
            if (insightUpdateRequest == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'insightUpdateRequest' when calling InsightsApi->UpdateInsight");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("insight_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(insightGuid)); // path parameter
            localVarRequestOptions.Data = insightUpdateRequest;

            localVarRequestOptions.Operation = "InsightsApi.UpdateInsight";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InsightResponse>("/users/{user_guid}/insights{insight_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInsight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
