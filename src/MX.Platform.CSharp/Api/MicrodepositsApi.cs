/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicrodepositsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Verify a Microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        MicrodepositResponseBody MicroDepositsMicrodepositGuidVerifyPut(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0);

        /// <summary>
        /// Verify a Microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        ApiResponse<MicrodepositResponseBody> MicroDepositsMicrodepositGuidVerifyPutWithHttpInfo(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0);
        /// <summary>
        /// List all microdeposits for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositsResponseBody</returns>
        MicrodepositsResponseBody UsersUserGuidMicroDepositsGet(string userGuid, int operationIndex = 0);

        /// <summary>
        /// List all microdeposits for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositsResponseBody</returns>
        ApiResponse<MicrodepositsResponseBody> UsersUserGuidMicroDepositsGetWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified microdeposit.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UsersUserGuidMicroDepositsMicroDepositGuidDelete(string microDepositGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified microdeposit.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfo(string microDepositGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read a microdeposit for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        MicrodepositResponseBody UsersUserGuidMicroDepositsMicroDepositGuidGet(string userGuid, string microDepositGuid, int operationIndex = 0);

        /// <summary>
        /// Read a microdeposit for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        ApiResponse<MicrodepositResponseBody> UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfo(string userGuid, string microDepositGuid, int operationIndex = 0);
        /// <summary>
        /// Create a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        MicrodepositResponseBody UsersUserGuidMicroDepositsPost(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        ApiResponse<MicrodepositResponseBody> UsersUserGuidMicroDepositsPostWithHttpInfo(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicrodepositsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Verify a Microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        System.Threading.Tasks.Task<MicrodepositResponseBody> MicroDepositsMicrodepositGuidVerifyPutAsync(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify a Microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MicrodepositResponseBody>> MicroDepositsMicrodepositGuidVerifyPutWithHttpInfoAsync(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all microdeposits for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositsResponseBody</returns>
        System.Threading.Tasks.Task<MicrodepositsResponseBody> UsersUserGuidMicroDepositsGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all microdeposits for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MicrodepositsResponseBody>> UsersUserGuidMicroDepositsGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified microdeposit.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserGuidMicroDepositsMicroDepositGuidDeleteAsync(string microDepositGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified microdeposit.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfoAsync(string microDepositGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a microdeposit for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        System.Threading.Tasks.Task<MicrodepositResponseBody> UsersUserGuidMicroDepositsMicroDepositGuidGetAsync(string userGuid, string microDepositGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a microdeposit for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MicrodepositResponseBody>> UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfoAsync(string userGuid, string microDepositGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        System.Threading.Tasks.Task<MicrodepositResponseBody> UsersUserGuidMicroDepositsPostAsync(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a microdeposit
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MicrodepositResponseBody>> UsersUserGuidMicroDepositsPostWithHttpInfoAsync(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicrodepositsApi : IMicrodepositsApiSync, IMicrodepositsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MicrodepositsApi : IMicrodepositsApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MicrodepositsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MicrodepositsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicrodepositsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MicrodepositsApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicrodepositsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MicrodepositsApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicrodepositsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MicrodepositsApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Verify a Microdeposit Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        public MicrodepositResponseBody MicroDepositsMicrodepositGuidVerifyPut(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = MicroDepositsMicrodepositGuidVerifyPutWithHttpInfo(microdepositGuid, microdepositVerifyRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify a Microdeposit Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> MicroDepositsMicrodepositGuidVerifyPutWithHttpInfo(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0)
        {
            // verify the required parameter 'microdepositGuid' is set
            if (microdepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microdepositGuid' when calling MicrodepositsApi->MicroDepositsMicrodepositGuidVerifyPut");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("microdeposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microdepositGuid)); // path parameter
            localVarRequestOptions.Data = microdepositVerifyRequestBody;

            localVarRequestOptions.Operation = "MicrodepositsApi.MicroDepositsMicrodepositGuidVerifyPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MicrodepositResponseBody>("/micro_deposits/{microdeposit_guid}/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MicroDepositsMicrodepositGuidVerifyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a Microdeposit Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        public async System.Threading.Tasks.Task<MicrodepositResponseBody> MicroDepositsMicrodepositGuidVerifyPutAsync(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = await MicroDepositsMicrodepositGuidVerifyPutWithHttpInfoAsync(microdepositGuid, microdepositVerifyRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify a Microdeposit Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the &#x60;status&#x60; is &#x60;VERIFIED&#x60;. Poll the &#x60;/users/{user_guid}/micro_deposits/{micro_deposit_guid}&#x60; (read microdeposit) endpoint until you see this status or an error state.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microdepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="microdepositVerifyRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody>> MicroDepositsMicrodepositGuidVerifyPutWithHttpInfoAsync(string microdepositGuid, MicrodepositVerifyRequestBody? microdepositVerifyRequestBody = default(MicrodepositVerifyRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'microdepositGuid' is set
            if (microdepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microdepositGuid' when calling MicrodepositsApi->MicroDepositsMicrodepositGuidVerifyPut");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("microdeposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microdepositGuid)); // path parameter
            localVarRequestOptions.Data = microdepositVerifyRequestBody;

            localVarRequestOptions.Operation = "MicrodepositsApi.MicroDepositsMicrodepositGuidVerifyPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MicrodepositResponseBody>("/micro_deposits/{microdeposit_guid}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MicroDepositsMicrodepositGuidVerifyPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all microdeposits for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositsResponseBody</returns>
        public MicrodepositsResponseBody UsersUserGuidMicroDepositsGet(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositsResponseBody> localVarResponse = UsersUserGuidMicroDepositsGetWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all microdeposits for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MicrodepositsResponseBody> UsersUserGuidMicroDepositsGetWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MicrodepositsResponseBody>("/users/{user_guid}/micro_deposits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all microdeposits for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositsResponseBody</returns>
        public async System.Threading.Tasks.Task<MicrodepositsResponseBody> UsersUserGuidMicroDepositsGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositsResponseBody> localVarResponse = await UsersUserGuidMicroDepositsGetWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all microdeposits for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MicrodepositsResponseBody>> UsersUserGuidMicroDepositsGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MicrodepositsResponseBody>("/users/{user_guid}/micro_deposits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a microdeposit Use this endpoint to delete the specified microdeposit.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UsersUserGuidMicroDepositsMicroDepositGuidDelete(string microDepositGuid, string userGuid, int operationIndex = 0)
        {
            UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfo(microDepositGuid, userGuid);
        }

        /// <summary>
        /// Delete a microdeposit Use this endpoint to delete the specified microdeposit.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfo(string microDepositGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'microDepositGuid' is set
            if (microDepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microDepositGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidDelete");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("micro_deposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microDepositGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsMicroDepositGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/micro_deposits/{micro_deposit_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsMicroDepositGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a microdeposit Use this endpoint to delete the specified microdeposit.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserGuidMicroDepositsMicroDepositGuidDeleteAsync(string microDepositGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfoAsync(microDepositGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a microdeposit Use this endpoint to delete the specified microdeposit.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> UsersUserGuidMicroDepositsMicroDepositGuidDeleteWithHttpInfoAsync(string microDepositGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'microDepositGuid' is set
            if (microDepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microDepositGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidDelete");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("micro_deposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microDepositGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsMicroDepositGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/micro_deposits/{micro_deposit_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsMicroDepositGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a microdeposit for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        public MicrodepositResponseBody UsersUserGuidMicroDepositsMicroDepositGuidGet(string userGuid, string microDepositGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfo(userGuid, microDepositGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a microdeposit for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfo(string userGuid, string microDepositGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidGet");
            }

            // verify the required parameter 'microDepositGuid' is set
            if (microDepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microDepositGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("micro_deposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microDepositGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsMicroDepositGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MicrodepositResponseBody>("/users/{user_guid}/micro_deposits/{micro_deposit_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsMicroDepositGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a microdeposit for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        public async System.Threading.Tasks.Task<MicrodepositResponseBody> UsersUserGuidMicroDepositsMicroDepositGuidGetAsync(string userGuid, string microDepositGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = await UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfoAsync(userGuid, microDepositGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a microdeposit for a user Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. &lt;br&gt;&lt;/br&gt; Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microDepositGuid">The unique identifier for the microdeposit. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody>> UsersUserGuidMicroDepositsMicroDepositGuidGetWithHttpInfoAsync(string userGuid, string microDepositGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidGet");
            }

            // verify the required parameter 'microDepositGuid' is set
            if (microDepositGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microDepositGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsMicroDepositGuidGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("micro_deposit_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(microDepositGuid)); // path parameter

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsMicroDepositGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MicrodepositResponseBody>("/users/{user_guid}/micro_deposits/{micro_deposit_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsMicroDepositGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a microdeposit Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MicrodepositResponseBody</returns>
        public MicrodepositResponseBody UsersUserGuidMicroDepositsPost(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = UsersUserGuidMicroDepositsPostWithHttpInfo(userGuid, microdepositRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a microdeposit Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MicrodepositResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> UsersUserGuidMicroDepositsPostWithHttpInfo(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsPost");
            }

            // verify the required parameter 'microdepositRequestBody' is set
            if (microdepositRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microdepositRequestBody' when calling MicrodepositsApi->UsersUserGuidMicroDepositsPost");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = microdepositRequestBody;

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MicrodepositResponseBody>("/users/{user_guid}/micro_deposits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a microdeposit Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MicrodepositResponseBody</returns>
        public async System.Threading.Tasks.Task<MicrodepositResponseBody> UsersUserGuidMicroDepositsPostAsync(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody> localVarResponse = await UsersUserGuidMicroDepositsPostWithHttpInfoAsync(userGuid, microdepositRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a microdeposit Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="microdepositRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MicrodepositResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MicrodepositResponseBody>> UsersUserGuidMicroDepositsPostWithHttpInfoAsync(string userGuid, MicrodepositRequestBody microdepositRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MicrodepositsApi->UsersUserGuidMicroDepositsPost");
            }

            // verify the required parameter 'microdepositRequestBody' is set
            if (microdepositRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'microdepositRequestBody' when calling MicrodepositsApi->UsersUserGuidMicroDepositsPost");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = microdepositRequestBody;

            localVarRequestOptions.Operation = "MicrodepositsApi.UsersUserGuidMicroDepositsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MicrodepositResponseBody>("/users/{user_guid}/micro_deposits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMicroDepositsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
