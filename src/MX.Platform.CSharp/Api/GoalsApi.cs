/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List goals
        /// </summary>
        /// <remarks>
        /// List all goals a user can set.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalsResponseBody</returns>
        GoalsResponseBody UsersUserGuidGoalsGet(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0);

        /// <summary>
        /// List goals
        /// </summary>
        /// <remarks>
        /// List all goals a user can set.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalsResponseBody</returns>
        ApiResponse<GoalsResponseBody> UsersUserGuidGoalsGetWithHttpInfo(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Delete a goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UsersUserGuidGoalsGoalGuidDelete(string goalGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Delete a goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserGuidGoalsGoalGuidDeleteWithHttpInfo(string goalGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read a goal
        /// </summary>
        /// <remarks>
        /// Read a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        GoalResponseBody UsersUserGuidGoalsGoalGuidGet(string goalGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read a goal
        /// </summary>
        /// <remarks>
        /// Read a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        ApiResponse<GoalResponseBody> UsersUserGuidGoalsGoalGuidGetWithHttpInfo(string goalGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// This endpoint updates a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        GoalResponseBody UsersUserGuidGoalsGoalGuidPut(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// This endpoint updates a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        ApiResponse<GoalResponseBody> UsersUserGuidGoalsGoalGuidPutWithHttpInfo(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        GoalResponseBody UsersUserGuidGoalsPost(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        ApiResponse<GoalResponseBody> UsersUserGuidGoalsPostWithHttpInfo(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0);
        /// <summary>
        /// Reposition goals
        /// </summary>
        /// <remarks>
        /// This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepositionResponseBody</returns>
        RepositionResponseBody UsersUserGuidGoalsRepositionPut(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0);

        /// <summary>
        /// Reposition goals
        /// </summary>
        /// <remarks>
        /// This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepositionResponseBody</returns>
        ApiResponse<RepositionResponseBody> UsersUserGuidGoalsRepositionPutWithHttpInfo(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List goals
        /// </summary>
        /// <remarks>
        /// List all goals a user can set.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalsResponseBody</returns>
        System.Threading.Tasks.Task<GoalsResponseBody> UsersUserGuidGoalsGetAsync(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List goals
        /// </summary>
        /// <remarks>
        /// List all goals a user can set.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalsResponseBody>> UsersUserGuidGoalsGetWithHttpInfoAsync(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Delete a goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserGuidGoalsGoalGuidDeleteAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Delete a goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserGuidGoalsGoalGuidDeleteWithHttpInfoAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a goal
        /// </summary>
        /// <remarks>
        /// Read a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsGoalGuidGetAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a goal
        /// </summary>
        /// <remarks>
        /// Read a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalResponseBody>> UsersUserGuidGoalsGoalGuidGetWithHttpInfoAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// This endpoint updates a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsGoalGuidPutAsync(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// This endpoint updates a specific goal.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalResponseBody>> UsersUserGuidGoalsGoalGuidPutWithHttpInfoAsync(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsPostAsync(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalResponseBody>> UsersUserGuidGoalsPostWithHttpInfoAsync(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reposition goals
        /// </summary>
        /// <remarks>
        /// This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepositionResponseBody</returns>
        System.Threading.Tasks.Task<RepositionResponseBody> UsersUserGuidGoalsRepositionPutAsync(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reposition goals
        /// </summary>
        /// <remarks>
        /// This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepositionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositionResponseBody>> UsersUserGuidGoalsRepositionPutWithHttpInfoAsync(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApi : IGoalsApiSync, IGoalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalsApi : IGoalsApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalsApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GoalsApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List goals List all goals a user can set.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalsResponseBody</returns>
        public GoalsResponseBody UsersUserGuidGoalsGet(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalsResponseBody> localVarResponse = UsersUserGuidGoalsGetWithHttpInfo(userGuid, page, recordsPerAge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List goals List all goals a user can set.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<GoalsResponseBody> UsersUserGuidGoalsGetWithHttpInfo(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerAge != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_age", recordsPerAge));
            }

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GoalsResponseBody>("/users/{user_guid}/goals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List goals List all goals a user can set.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalsResponseBody</returns>
        public async System.Threading.Tasks.Task<GoalsResponseBody> UsersUserGuidGoalsGetAsync(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalsResponseBody> localVarResponse = await UsersUserGuidGoalsGetWithHttpInfoAsync(userGuid, page, recordsPerAge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List goals List all goals a user can set.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="page">Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified. (optional)</param>
        /// <param name="recordsPerAge">The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<GoalsResponseBody>> UsersUserGuidGoalsGetWithHttpInfoAsync(string userGuid, string? page = default(string?), string? recordsPerAge = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerAge != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_age", recordsPerAge));
            }

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GoalsResponseBody>("/users/{user_guid}/goals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a goal Delete a goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UsersUserGuidGoalsGoalGuidDelete(string goalGuid, string userGuid, int operationIndex = 0)
        {
            UsersUserGuidGoalsGoalGuidDeleteWithHttpInfo(goalGuid, userGuid);
        }

        /// <summary>
        /// Delete a goal Delete a goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> UsersUserGuidGoalsGoalGuidDeleteWithHttpInfo(string goalGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidDelete");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a goal Delete a goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserGuidGoalsGoalGuidDeleteAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersUserGuidGoalsGoalGuidDeleteWithHttpInfoAsync(goalGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a goal Delete a goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> UsersUserGuidGoalsGoalGuidDeleteWithHttpInfoAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidDelete");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a goal Read a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        public GoalResponseBody UsersUserGuidGoalsGoalGuidGet(string goalGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = UsersUserGuidGoalsGoalGuidGetWithHttpInfo(goalGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a goal Read a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> UsersUserGuidGoalsGoalGuidGetWithHttpInfo(string goalGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidGet");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GoalResponseBody>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a goal Read a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        public async System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsGoalGuidGetAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = await UsersUserGuidGoalsGoalGuidGetWithHttpInfoAsync(goalGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a goal Read a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody>> UsersUserGuidGoalsGoalGuidGetWithHttpInfoAsync(string goalGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidGet");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GoalResponseBody>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a goal This endpoint updates a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        public GoalResponseBody UsersUserGuidGoalsGoalGuidPut(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = UsersUserGuidGoalsGoalGuidPutWithHttpInfo(goalGuid, userGuid, updateGoalRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal This endpoint updates a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> UsersUserGuidGoalsGoalGuidPutWithHttpInfo(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }

            // verify the required parameter 'updateGoalRequestBody' is set
            if (updateGoalRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'updateGoalRequestBody' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = updateGoalRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GoalResponseBody>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a goal This endpoint updates a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        public async System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsGoalGuidPutAsync(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = await UsersUserGuidGoalsGoalGuidPutWithHttpInfoAsync(goalGuid, userGuid, updateGoalRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal This endpoint updates a specific goal.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalGuid">The unique identifier for a goal. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for a user.</param>
        /// <param name="updateGoalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody>> UsersUserGuidGoalsGoalGuidPutWithHttpInfoAsync(string goalGuid, string userGuid, UpdateGoalRequestBody updateGoalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'goalGuid' is set
            if (goalGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }

            // verify the required parameter 'updateGoalRequestBody' is set
            if (updateGoalRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'updateGoalRequestBody' when calling GoalsApi->UsersUserGuidGoalsGoalGuidPut");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("goal_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(goalGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = updateGoalRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsGoalGuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GoalResponseBody>("/users/{user_guid}/goals/{goal_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsGoalGuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a goal Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GoalResponseBody</returns>
        public GoalResponseBody UsersUserGuidGoalsPost(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = UsersUserGuidGoalsPostWithHttpInfo(userGuid, goalRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GoalResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> UsersUserGuidGoalsPostWithHttpInfo(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsPost");
            }

            // verify the required parameter 'goalRequestBody' is set
            if (goalRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalRequestBody' when calling GoalsApi->UsersUserGuidGoalsPost");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = goalRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GoalResponseBody>("/users/{user_guid}/goals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a goal Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GoalResponseBody</returns>
        public async System.Threading.Tasks.Task<GoalResponseBody> UsersUserGuidGoalsPostAsync(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody> localVarResponse = await UsersUserGuidGoalsPostWithHttpInfoAsync(userGuid, goalRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal Create a goal. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="goalRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GoalResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<GoalResponseBody>> UsersUserGuidGoalsPostWithHttpInfoAsync(string userGuid, GoalRequestBody goalRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsPost");
            }

            // verify the required parameter 'goalRequestBody' is set
            if (goalRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'goalRequestBody' when calling GoalsApi->UsersUserGuidGoalsPost");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = goalRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GoalResponseBody>("/users/{user_guid}/goals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reposition goals This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepositionResponseBody</returns>
        public RepositionResponseBody UsersUserGuidGoalsRepositionPut(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<RepositionResponseBody> localVarResponse = UsersUserGuidGoalsRepositionPutWithHttpInfo(userGuid, repositionRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reposition goals This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepositionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<RepositionResponseBody> UsersUserGuidGoalsRepositionPutWithHttpInfo(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsRepositionPut");
            }

            // verify the required parameter 'repositionRequestBody' is set
            if (repositionRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'repositionRequestBody' when calling GoalsApi->UsersUserGuidGoalsRepositionPut");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = repositionRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsRepositionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RepositionResponseBody>("/users/{user_guid}/goals/reposition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsRepositionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reposition goals This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepositionResponseBody</returns>
        public async System.Threading.Tasks.Task<RepositionResponseBody> UsersUserGuidGoalsRepositionPutAsync(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<RepositionResponseBody> localVarResponse = await UsersUserGuidGoalsRepositionPutWithHttpInfoAsync(userGuid, repositionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reposition goals This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="repositionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepositionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<RepositionResponseBody>> UsersUserGuidGoalsRepositionPutWithHttpInfoAsync(string userGuid, RepositionRequestBody repositionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling GoalsApi->UsersUserGuidGoalsRepositionPut");
            }

            // verify the required parameter 'repositionRequestBody' is set
            if (repositionRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'repositionRequestBody' when calling GoalsApi->UsersUserGuidGoalsRepositionPut");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = repositionRequestBody;

            localVarRequestOptions.Operation = "GoalsApi.UsersUserGuidGoalsRepositionPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RepositionResponseBody>("/users/{user_guid}/goals/reposition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidGoalsRepositionPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
