/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMxPlatformApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Aggregate member
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody AggregateMember(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Aggregate member
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> AggregateMemberWithHttpInfo(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Check balances
        /// </summary>
        /// <remarks>
        /// This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody CheckBalances(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Check balances
        /// </summary>
        /// <remarks>
        /// This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> CheckBalancesWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Create category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        CategoryResponseBody CreateCategory(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        ApiResponse<CategoryResponseBody> CreateCategoryWithHttpInfo(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a partner-managed account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody CreateManagedAccount(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a partner-managed account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> CreateManagedAccountWithHttpInfo(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody CreateManagedMember(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> CreateManagedMemberWithHttpInfo(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        TransactionResponseBody CreateManagedTransaction(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        ApiResponse<TransactionResponseBody> CreateManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create manual account
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody CreateManualAccount(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create manual account
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> CreateManualAccountWithHttpInfo(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody CreateMember(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> CreateMemberWithHttpInfo(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom tag.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        TagResponseBody CreateTag(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom tag.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        ApiResponse<TagResponseBody> CreateTagWithHttpInfo(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        TaggingResponseBody CreateTagging(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        ApiResponse<TaggingResponseBody> CreateTaggingWithHttpInfo(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        TransactionRuleResponseBody CreateTransactionRule(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        ApiResponse<TransactionRuleResponseBody> CreateTransactionRuleWithHttpInfo(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        UserResponseBody CreateUser(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        ApiResponse<UserResponseBody> CreateUserWithHttpInfo(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Read a Credit Card Product
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditCardProductResponse</returns>
        CreditCardProductResponse CreditCard(string creditCardProductGuid, int operationIndex = 0);

        /// <summary>
        /// Read a Credit Card Product
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditCardProductResponse</returns>
        ApiResponse<CreditCardProductResponse> CreditCardWithHttpInfo(string creditCardProductGuid, int operationIndex = 0);
        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCategory(string categoryGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCategoryWithHttpInfo(string categoryGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteManagedAccount(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteManagedMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteManagedMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete manual account
        /// </summary>
        /// <remarks>
        /// This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteManualAccount(string accountGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete manual account
        /// </summary>
        /// <remarks>
        /// This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteManualAccountWithHttpInfo(string accountGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete member
        /// </summary>
        /// <remarks>
        /// Accessing this endpoint will permanently delete a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete member
        /// </summary>
        /// <remarks>
        /// Accessing this endpoint will permanently delete a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTag(string tagGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTagWithHttpInfo(string tagGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTagging(string taggingGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaggingWithHttpInfo(string taggingGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransactionRule(string transactionRuleGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUser(string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// (Deprecated) Request an authorization code.
        /// </summary>
        /// <remarks>
        /// (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentProcessorAuthorizationCodeResponseBody</returns>
        PaymentProcessorAuthorizationCodeResponseBody DeprecatedRequestPaymentProcessorAuthorizationCode(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0);

        /// <summary>
        /// (Deprecated) Request an authorization code.
        /// </summary>
        /// <remarks>
        /// (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentProcessorAuthorizationCodeResponseBody</returns>
        ApiResponse<PaymentProcessorAuthorizationCodeResponseBody> DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfo(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0);
        /// <summary>
        /// Download statement pdf
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a specified statement PDF.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadStatementPDF(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Download statement pdf
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a specified statement PDF.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadStatementPDFWithHttpInfo(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Download a Tax Document PDF
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadTaxDocument(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Download a Tax Document PDF
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadTaxDocumentWithHttpInfo(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Enhance transactions
        /// </summary>
        /// <remarks>
        /// Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnhanceTransactionsResponseBody</returns>
        EnhanceTransactionsResponseBody EnhanceTransactions(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0);

        /// <summary>
        /// Enhance transactions
        /// </summary>
        /// <remarks>
        /// Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnhanceTransactionsResponseBody</returns>
        ApiResponse<EnhanceTransactionsResponseBody> EnhanceTransactionsWithHttpInfo(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0);
        /// <summary>
        /// Extend history
        /// </summary>
        /// <remarks>
        /// Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody ExtendHistory(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Extend history
        /// </summary>
        /// <remarks>
        /// Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> ExtendHistoryWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Fetch Rewards
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody FetchRewards(string userGuid, string memberGuid, int operationIndex = 0);

        /// <summary>
        /// Fetch Rewards
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> FetchRewardsWithHttpInfo(string userGuid, string memberGuid, int operationIndex = 0);
        /// <summary>
        /// Fetch statements
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the statements associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody FetchStatements(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Fetch statements
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the statements associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> FetchStatementsWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Fetch Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody FetchTaxDocuments(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Fetch Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> FetchTaxDocumentsWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Identify member
        /// </summary>
        /// <remarks>
        /// The identify endpoint begins an identification process for an already-existing member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody IdentifyMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Identify member
        /// </summary>
        /// <remarks>
        /// The identify endpoint begins an identification process for an already-existing member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> IdentifyMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// List account numbers by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountNumbersResponseBody</returns>
        AccountNumbersResponseBody ListAccountNumbersByAccount(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List account numbers by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountNumbersResponseBody</returns>
        ApiResponse<AccountNumbersResponseBody> ListAccountNumbersByAccountWithHttpInfo(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List account numbers by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountNumbersResponseBody</returns>
        AccountNumbersResponseBody ListAccountNumbersByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List account numbers by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountNumbersResponseBody</returns>
        ApiResponse<AccountNumbersResponseBody> ListAccountNumbersByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List account owners by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array with information about every account associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountOwnersResponseBody</returns>
        AccountOwnersResponseBody ListAccountOwnersByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List account owners by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array with information about every account associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountOwnersResponseBody</returns>
        ApiResponse<AccountOwnersResponseBody> ListAccountOwnersByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        CategoriesResponseBody ListCategories(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        ApiResponse<CategoriesResponseBody> ListCategoriesWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List default categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        CategoriesResponseBody ListDefaultCategories(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List default categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        ApiResponse<CategoriesResponseBody> ListDefaultCategoriesWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List default categories by user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        CategoriesResponseBody ListDefaultCategoriesByUser(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List default categories by user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        ApiResponse<CategoriesResponseBody> ListDefaultCategoriesByUserWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List favorite institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        InstitutionsResponseBody ListFavoriteInstitutions(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List favorite institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        ApiResponse<InstitutionsResponseBody> ListFavoriteInstitutionsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List holdings
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        HoldingsResponseBody ListHoldings(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List holdings
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        ApiResponse<HoldingsResponseBody> ListHoldingsWithHttpInfo(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List holdings by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        HoldingsResponseBody ListHoldingsByAccount(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List holdings by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        ApiResponse<HoldingsResponseBody> ListHoldingsByAccountWithHttpInfo(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List holdings by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        HoldingsResponseBody ListHoldingsByMember(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List holdings by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        ApiResponse<HoldingsResponseBody> ListHoldingsByMemberWithHttpInfo(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List institution credentials
        /// </summary>
        /// <remarks>
        /// Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CredentialsResponseBody</returns>
        CredentialsResponseBody ListInstitutionCredentials(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List institution credentials
        /// </summary>
        /// <remarks>
        /// Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CredentialsResponseBody</returns>
        ApiResponse<CredentialsResponseBody> ListInstitutionCredentialsWithHttpInfo(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        InstitutionsResponseBody ListInstitutions(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        ApiResponse<InstitutionsResponseBody> ListInstitutionsWithHttpInfo(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List managed accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        AccountsResponseBody ListManagedAccounts(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List managed accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        ApiResponse<AccountsResponseBody> ListManagedAccountsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List managed institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        InstitutionsResponseBody ListManagedInstitutions(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List managed institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        ApiResponse<InstitutionsResponseBody> ListManagedInstitutionsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List managed members
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MembersResponseBody</returns>
        MembersResponseBody ListManagedMembers(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List managed members
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MembersResponseBody</returns>
        ApiResponse<MembersResponseBody> ListManagedMembersWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List managed transactions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListManagedTransactions(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List managed transactions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListManagedTransactionsWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List accounts by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        AccountsResponseBody ListMemberAccounts(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List accounts by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        ApiResponse<AccountsResponseBody> ListMemberAccountsWithHttpInfo(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List member challenges
        /// </summary>
        /// <remarks>
        /// Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChallengesResponseBody</returns>
        ChallengesResponseBody ListMemberChallenges(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List member challenges
        /// </summary>
        /// <remarks>
        /// Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChallengesResponseBody</returns>
        ApiResponse<ChallengesResponseBody> ListMemberChallengesWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List member credentials
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CredentialsResponseBody</returns>
        CredentialsResponseBody ListMemberCredentials(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List member credentials
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CredentialsResponseBody</returns>
        ApiResponse<CredentialsResponseBody> ListMemberCredentialsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every member associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MembersResponseBody</returns>
        MembersResponseBody ListMembers(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every member associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MembersResponseBody</returns>
        ApiResponse<MembersResponseBody> ListMembersWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List merchants
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of all the merchants in the MX system.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantsResponseBody</returns>
        MerchantsResponseBody ListMerchants(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List merchants
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of all the merchants in the MX system.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantsResponseBody</returns>
        ApiResponse<MerchantsResponseBody> ListMerchantsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsResponseBody</returns>
        RewardsResponseBody ListRewards(string userGuid, string memberGuid, int operationIndex = 0);

        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsResponseBody</returns>
        ApiResponse<RewardsResponseBody> ListRewardsWithHttpInfo(string userGuid, string memberGuid, int operationIndex = 0);
        /// <summary>
        /// List statements by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get an array of available statements.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatementsResponseBody</returns>
        StatementsResponseBody ListStatementsByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List statements by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get an array of available statements.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatementsResponseBody</returns>
        ApiResponse<StatementsResponseBody> ListStatementsByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List taggings
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingsResponseBody</returns>
        TaggingsResponseBody ListTaggings(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List taggings
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingsResponseBody</returns>
        ApiResponse<TaggingsResponseBody> ListTaggingsWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagsResponseBody</returns>
        TagsResponseBody ListTags(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagsResponseBody</returns>
        ApiResponse<TagsResponseBody> ListTagsWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a paginated list of tax documents.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxDocumentsResponseBody</returns>
        TaxDocumentsResponseBody ListTaxDocuments(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a paginated list of tax documents.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxDocumentsResponseBody</returns>
        ApiResponse<TaxDocumentsResponseBody> ListTaxDocumentsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List transaction rules
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRulesResponseBody</returns>
        TransactionRulesResponseBody ListTransactionRules(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List transaction rules
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRulesResponseBody</returns>
        ApiResponse<TransactionRulesResponseBody> ListTransactionRulesWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListTransactions(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListTransactionsWithHttpInfo(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List transactions by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListTransactionsByAccount(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List transactions by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListTransactionsByAccountWithHttpInfo(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List transactions by member
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListTransactionsByMember(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List transactions by member
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListTransactionsByMemberWithHttpInfo(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List transactions by tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        TransactionsResponseBody ListTransactionsByTag(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// List transactions by tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        ApiResponse<TransactionsResponseBody> ListTransactionsByTagWithHttpInfo(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        AccountsResponseBody ListUserAccounts(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        ApiResponse<AccountsResponseBody> ListUserAccountsWithHttpInfo(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsersResponseBody</returns>
        UsersResponseBody ListUsers(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsersResponseBody</returns>
        ApiResponse<UsersResponseBody> ListUsersWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Read account
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody ReadAccount(string accountGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read account
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> ReadAccountWithHttpInfo(string accountGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody ReadAccountByMember(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> ReadAccountByMemberWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read a custom category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of either a default category or a custom category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        CategoryResponseBody ReadCategory(string categoryGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read a custom category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of either a default category or a custom category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        ApiResponse<CategoryResponseBody> ReadCategoryWithHttpInfo(string categoryGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read a default category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a default category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        CategoryResponseBody ReadDefaultCategory(string categoryGuid, int operationIndex = 0);

        /// <summary>
        /// Read a default category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a default category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        ApiResponse<CategoryResponseBody> ReadDefaultCategoryWithHttpInfo(string categoryGuid, int operationIndex = 0);
        /// <summary>
        /// Read holding
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingResponseBody</returns>
        HoldingResponseBody ReadHolding(string holdingGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read holding
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingResponseBody</returns>
        ApiResponse<HoldingResponseBody> ReadHoldingWithHttpInfo(string holdingGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read institution
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionResponseBody</returns>
        InstitutionResponseBody ReadInstitution(string institutionCode, int operationIndex = 0);

        /// <summary>
        /// Read institution
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionResponseBody</returns>
        ApiResponse<InstitutionResponseBody> ReadInstitutionWithHttpInfo(string institutionCode, int operationIndex = 0);
        /// <summary>
        /// Read managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody ReadManagedAccount(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> ReadManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read managed member
        /// </summary>
        /// <remarks>
        /// This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody ReadManagedMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read managed member
        /// </summary>
        /// <remarks>
        /// This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> ReadManagedMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read managed transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        TransactionResponseBody ReadManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read managed transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        ApiResponse<TransactionResponseBody> ReadManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody ReadMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> ReadMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read member status
        /// </summary>
        /// <remarks>
        /// This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberStatusResponseBody</returns>
        MemberStatusResponseBody ReadMemberStatus(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read member status
        /// </summary>
        /// <remarks>
        /// This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberStatusResponseBody</returns>
        ApiResponse<MemberStatusResponseBody> ReadMemberStatusWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read merchant
        /// </summary>
        /// <remarks>
        /// Returns information about a particular merchant, such as a logo, name, and website.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantResponseBody</returns>
        MerchantResponseBody ReadMerchant(string merchantGuid, int operationIndex = 0);

        /// <summary>
        /// Read merchant
        /// </summary>
        /// <remarks>
        /// Returns information about a particular merchant, such as a logo, name, and website.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantResponseBody</returns>
        ApiResponse<MerchantResponseBody> ReadMerchantWithHttpInfo(string merchantGuid, int operationIndex = 0);
        /// <summary>
        /// Read merchant location
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified merchant_location resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantLocationResponseBody</returns>
        MerchantLocationResponseBody ReadMerchantLocation(string merchantLocationGuid, int operationIndex = 0);

        /// <summary>
        /// Read merchant location
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified merchant_location resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantLocationResponseBody</returns>
        ApiResponse<MerchantLocationResponseBody> ReadMerchantLocationWithHttpInfo(string merchantLocationGuid, int operationIndex = 0);
        /// <summary>
        /// Read Reward
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardResponseBody</returns>
        RewardResponseBody ReadRewards(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0);

        /// <summary>
        /// Read Reward
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardResponseBody</returns>
        ApiResponse<RewardResponseBody> ReadRewardsWithHttpInfo(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0);
        /// <summary>
        /// Read statement by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a JSON representation of the statement.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatementResponseBody</returns>
        StatementResponseBody ReadStatementByMember(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read statement by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a JSON representation of the statement.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatementResponseBody</returns>
        ApiResponse<StatementResponseBody> ReadStatementByMemberWithHttpInfo(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        TagResponseBody ReadTag(string tagGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        ApiResponse<TagResponseBody> ReadTagWithHttpInfo(string tagGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        TaggingResponseBody ReadTagging(string taggingGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        ApiResponse<TaggingResponseBody> ReadTaggingWithHttpInfo(string taggingGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read a Tax Document
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of the specified tax document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxDocumentResponseBody</returns>
        TaxDocumentResponseBody ReadTaxDocument(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read a Tax Document
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of the specified tax document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxDocumentResponseBody</returns>
        ApiResponse<TaxDocumentResponseBody> ReadTaxDocumentWithHttpInfo(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        TransactionResponseBody ReadTransaction(string transactionGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        ApiResponse<TransactionResponseBody> ReadTransactionWithHttpInfo(string transactionGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        TransactionRuleResponseBody ReadTransactionRule(string transactionRuleGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        ApiResponse<TransactionRuleResponseBody> ReadTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Read user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        UserResponseBody ReadUser(string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        ApiResponse<UserResponseBody> ReadUserWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// Request an authorization code.
        /// </summary>
        /// <remarks>
        /// Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizationCodeResponseBody</returns>
        AuthorizationCodeResponseBody RequestAuthorizationCode(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0);

        /// <summary>
        /// Request an authorization code.
        /// </summary>
        /// <remarks>
        /// Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizationCodeResponseBody</returns>
        ApiResponse<AuthorizationCodeResponseBody> RequestAuthorizationCodeWithHttpInfo(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0);
        /// <summary>
        /// Request connect widget url
        /// </summary>
        /// <remarks>
        /// This endpoint will return a URL for an embeddable version of MX Connect.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectWidgetResponseBody</returns>
        ConnectWidgetResponseBody RequestConnectWidgetURL(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0);

        /// <summary>
        /// Request connect widget url
        /// </summary>
        /// <remarks>
        /// This endpoint will return a URL for an embeddable version of MX Connect.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectWidgetResponseBody</returns>
        ApiResponse<ConnectWidgetResponseBody> RequestConnectWidgetURLWithHttpInfo(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0);
        /// <summary>
        /// Request oauth window uri
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuthWindowResponseBody</returns>
        OAuthWindowResponseBody RequestOAuthWindowURI(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0);

        /// <summary>
        /// Request oauth window uri
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuthWindowResponseBody</returns>
        ApiResponse<OAuthWindowResponseBody> RequestOAuthWindowURIWithHttpInfo(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0);
        /// <summary>
        /// Request widget url
        /// </summary>
        /// <remarks>
        /// This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WidgetResponseBody</returns>
        WidgetResponseBody RequestWidgetURL(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0);

        /// <summary>
        /// Request widget url
        /// </summary>
        /// <remarks>
        /// This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WidgetResponseBody</returns>
        ApiResponse<WidgetResponseBody> RequestWidgetURLWithHttpInfo(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0);
        /// <summary>
        /// Resume aggregation
        /// </summary>
        /// <remarks>
        /// This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody ResumeAggregation(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0);

        /// <summary>
        /// Resume aggregation
        /// </summary>
        /// <remarks>
        /// This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> ResumeAggregationWithHttpInfo(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody UpdateAccountByMember(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> UpdateAccountByMemberWithHttpInfo(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        CategoryResponseBody UpdateCategory(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        ApiResponse<CategoryResponseBody> UpdateCategoryWithHttpInfo(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        AccountResponseBody UpdateManagedAccount(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        ApiResponse<AccountResponseBody> UpdateManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody UpdateManagedMember(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> UpdateManagedMemberWithHttpInfo(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        TransactionResponseBody UpdateManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        ApiResponse<TransactionResponseBody> UpdateManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody UpdateMember(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> UpdateMemberWithHttpInfo(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        TagResponseBody UpdateTag(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        ApiResponse<TagResponseBody> UpdateTagWithHttpInfo(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a tagging.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        TaggingResponseBody UpdateTagging(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a tagging.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        ApiResponse<TaggingResponseBody> UpdateTaggingWithHttpInfo(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        TransactionResponseBody UpdateTransaction(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        ApiResponse<TransactionResponseBody> UpdateTransactionWithHttpInfo(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update transaction_rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        TransactionRuleResponseBody UpdateTransactionRule(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update transaction_rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        ApiResponse<TransactionRuleResponseBody> UpdateTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        UserResponseBody UpdateUser(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        ApiResponse<UserResponseBody> UpdateUserWithHttpInfo(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Read monthly cash flow profile
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MonthlyCashFlowResponseBody</returns>
        MonthlyCashFlowResponseBody UsersUserGuidMonthlyCashFlowProfileGet(string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MonthlyCashFlowResponseBody</returns>
        ApiResponse<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// Update monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MonthlyCashFlowResponseBody</returns>
        MonthlyCashFlowResponseBody UsersUserGuidMonthlyCashFlowProfilePut(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MonthlyCashFlowResponseBody</returns>
        ApiResponse<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfo(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0);
        /// <summary>
        /// Delete split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UsersUserGuidTransactionsTransactionGuidSplitDelete(string transactionGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Delete split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfo(string transactionGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Create split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SplitTransactionsResponseBody</returns>
        SplitTransactionsResponseBody UsersUserGuidTransactionsTransactionGuidSplitPost(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0);

        /// <summary>
        /// Create split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SplitTransactionsResponseBody</returns>
        ApiResponse<SplitTransactionsResponseBody> UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfo(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0);
        /// <summary>
        /// Verify member
        /// </summary>
        /// <remarks>
        /// The verify endpoint begins a verification process for a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        MemberResponseBody VerifyMember(string memberGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Verify member
        /// </summary>
        /// <remarks>
        /// The verify endpoint begins a verification process for a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        ApiResponse<MemberResponseBody> VerifyMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMxPlatformApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Aggregate member
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> AggregateMemberAsync(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Aggregate member
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> AggregateMemberWithHttpInfoAsync(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check balances
        /// </summary>
        /// <remarks>
        /// This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> CheckBalancesAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check balances
        /// </summary>
        /// <remarks>
        /// This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> CheckBalancesWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        System.Threading.Tasks.Task<CategoryResponseBody> CreateCategoryAsync(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponseBody>> CreateCategoryWithHttpInfoAsync(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a partner-managed account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> CreateManagedAccountAsync(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a partner-managed account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> CreateManagedAccountWithHttpInfoAsync(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> CreateManagedMemberAsync(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> CreateManagedMemberWithHttpInfoAsync(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        System.Threading.Tasks.Task<TransactionResponseBody> CreateManagedTransactionAsync(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponseBody>> CreateManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create manual account
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> CreateManualAccountAsync(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create manual account
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> CreateManualAccountWithHttpInfoAsync(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> CreateMemberAsync(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> CreateMemberWithHttpInfoAsync(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom tag.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        System.Threading.Tasks.Task<TagResponseBody> CreateTagAsync(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new custom tag.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagResponseBody>> CreateTagWithHttpInfoAsync(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        System.Threading.Tasks.Task<TaggingResponseBody> CreateTaggingAsync(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaggingResponseBody>> CreateTaggingWithHttpInfoAsync(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        System.Threading.Tasks.Task<TransactionRuleResponseBody> CreateTransactionRuleAsync(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRuleResponseBody>> CreateTransactionRuleWithHttpInfoAsync(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        System.Threading.Tasks.Task<UserResponseBody> CreateUserAsync(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponseBody>> CreateUserWithHttpInfoAsync(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a Credit Card Product
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditCardProductResponse</returns>
        System.Threading.Tasks.Task<CreditCardProductResponse> CreditCardAsync(string creditCardProductGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a Credit Card Product
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditCardProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditCardProductResponse>> CreditCardWithHttpInfoAsync(string creditCardProductGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCategoryAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteManagedMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete manual account
        /// </summary>
        /// <remarks>
        /// This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteManualAccountAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete manual account
        /// </summary>
        /// <remarks>
        /// This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteManualAccountWithHttpInfoAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete member
        /// </summary>
        /// <remarks>
        /// Accessing this endpoint will permanently delete a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete member
        /// </summary>
        /// <remarks>
        /// Accessing this endpoint will permanently delete a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTagAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagWithHttpInfoAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaggingAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionRuleAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// (Deprecated) Request an authorization code.
        /// </summary>
        /// <remarks>
        /// (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProcessorAuthorizationCodeResponseBody</returns>
        System.Threading.Tasks.Task<PaymentProcessorAuthorizationCodeResponseBody> DeprecatedRequestPaymentProcessorAuthorizationCodeAsync(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// (Deprecated) Request an authorization code.
        /// </summary>
        /// <remarks>
        /// (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProcessorAuthorizationCodeResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentProcessorAuthorizationCodeResponseBody>> DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfoAsync(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download statement pdf
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a specified statement PDF.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadStatementPDFAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download statement pdf
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a specified statement PDF.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadStatementPDFWithHttpInfoAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a Tax Document PDF
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadTaxDocumentAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a Tax Document PDF
        /// </summary>
        /// <remarks>
        /// Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadTaxDocumentWithHttpInfoAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enhance transactions
        /// </summary>
        /// <remarks>
        /// Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnhanceTransactionsResponseBody</returns>
        System.Threading.Tasks.Task<EnhanceTransactionsResponseBody> EnhanceTransactionsAsync(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enhance transactions
        /// </summary>
        /// <remarks>
        /// Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnhanceTransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnhanceTransactionsResponseBody>> EnhanceTransactionsWithHttpInfoAsync(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extend history
        /// </summary>
        /// <remarks>
        /// Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> ExtendHistoryAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extend history
        /// </summary>
        /// <remarks>
        /// Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> ExtendHistoryWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch Rewards
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> FetchRewardsAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch Rewards
        /// </summary>
        /// <remarks>
        /// Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> FetchRewardsWithHttpInfoAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch statements
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the statements associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> FetchStatementsAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch statements
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the statements associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> FetchStatementsWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> FetchTaxDocumentsAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> FetchTaxDocumentsWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Identify member
        /// </summary>
        /// <remarks>
        /// The identify endpoint begins an identification process for an already-existing member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> IdentifyMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Identify member
        /// </summary>
        /// <remarks>
        /// The identify endpoint begins an identification process for an already-existing member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> IdentifyMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List account numbers by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountNumbersResponseBody</returns>
        System.Threading.Tasks.Task<AccountNumbersResponseBody> ListAccountNumbersByAccountAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List account numbers by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountNumbersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountNumbersResponseBody>> ListAccountNumbersByAccountWithHttpInfoAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List account numbers by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountNumbersResponseBody</returns>
        System.Threading.Tasks.Task<AccountNumbersResponseBody> ListAccountNumbersByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List account numbers by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountNumbersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountNumbersResponseBody>> ListAccountNumbersByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List account owners by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array with information about every account associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountOwnersResponseBody</returns>
        System.Threading.Tasks.Task<AccountOwnersResponseBody> ListAccountOwnersByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List account owners by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array with information about every account associated with a particular member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountOwnersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountOwnersResponseBody>> ListAccountOwnersByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        System.Threading.Tasks.Task<CategoriesResponseBody> ListCategoriesAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesResponseBody>> ListCategoriesWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List default categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        System.Threading.Tasks.Task<CategoriesResponseBody> ListDefaultCategoriesAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List default categories
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesResponseBody>> ListDefaultCategoriesWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List default categories by user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        System.Threading.Tasks.Task<CategoriesResponseBody> ListDefaultCategoriesByUserAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List default categories by user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesResponseBody>> ListDefaultCategoriesByUserWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List favorite institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        System.Threading.Tasks.Task<InstitutionsResponseBody> ListFavoriteInstitutionsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List favorite institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsResponseBody>> ListFavoriteInstitutionsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List holdings
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List holdings
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingsResponseBody>> ListHoldingsWithHttpInfoAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List holdings by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsByAccountAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List holdings by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingsResponseBody>> ListHoldingsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List holdings by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsByMemberAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List holdings by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingsResponseBody>> ListHoldingsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List institution credentials
        /// </summary>
        /// <remarks>
        /// Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialsResponseBody</returns>
        System.Threading.Tasks.Task<CredentialsResponseBody> ListInstitutionCredentialsAsync(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List institution credentials
        /// </summary>
        /// <remarks>
        /// Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialsResponseBody>> ListInstitutionCredentialsWithHttpInfoAsync(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        System.Threading.Tasks.Task<InstitutionsResponseBody> ListInstitutionsAsync(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsResponseBody>> ListInstitutionsWithHttpInfoAsync(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List managed accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        System.Threading.Tasks.Task<AccountsResponseBody> ListManagedAccountsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List managed accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponseBody>> ListManagedAccountsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List managed institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        System.Threading.Tasks.Task<InstitutionsResponseBody> ListManagedInstitutionsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List managed institutions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsResponseBody>> ListManagedInstitutionsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List managed members
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersResponseBody</returns>
        System.Threading.Tasks.Task<MembersResponseBody> ListManagedMembersAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List managed members
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembersResponseBody>> ListManagedMembersWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List managed transactions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListManagedTransactionsAsync(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List managed transactions
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListManagedTransactionsWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List accounts by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        System.Threading.Tasks.Task<AccountsResponseBody> ListMemberAccountsAsync(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List accounts by member
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponseBody>> ListMemberAccountsWithHttpInfoAsync(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List member challenges
        /// </summary>
        /// <remarks>
        /// Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChallengesResponseBody</returns>
        System.Threading.Tasks.Task<ChallengesResponseBody> ListMemberChallengesAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List member challenges
        /// </summary>
        /// <remarks>
        /// Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChallengesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChallengesResponseBody>> ListMemberChallengesWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List member credentials
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialsResponseBody</returns>
        System.Threading.Tasks.Task<CredentialsResponseBody> ListMemberCredentialsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List member credentials
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialsResponseBody>> ListMemberCredentialsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every member associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersResponseBody</returns>
        System.Threading.Tasks.Task<MembersResponseBody> ListMembersAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// This endpoint returns an array which contains information on every member associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembersResponseBody>> ListMembersWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List merchants
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of all the merchants in the MX system.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantsResponseBody</returns>
        System.Threading.Tasks.Task<MerchantsResponseBody> ListMerchantsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List merchants
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of all the merchants in the MX system.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantsResponseBody>> ListMerchantsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsResponseBody</returns>
        System.Threading.Tasks.Task<RewardsResponseBody> ListRewardsAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsResponseBody>> ListRewardsWithHttpInfoAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List statements by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get an array of available statements.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatementsResponseBody</returns>
        System.Threading.Tasks.Task<StatementsResponseBody> ListStatementsByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List statements by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get an array of available statements.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatementsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatementsResponseBody>> ListStatementsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List taggings
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingsResponseBody</returns>
        System.Threading.Tasks.Task<TaggingsResponseBody> ListTaggingsAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List taggings
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaggingsResponseBody>> ListTaggingsWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagsResponseBody</returns>
        System.Threading.Tasks.Task<TagsResponseBody> ListTagsAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsResponseBody>> ListTagsWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a paginated list of tax documents.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxDocumentsResponseBody</returns>
        System.Threading.Tasks.Task<TaxDocumentsResponseBody> ListTaxDocumentsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Tax Documents
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a paginated list of tax documents.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxDocumentsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxDocumentsResponseBody>> ListTaxDocumentsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transaction rules
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRulesResponseBody</returns>
        System.Threading.Tasks.Task<TransactionRulesResponseBody> ListTransactionRulesAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transaction rules
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRulesResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRulesResponseBody>> ListTransactionRulesWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListTransactionsWithHttpInfoAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transactions by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByAccountAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transactions by account
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListTransactionsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transactions by member
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByMemberAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transactions by member
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListTransactionsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transactions by tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByTagAsync(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transactions by tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponseBody>> ListTransactionsByTagWithHttpInfoAsync(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        System.Threading.Tasks.Task<AccountsResponseBody> ListUserAccountsAsync(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List accounts
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponseBody>> ListUserAccountsWithHttpInfoAsync(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsersResponseBody</returns>
        System.Threading.Tasks.Task<UsersResponseBody> ListUsersAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponseBody>> ListUsersWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read account
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> ReadAccountAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read account
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> ReadAccountWithHttpInfoAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> ReadAccountByMemberAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> ReadAccountByMemberWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a custom category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of either a default category or a custom category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        System.Threading.Tasks.Task<CategoryResponseBody> ReadCategoryAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a custom category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of either a default category or a custom category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponseBody>> ReadCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a default category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a default category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        System.Threading.Tasks.Task<CategoryResponseBody> ReadDefaultCategoryAsync(string categoryGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a default category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a default category.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponseBody>> ReadDefaultCategoryWithHttpInfoAsync(string categoryGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read holding
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingResponseBody</returns>
        System.Threading.Tasks.Task<HoldingResponseBody> ReadHoldingAsync(string holdingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read holding
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<HoldingResponseBody>> ReadHoldingWithHttpInfoAsync(string holdingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read institution
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionResponseBody</returns>
        System.Threading.Tasks.Task<InstitutionResponseBody> ReadInstitutionAsync(string institutionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read institution
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionResponseBody>> ReadInstitutionWithHttpInfoAsync(string institutionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> ReadManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> ReadManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read managed member
        /// </summary>
        /// <remarks>
        /// This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> ReadManagedMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read managed member
        /// </summary>
        /// <remarks>
        /// This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> ReadManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read managed transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        System.Threading.Tasks.Task<TransactionResponseBody> ReadManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read managed transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponseBody>> ReadManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> ReadMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> ReadMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read member status
        /// </summary>
        /// <remarks>
        /// This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberStatusResponseBody</returns>
        System.Threading.Tasks.Task<MemberStatusResponseBody> ReadMemberStatusAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read member status
        /// </summary>
        /// <remarks>
        /// This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberStatusResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberStatusResponseBody>> ReadMemberStatusWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read merchant
        /// </summary>
        /// <remarks>
        /// Returns information about a particular merchant, such as a logo, name, and website.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantResponseBody</returns>
        System.Threading.Tasks.Task<MerchantResponseBody> ReadMerchantAsync(string merchantGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read merchant
        /// </summary>
        /// <remarks>
        /// Returns information about a particular merchant, such as a logo, name, and website.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantResponseBody>> ReadMerchantWithHttpInfoAsync(string merchantGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read merchant location
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified merchant_location resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantLocationResponseBody</returns>
        System.Threading.Tasks.Task<MerchantLocationResponseBody> ReadMerchantLocationAsync(string merchantLocationGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read merchant location
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified merchant_location resource.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantLocationResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantLocationResponseBody>> ReadMerchantLocationWithHttpInfoAsync(string merchantLocationGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Reward
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardResponseBody</returns>
        System.Threading.Tasks.Task<RewardResponseBody> ReadRewardsAsync(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Reward
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardResponseBody>> ReadRewardsWithHttpInfoAsync(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read statement by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a JSON representation of the statement.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatementResponseBody</returns>
        System.Threading.Tasks.Task<StatementResponseBody> ReadStatementByMemberAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read statement by member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read a JSON representation of the statement.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatementResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatementResponseBody>> ReadStatementByMemberWithHttpInfoAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        System.Threading.Tasks.Task<TagResponseBody> ReadTagAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagResponseBody>> ReadTagWithHttpInfoAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        System.Threading.Tasks.Task<TaggingResponseBody> ReadTaggingAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaggingResponseBody>> ReadTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a Tax Document
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of the specified tax document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxDocumentResponseBody</returns>
        System.Threading.Tasks.Task<TaxDocumentResponseBody> ReadTaxDocumentAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a Tax Document
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of the specified tax document.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxDocumentResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxDocumentResponseBody>> ReadTaxDocumentWithHttpInfoAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        System.Threading.Tasks.Task<TransactionResponseBody> ReadTransactionAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read transaction
        /// </summary>
        /// <remarks>
        /// Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponseBody>> ReadTransactionWithHttpInfoAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        System.Threading.Tasks.Task<TransactionRuleResponseBody> ReadTransactionRuleAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read transaction rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRuleResponseBody>> ReadTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        System.Threading.Tasks.Task<UserResponseBody> ReadUserAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponseBody>> ReadUserWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request an authorization code.
        /// </summary>
        /// <remarks>
        /// Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationCodeResponseBody</returns>
        System.Threading.Tasks.Task<AuthorizationCodeResponseBody> RequestAuthorizationCodeAsync(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request an authorization code.
        /// </summary>
        /// <remarks>
        /// Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationCodeResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationCodeResponseBody>> RequestAuthorizationCodeWithHttpInfoAsync(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request connect widget url
        /// </summary>
        /// <remarks>
        /// This endpoint will return a URL for an embeddable version of MX Connect.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectWidgetResponseBody</returns>
        System.Threading.Tasks.Task<ConnectWidgetResponseBody> RequestConnectWidgetURLAsync(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request connect widget url
        /// </summary>
        /// <remarks>
        /// This endpoint will return a URL for an embeddable version of MX Connect.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectWidgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectWidgetResponseBody>> RequestConnectWidgetURLWithHttpInfoAsync(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request oauth window uri
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthWindowResponseBody</returns>
        System.Threading.Tasks.Task<OAuthWindowResponseBody> RequestOAuthWindowURIAsync(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request oauth window uri
        /// </summary>
        /// <remarks>
        /// This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthWindowResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthWindowResponseBody>> RequestOAuthWindowURIWithHttpInfoAsync(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request widget url
        /// </summary>
        /// <remarks>
        /// This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WidgetResponseBody</returns>
        System.Threading.Tasks.Task<WidgetResponseBody> RequestWidgetURLAsync(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request widget url
        /// </summary>
        /// <remarks>
        /// This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WidgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<WidgetResponseBody>> RequestWidgetURLWithHttpInfoAsync(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume aggregation
        /// </summary>
        /// <remarks>
        /// This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> ResumeAggregationAsync(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resume aggregation
        /// </summary>
        /// <remarks>
        /// This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> ResumeAggregationWithHttpInfoAsync(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> UpdateAccountByMemberAsync(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update account by member
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> UpdateAccountByMemberWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        System.Threading.Tasks.Task<CategoryResponseBody> UpdateCategoryAsync(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponseBody>> UpdateCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        System.Threading.Tasks.Task<AccountResponseBody> UpdateManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update managed account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseBody>> UpdateManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> UpdateManagedMemberAsync(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update managed member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> UpdateManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        System.Threading.Tasks.Task<TransactionResponseBody> UpdateManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update managed transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponseBody>> UpdateManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> UpdateMemberAsync(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update member
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> UpdateMemberWithHttpInfoAsync(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        System.Threading.Tasks.Task<TagResponseBody> UpdateTagAsync(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update tag
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagResponseBody>> UpdateTagWithHttpInfoAsync(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a tagging.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        System.Threading.Tasks.Task<TaggingResponseBody> UpdateTaggingAsync(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update tagging
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a tagging.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaggingResponseBody>> UpdateTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        System.Threading.Tasks.Task<TransactionResponseBody> UpdateTransactionAsync(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update transaction
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponseBody>> UpdateTransactionWithHttpInfoAsync(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update transaction_rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        System.Threading.Tasks.Task<TransactionRuleResponseBody> UpdateTransactionRuleAsync(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update transaction_rule
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRuleResponseBody>> UpdateTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        System.Threading.Tasks.Task<UserResponseBody> UpdateUserAsync(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of the specified user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponseBody>> UpdateUserWithHttpInfoAsync(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyCashFlowResponseBody</returns>
        System.Threading.Tasks.Task<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfileGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyCashFlowResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonthlyCashFlowResponseBody>> UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyCashFlowResponseBody</returns>
        System.Threading.Tasks.Task<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfilePutAsync(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update monthly cash flow profile
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyCashFlowResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonthlyCashFlowResponseBody>> UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfoAsync(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserGuidTransactionsTransactionGuidSplitDeleteAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfoAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SplitTransactionsResponseBody</returns>
        System.Threading.Tasks.Task<SplitTransactionsResponseBody> UsersUserGuidTransactionsTransactionGuidSplitPostAsync(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create split transactions
        /// </summary>
        /// <remarks>
        /// This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SplitTransactionsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SplitTransactionsResponseBody>> UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfoAsync(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify member
        /// </summary>
        /// <remarks>
        /// The verify endpoint begins a verification process for a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        System.Threading.Tasks.Task<MemberResponseBody> VerifyMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify member
        /// </summary>
        /// <remarks>
        /// The verify endpoint begins a verification process for a member.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponseBody>> VerifyMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMxPlatformApi : IMxPlatformApiSync, IMxPlatformApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MxPlatformApi : IMxPlatformApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MxPlatformApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MxPlatformApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MxPlatformApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MxPlatformApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MxPlatformApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MxPlatformApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MxPlatformApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MxPlatformApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Aggregate member Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody AggregateMember(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = AggregateMemberWithHttpInfo(memberGuid, userGuid, includeHoldings, includeTransactions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregate member Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> AggregateMemberWithHttpInfo(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->AggregateMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->AggregateMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (includeHoldings != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "include_holdings", includeHoldings));
            }
            if (includeTransactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "include_transactions", includeTransactions));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.AggregateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/aggregate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AggregateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Aggregate member Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> AggregateMemberAsync(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await AggregateMemberWithHttpInfoAsync(memberGuid, userGuid, includeHoldings, includeTransactions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregate member Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="includeHoldings">When set to &#x60;false&#x60;, the aggregation will not gather holdings data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="includeTransactions">When set to &#x60;false&#x60;, the aggregation will not gather transactions data. Defaults to &#x60;true&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> AggregateMemberWithHttpInfoAsync(string memberGuid, string userGuid, bool? includeHoldings = default(bool?), bool? includeTransactions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->AggregateMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->AggregateMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (includeHoldings != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "include_holdings", includeHoldings));
            }
            if (includeTransactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "include_transactions", includeTransactions));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.AggregateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/aggregate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AggregateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check balances This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody CheckBalances(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = CheckBalancesWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check balances This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> CheckBalancesWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CheckBalances");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CheckBalances");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.CheckBalances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/check_balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckBalances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check balances This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> CheckBalancesAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await CheckBalancesWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check balances This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> CheckBalancesWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CheckBalances");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CheckBalances");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.CheckBalances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/check_balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckBalances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create category Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        public CategoryResponseBody CreateCategory(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = CreateCategoryWithHttpInfo(userGuid, categoryCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create category Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> CreateCategoryWithHttpInfo(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateCategory");
            }

            // verify the required parameter 'categoryCreateRequestBody' is set
            if (categoryCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryCreateRequestBody' when calling MxPlatformApi->CreateCategory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = categoryCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryResponseBody>("/users/{user_guid}/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create category Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoryResponseBody> CreateCategoryAsync(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = await CreateCategoryWithHttpInfoAsync(userGuid, categoryCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create category Use this endpoint to create a new custom category for a specific &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryCreateRequestBody">Custom category object to be created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody>> CreateCategoryWithHttpInfoAsync(string userGuid, CategoryCreateRequestBody categoryCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateCategory");
            }

            // verify the required parameter 'categoryCreateRequestBody' is set
            if (categoryCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryCreateRequestBody' when calling MxPlatformApi->CreateCategory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = categoryCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryResponseBody>("/users/{user_guid}/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed account Use this endpoint to create a partner-managed account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody CreateManagedAccount(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = CreateManagedAccountWithHttpInfo(memberGuid, userGuid, managedAccountCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed account Use this endpoint to create a partner-managed account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> CreateManagedAccountWithHttpInfo(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CreateManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedAccount");
            }

            // verify the required parameter 'managedAccountCreateRequestBody' is set
            if (managedAccountCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedAccountCreateRequestBody' when calling MxPlatformApi->CreateManagedAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedAccountCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed account Use this endpoint to create a partner-managed account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> CreateManagedAccountAsync(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await CreateManagedAccountWithHttpInfoAsync(memberGuid, userGuid, managedAccountCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed account Use this endpoint to create a partner-managed account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountCreateRequestBody">Managed account to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> CreateManagedAccountWithHttpInfoAsync(string memberGuid, string userGuid, ManagedAccountCreateRequestBody managedAccountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CreateManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedAccount");
            }

            // verify the required parameter 'managedAccountCreateRequestBody' is set
            if (managedAccountCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedAccountCreateRequestBody' when calling MxPlatformApi->CreateManagedAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedAccountCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed member Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody CreateManagedMember(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = CreateManagedMemberWithHttpInfo(userGuid, managedMemberCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed member Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> CreateManagedMemberWithHttpInfo(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedMember");
            }

            // verify the required parameter 'managedMemberCreateRequestBody' is set
            if (managedMemberCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedMemberCreateRequestBody' when calling MxPlatformApi->CreateManagedMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedMemberCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/managed_members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed member Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> CreateManagedMemberAsync(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await CreateManagedMemberWithHttpInfoAsync(userGuid, managedMemberCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed member Use this endpoint to create a new partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberCreateRequestBody">Managed member to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> CreateManagedMemberWithHttpInfoAsync(string userGuid, ManagedMemberCreateRequestBody managedMemberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedMember");
            }

            // verify the required parameter 'managedMemberCreateRequestBody' is set
            if (managedMemberCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedMemberCreateRequestBody' when calling MxPlatformApi->CreateManagedMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedMemberCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/managed_members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed transaction Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        public TransactionResponseBody CreateManagedTransaction(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = CreateManagedTransactionWithHttpInfo(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed transaction Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> CreateManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'managedTransactionCreateRequestBody' is set
            if (managedTransactionCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedTransactionCreateRequestBody' when calling MxPlatformApi->CreateManagedTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedTransactionCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create managed transaction Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionResponseBody> CreateManagedTransactionAsync(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = await CreateManagedTransactionWithHttpInfoAsync(accountGuid, memberGuid, userGuid, managedTransactionCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create managed transaction Use this endpoint to create a new partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionCreateRequestBody">Managed transaction to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody>> CreateManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, ManagedTransactionCreateRequestBody managedTransactionCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManagedTransaction");
            }

            // verify the required parameter 'managedTransactionCreateRequestBody' is set
            if (managedTransactionCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedTransactionCreateRequestBody' when calling MxPlatformApi->CreateManagedTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedTransactionCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create manual account This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody CreateManualAccount(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = CreateManualAccountWithHttpInfo(userGuid, accountCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create manual account This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> CreateManualAccountWithHttpInfo(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManualAccount");
            }

            // verify the required parameter 'accountCreateRequestBody' is set
            if (accountCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountCreateRequestBody' when calling MxPlatformApi->CreateManualAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = accountCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManualAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponseBody>("/users/{user_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create manual account This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> CreateManualAccountAsync(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await CreateManualAccountWithHttpInfoAsync(userGuid, accountCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create manual account This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountCreateRequestBody">Manual account object to be created.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> CreateManualAccountWithHttpInfoAsync(string userGuid, AccountCreateRequestBody accountCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateManualAccount");
            }

            // verify the required parameter 'accountCreateRequestBody' is set
            if (accountCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountCreateRequestBody' when calling MxPlatformApi->CreateManualAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = accountCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateManualAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountResponseBody>("/users/{user_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create member This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody CreateMember(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = CreateMemberWithHttpInfo(userGuid, memberCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create member This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> CreateMemberWithHttpInfo(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateMember");
            }

            // verify the required parameter 'memberCreateRequestBody' is set
            if (memberCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberCreateRequestBody' when calling MxPlatformApi->CreateMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create member This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> CreateMemberAsync(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await CreateMemberWithHttpInfoAsync(userGuid, memberCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create member This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the &#x60;/institutions/{institution_code}/credentials&#x60; endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberCreateRequestBody">Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> CreateMemberWithHttpInfoAsync(string userGuid, MemberCreateRequestBody memberCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateMember");
            }

            // verify the required parameter 'memberCreateRequestBody' is set
            if (memberCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberCreateRequestBody' when calling MxPlatformApi->CreateMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tag Use this endpoint to create a new custom tag.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        public TagResponseBody CreateTag(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = CreateTagWithHttpInfo(userGuid, tagCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tag Use this endpoint to create a new custom tag.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> CreateTagWithHttpInfo(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTag");
            }

            // verify the required parameter 'tagCreateRequestBody' is set
            if (tagCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagCreateRequestBody' when calling MxPlatformApi->CreateTag");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = tagCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TagResponseBody>("/users/{user_guid}/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tag Use this endpoint to create a new custom tag.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        public async System.Threading.Tasks.Task<TagResponseBody> CreateTagAsync(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = await CreateTagWithHttpInfoAsync(userGuid, tagCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tag Use this endpoint to create a new custom tag.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagCreateRequestBody">Tag object to be created with required parameters (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TagResponseBody>> CreateTagWithHttpInfoAsync(string userGuid, TagCreateRequestBody tagCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTag");
            }

            // verify the required parameter 'tagCreateRequestBody' is set
            if (tagCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagCreateRequestBody' when calling MxPlatformApi->CreateTag");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = tagCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagResponseBody>("/users/{user_guid}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tagging Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        public TaggingResponseBody CreateTagging(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = CreateTaggingWithHttpInfo(userGuid, taggingCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tagging Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> CreateTaggingWithHttpInfo(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTagging");
            }

            // verify the required parameter 'taggingCreateRequestBody' is set
            if (taggingCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingCreateRequestBody' when calling MxPlatformApi->CreateTagging");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = taggingCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaggingResponseBody>("/users/{user_guid}/taggings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tagging Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        public async System.Threading.Tasks.Task<TaggingResponseBody> CreateTaggingAsync(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = await CreateTaggingWithHttpInfoAsync(userGuid, taggingCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tagging Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingCreateRequestBody">Tagging object to be created with required parameters (tag_guid and transaction_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody>> CreateTaggingWithHttpInfoAsync(string userGuid, TaggingCreateRequestBody taggingCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTagging");
            }

            // verify the required parameter 'taggingCreateRequestBody' is set
            if (taggingCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingCreateRequestBody' when calling MxPlatformApi->CreateTagging");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = taggingCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TaggingResponseBody>("/users/{user_guid}/taggings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create transaction rule Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        public TransactionRuleResponseBody CreateTransactionRule(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = CreateTransactionRuleWithHttpInfo(userGuid, transactionRuleCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create transaction rule Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> CreateTransactionRuleWithHttpInfo(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTransactionRule");
            }

            // verify the required parameter 'transactionRuleCreateRequestBody' is set
            if (transactionRuleCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleCreateRequestBody' when calling MxPlatformApi->CreateTransactionRule");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionRuleCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create transaction rule Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionRuleResponseBody> CreateTransactionRuleAsync(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = await CreateTransactionRuleWithHttpInfoAsync(userGuid, transactionRuleCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create transaction rule Use this endpoint to create a new transaction rule. The newly-created &#x60;transaction_rule&#x60; object will be returned if successful.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleCreateRequestBody">TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody>> CreateTransactionRuleWithHttpInfoAsync(string userGuid, TransactionRuleCreateRequestBody transactionRuleCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->CreateTransactionRule");
            }

            // verify the required parameter 'transactionRuleCreateRequestBody' is set
            if (transactionRuleCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleCreateRequestBody' when calling MxPlatformApi->CreateTransactionRule");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionRuleCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create user Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        public UserResponseBody CreateUser(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = CreateUserWithHttpInfo(userCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create user Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> CreateUserWithHttpInfo(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userCreateRequestBody' is set
            if (userCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userCreateRequestBody' when calling MxPlatformApi->CreateUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserResponseBody>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create user Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        public async System.Threading.Tasks.Task<UserResponseBody> CreateUserAsync(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = await CreateUserWithHttpInfoAsync(userCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create user Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateRequestBody">User object to be created. (None of these parameters are required, but the user object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<UserResponseBody>> CreateUserWithHttpInfoAsync(UserCreateRequestBody userCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userCreateRequestBody' is set
            if (userCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userCreateRequestBody' when calling MxPlatformApi->CreateUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userCreateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserResponseBody>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a Credit Card Product This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditCardProductResponse</returns>
        public CreditCardProductResponse CreditCard(string creditCardProductGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CreditCardProductResponse> localVarResponse = CreditCardWithHttpInfo(creditCardProductGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a Credit Card Product This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditCardProductResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CreditCardProductResponse> CreditCardWithHttpInfo(string creditCardProductGuid, int operationIndex = 0)
        {
            // verify the required parameter 'creditCardProductGuid' is set
            if (creditCardProductGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'creditCardProductGuid' when calling MxPlatformApi->CreditCard");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credit_card_product_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(creditCardProductGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.CreditCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreditCardProductResponse>("/credit_card_products/{credit_card_product_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a Credit Card Product This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditCardProductResponse</returns>
        public async System.Threading.Tasks.Task<CreditCardProductResponse> CreditCardAsync(string creditCardProductGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CreditCardProductResponse> localVarResponse = await CreditCardWithHttpInfoAsync(creditCardProductGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a Credit Card Product This endpoint returns the specified &#x60;credit_card_product&#x60; according to the unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditCardProductGuid">The required &#x60;credit_card_product_guid&#x60; can be found on the &#x60;account&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditCardProductResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CreditCardProductResponse>> CreditCardWithHttpInfoAsync(string creditCardProductGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'creditCardProductGuid' is set
            if (creditCardProductGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'creditCardProductGuid' when calling MxPlatformApi->CreditCard");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credit_card_product_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(creditCardProductGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.CreditCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreditCardProductResponse>("/credit_card_products/{credit_card_product_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete category Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCategory(string categoryGuid, string userGuid, int operationIndex = 0)
        {
            DeleteCategoryWithHttpInfo(categoryGuid, userGuid);
        }

        /// <summary>
        /// Delete category Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteCategoryWithHttpInfo(string categoryGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->DeleteCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteCategory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete category Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCategoryAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCategoryWithHttpInfoAsync(categoryGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete category Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->DeleteCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteCategory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed account Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteManagedAccount(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            DeleteManagedAccountWithHttpInfo(accountGuid, memberGuid, userGuid);
        }

        /// <summary>
        /// Delete managed account Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed account Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteManagedAccountWithHttpInfoAsync(accountGuid, memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete managed account Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed member Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteManagedMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            DeleteManagedMemberWithHttpInfo(memberGuid, userGuid);
        }

        /// <summary>
        /// Delete managed member Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteManagedMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed member Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteManagedMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteManagedMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete managed member Use this endpoint to delete the specified partner-managed &#x60;member&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed transaction Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0)
        {
            DeleteManagedTransactionWithHttpInfo(accountGuid, memberGuid, transactionGuid, userGuid);
        }

        /// <summary>
        /// Delete managed transaction Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete managed transaction Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteManagedTransactionWithHttpInfoAsync(accountGuid, memberGuid, transactionGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete managed transaction Use this endpoint to delete the specified partner-managed &#x60;transaction&#x60;. The endpoint will respond with a status of &#x60;204 No Content&#x60; without a resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManagedTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete manual account This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteManualAccount(string accountGuid, string userGuid, int operationIndex = 0)
        {
            DeleteManualAccountWithHttpInfo(accountGuid, userGuid);
        }

        /// <summary>
        /// Delete manual account This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteManualAccountWithHttpInfo(string accountGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManualAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManualAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManualAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManualAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete manual account This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteManualAccountAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteManualAccountWithHttpInfoAsync(accountGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete manual account This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteManualAccountWithHttpInfoAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->DeleteManualAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteManualAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteManualAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteManualAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete member Accessing this endpoint will permanently delete a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            DeleteMemberWithHttpInfo(memberGuid, userGuid);
        }

        /// <summary>
        /// Delete member Accessing this endpoint will permanently delete a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete member Accessing this endpoint will permanently delete a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete member Accessing this endpoint will permanently delete a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DeleteMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete tag Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTag(string tagGuid, string userGuid, int operationIndex = 0)
        {
            DeleteTagWithHttpInfo(tagGuid, userGuid);
        }

        /// <summary>
        /// Delete tag Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteTagWithHttpInfo(string tagGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->DeleteTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTag");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete tag Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTagAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTagWithHttpInfoAsync(tagGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete tag Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of &#x60;204 No Content&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteTagWithHttpInfoAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->DeleteTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTag");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete tagging Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTagging(string taggingGuid, string userGuid, int operationIndex = 0)
        {
            DeleteTaggingWithHttpInfo(taggingGuid, userGuid);
        }

        /// <summary>
        /// Delete tagging Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteTaggingWithHttpInfo(string taggingGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->DeleteTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTagging");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete tagging Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaggingAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTaggingWithHttpInfoAsync(taggingGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete tagging Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->DeleteTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTagging");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete transaction rule Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransactionRule(string transactionRuleGuid, string userGuid, int operationIndex = 0)
        {
            DeleteTransactionRuleWithHttpInfo(transactionRuleGuid, userGuid);
        }

        /// <summary>
        /// Delete transaction rule Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->DeleteTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTransactionRule");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete transaction rule Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionRuleAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTransactionRuleWithHttpInfoAsync(transactionRuleGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete transaction rule Use this endpoint to permanently delete a transaction rule based on its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->DeleteTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteTransactionRule");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUser(string userGuid, int operationIndex = 0)
        {
            DeleteUserWithHttpInfo(userGuid);
        }

        /// <summary>
        /// Delete user Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete user Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete user Use this endpoint to delete the specified &#x60;user&#x60;. The response will have a status of &#x60;204 No Content&#x60; without an object.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DeleteUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Request an authorization code. (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentProcessorAuthorizationCodeResponseBody</returns>
        public PaymentProcessorAuthorizationCodeResponseBody DeprecatedRequestPaymentProcessorAuthorizationCode(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<PaymentProcessorAuthorizationCodeResponseBody> localVarResponse = DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfo(paymentProcessorAuthorizationCodeRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Request an authorization code. (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentProcessorAuthorizationCodeResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<PaymentProcessorAuthorizationCodeResponseBody> DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfo(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'paymentProcessorAuthorizationCodeRequestBody' is set
            if (paymentProcessorAuthorizationCodeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'paymentProcessorAuthorizationCodeRequestBody' when calling MxPlatformApi->DeprecatedRequestPaymentProcessorAuthorizationCode");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentProcessorAuthorizationCodeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.DeprecatedRequestPaymentProcessorAuthorizationCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentProcessorAuthorizationCodeResponseBody>("/payment_processor_authorization_code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeprecatedRequestPaymentProcessorAuthorizationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Request an authorization code. (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentProcessorAuthorizationCodeResponseBody</returns>
        public async System.Threading.Tasks.Task<PaymentProcessorAuthorizationCodeResponseBody> DeprecatedRequestPaymentProcessorAuthorizationCodeAsync(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<PaymentProcessorAuthorizationCodeResponseBody> localVarResponse = await DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfoAsync(paymentProcessorAuthorizationCodeRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Request an authorization code. (This endpoint is deprecated. Clients should use &#x60;/authorization_code&#x60;.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentProcessorAuthorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentProcessorAuthorizationCodeResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<PaymentProcessorAuthorizationCodeResponseBody>> DeprecatedRequestPaymentProcessorAuthorizationCodeWithHttpInfoAsync(PaymentProcessorAuthorizationCodeRequestBody paymentProcessorAuthorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentProcessorAuthorizationCodeRequestBody' is set
            if (paymentProcessorAuthorizationCodeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'paymentProcessorAuthorizationCodeRequestBody' when calling MxPlatformApi->DeprecatedRequestPaymentProcessorAuthorizationCode");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentProcessorAuthorizationCodeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.DeprecatedRequestPaymentProcessorAuthorizationCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentProcessorAuthorizationCodeResponseBody>("/payment_processor_authorization_code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeprecatedRequestPaymentProcessorAuthorizationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download statement pdf Use this endpoint to download a specified statement PDF.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadStatementPDF(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadStatementPDFWithHttpInfo(memberGuid, statementGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download statement pdf Use this endpoint to download a specified statement PDF.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> DownloadStatementPDFWithHttpInfo(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }

            // verify the required parameter 'statementGuid' is set
            if (statementGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'statementGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+pdf"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("statement_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(statementGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DownloadStatementPDF";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/users/{user_guid}/members/{member_guid}/statements/{statement_guid}.pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadStatementPDF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download statement pdf Use this endpoint to download a specified statement PDF.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadStatementPDFAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadStatementPDFWithHttpInfoAsync(memberGuid, statementGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download statement pdf Use this endpoint to download a specified statement PDF.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream>> DownloadStatementPDFWithHttpInfoAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }

            // verify the required parameter 'statementGuid' is set
            if (statementGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'statementGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DownloadStatementPDF");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+pdf"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("statement_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(statementGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DownloadStatementPDF";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/users/{user_guid}/members/{member_guid}/statements/{statement_guid}.pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadStatementPDF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Tax Document PDF Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadTaxDocument(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadTaxDocumentWithHttpInfo(taxDocumentGuid, memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Tax Document PDF Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> DownloadTaxDocumentWithHttpInfo(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'taxDocumentGuid' is set
            if (taxDocumentGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taxDocumentGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+pdf"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_document_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taxDocumentGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DownloadTaxDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}.pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTaxDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Tax Document PDF Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadTaxDocumentAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadTaxDocumentWithHttpInfoAsync(taxDocumentGuid, memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Tax Document PDF Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<System.IO.Stream>> DownloadTaxDocumentWithHttpInfoAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taxDocumentGuid' is set
            if (taxDocumentGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taxDocumentGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->DownloadTaxDocument");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+pdf"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_document_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taxDocumentGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.DownloadTaxDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}.pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTaxDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enhance transactions Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EnhanceTransactionsResponseBody</returns>
        public EnhanceTransactionsResponseBody EnhanceTransactions(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<EnhanceTransactionsResponseBody> localVarResponse = EnhanceTransactionsWithHttpInfo(enhanceTransactionsRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enhance transactions Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EnhanceTransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<EnhanceTransactionsResponseBody> EnhanceTransactionsWithHttpInfo(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'enhanceTransactionsRequestBody' is set
            if (enhanceTransactionsRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'enhanceTransactionsRequestBody' when calling MxPlatformApi->EnhanceTransactions");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enhanceTransactionsRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.EnhanceTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EnhanceTransactionsResponseBody>("/transactions/enhance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnhanceTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enhance transactions Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnhanceTransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<EnhanceTransactionsResponseBody> EnhanceTransactionsAsync(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<EnhanceTransactionsResponseBody> localVarResponse = await EnhanceTransactionsWithHttpInfoAsync(enhanceTransactionsRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enhance transactions Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enhanceTransactionsRequestBody">Transaction object to be enhanced</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnhanceTransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<EnhanceTransactionsResponseBody>> EnhanceTransactionsWithHttpInfoAsync(EnhanceTransactionsRequestBody enhanceTransactionsRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'enhanceTransactionsRequestBody' is set
            if (enhanceTransactionsRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'enhanceTransactionsRequestBody' when calling MxPlatformApi->EnhanceTransactions");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enhanceTransactionsRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.EnhanceTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EnhanceTransactionsResponseBody>("/transactions/enhance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnhanceTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extend history Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody ExtendHistory(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = ExtendHistoryWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extend history Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> ExtendHistoryWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ExtendHistory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ExtendHistory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ExtendHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/extend_history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtendHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extend history Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> ExtendHistoryAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await ExtendHistoryWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extend history Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique identifier for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique identifier for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> ExtendHistoryWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ExtendHistory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ExtendHistory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ExtendHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/extend_history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtendHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Rewards Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody FetchRewards(string userGuid, string memberGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = FetchRewardsWithHttpInfo(userGuid, memberGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Rewards Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> FetchRewardsWithHttpInfo(string userGuid, string memberGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchRewards");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Rewards Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> FetchRewardsAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await FetchRewardsWithHttpInfoAsync(userGuid, memberGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Rewards Calling this endpoint initiates an aggregation-type event which will gather the member&#39;s rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> FetchRewardsWithHttpInfoAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchRewards");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch statements Use this endpoint to fetch the statements associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody FetchStatements(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = FetchStatementsWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch statements Use this endpoint to fetch the statements associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> FetchStatementsWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchStatements");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchStatements");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchStatements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_statements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch statements Use this endpoint to fetch the statements associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> FetchStatementsAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await FetchStatementsWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch statements Use this endpoint to fetch the statements associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> FetchStatementsWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchStatements");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchStatements");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchStatements";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_statements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Tax Documents Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody FetchTaxDocuments(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = FetchTaxDocumentsWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Tax Documents Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> FetchTaxDocumentsWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchTaxDocuments");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchTaxDocuments");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchTaxDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_tax_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchTaxDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Tax Documents Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> FetchTaxDocumentsAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await FetchTaxDocumentsWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Tax Documents Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> FetchTaxDocumentsWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->FetchTaxDocuments");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->FetchTaxDocuments");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.FetchTaxDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/fetch_tax_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchTaxDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify member The identify endpoint begins an identification process for an already-existing member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody IdentifyMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = IdentifyMemberWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify member The identify endpoint begins an identification process for an already-existing member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> IdentifyMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->IdentifyMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->IdentifyMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.IdentifyMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/identify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify member The identify endpoint begins an identification process for an already-existing member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> IdentifyMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await IdentifyMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify member The identify endpoint begins an identification process for an already-existing member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> IdentifyMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->IdentifyMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->IdentifyMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.IdentifyMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/identify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account numbers by account This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountNumbersResponseBody</returns>
        public AccountNumbersResponseBody ListAccountNumbersByAccount(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> localVarResponse = ListAccountNumbersByAccountWithHttpInfo(accountGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account numbers by account This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountNumbersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> ListAccountNumbersByAccountWithHttpInfo(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListAccountNumbersByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountNumbersByAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountNumbersByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountNumbersResponseBody>("/users/{user_guid}/accounts/{account_guid}/account_numbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountNumbersByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account numbers by account This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountNumbersResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountNumbersResponseBody> ListAccountNumbersByAccountAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> localVarResponse = await ListAccountNumbersByAccountWithHttpInfoAsync(accountGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account numbers by account This endpoint returns a list of account numbers associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountNumbersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody>> ListAccountNumbersByAccountWithHttpInfoAsync(string accountGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListAccountNumbersByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountNumbersByAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountNumbersByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountNumbersResponseBody>("/users/{user_guid}/accounts/{account_guid}/account_numbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountNumbersByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account numbers by member This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountNumbersResponseBody</returns>
        public AccountNumbersResponseBody ListAccountNumbersByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> localVarResponse = ListAccountNumbersByMemberWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account numbers by member This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountNumbersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> ListAccountNumbersByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListAccountNumbersByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountNumbersByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountNumbersByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountNumbersResponseBody>("/users/{user_guid}/members/{member_guid}/account_numbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountNumbersByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account numbers by member This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountNumbersResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountNumbersResponseBody> ListAccountNumbersByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody> localVarResponse = await ListAccountNumbersByMemberWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account numbers by member This endpoint returns a list of account numbers associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountNumbersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountNumbersResponseBody>> ListAccountNumbersByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListAccountNumbersByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountNumbersByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountNumbersByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountNumbersResponseBody>("/users/{user_guid}/members/{member_guid}/account_numbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountNumbersByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account owners by member This endpoint returns an array with information about every account associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountOwnersResponseBody</returns>
        public AccountOwnersResponseBody ListAccountOwnersByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountOwnersResponseBody> localVarResponse = ListAccountOwnersByMemberWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account owners by member This endpoint returns an array with information about every account associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountOwnersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountOwnersResponseBody> ListAccountOwnersByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListAccountOwnersByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountOwnersByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountOwnersByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountOwnersResponseBody>("/users/{user_guid}/members/{member_guid}/account_owners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountOwnersByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List account owners by member This endpoint returns an array with information about every account associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountOwnersResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountOwnersResponseBody> ListAccountOwnersByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountOwnersResponseBody> localVarResponse = await ListAccountOwnersByMemberWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List account owners by member This endpoint returns an array with information about every account associated with a particular member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountOwnersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountOwnersResponseBody>> ListAccountOwnersByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListAccountOwnersByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListAccountOwnersByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListAccountOwnersByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountOwnersResponseBody>("/users/{user_guid}/members/{member_guid}/account_owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountOwnersByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List categories Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        public CategoriesResponseBody ListCategories(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = ListCategoriesWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List categories Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> ListCategoriesWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListCategories");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoriesResponseBody>("/users/{user_guid}/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List categories Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoriesResponseBody> ListCategoriesAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = await ListCategoriesWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List categories Use this endpoint to list all categories associated with a &#x60;user&#x60;, including both default and custom categories.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody>> ListCategoriesWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListCategories");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoriesResponseBody>("/users/{user_guid}/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List default categories Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        public CategoriesResponseBody ListDefaultCategories(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = ListDefaultCategoriesWithHttpInfo(page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List default categories Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> ListDefaultCategoriesWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListDefaultCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoriesResponseBody>("/categories/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDefaultCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List default categories Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoriesResponseBody> ListDefaultCategoriesAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = await ListDefaultCategoriesWithHttpInfoAsync(page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List default categories Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody>> ListDefaultCategoriesWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListDefaultCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoriesResponseBody>("/categories/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDefaultCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List default categories by user Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesResponseBody</returns>
        public CategoriesResponseBody ListDefaultCategoriesByUser(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = ListDefaultCategoriesByUserWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List default categories by user Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> ListDefaultCategoriesByUserWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListDefaultCategoriesByUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListDefaultCategoriesByUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoriesResponseBody>("/users/{user_guid}/categories/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDefaultCategoriesByUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List default categories by user Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoriesResponseBody> ListDefaultCategoriesByUserAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody> localVarResponse = await ListDefaultCategoriesByUserWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List default categories by user Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its &#x60;is_default&#x60; field set to &#x60;true&#x60;. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoriesResponseBody>> ListDefaultCategoriesByUserWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListDefaultCategoriesByUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListDefaultCategoriesByUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoriesResponseBody>("/users/{user_guid}/categories/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDefaultCategoriesByUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List favorite institutions This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        public InstitutionsResponseBody ListFavoriteInstitutions(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = ListFavoriteInstitutionsWithHttpInfo(page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List favorite institutions This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> ListFavoriteInstitutionsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListFavoriteInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstitutionsResponseBody>("/institutions/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFavoriteInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List favorite institutions This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        public async System.Threading.Tasks.Task<InstitutionsResponseBody> ListFavoriteInstitutionsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = await ListFavoriteInstitutionsWithHttpInfoAsync(page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List favorite institutions This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody>> ListFavoriteInstitutionsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListFavoriteInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstitutionsResponseBody>("/institutions/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFavoriteInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        public HoldingsResponseBody ListHoldings(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = ListHoldingsWithHttpInfo(userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> ListHoldingsWithHttpInfo(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldings");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HoldingsResponseBody>("/users/{user_guid}/holdings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        public async System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = await ListHoldingsWithHttpInfoAsync(userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings This endpoint returns all holdings associated with the specified &#x60;user&#x60; across all accounts and members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody>> ListHoldingsWithHttpInfoAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldings");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HoldingsResponseBody>("/users/{user_guid}/holdings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings by account This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        public HoldingsResponseBody ListHoldingsByAccount(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = ListHoldingsByAccountWithHttpInfo(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings by account This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> ListHoldingsByAccountWithHttpInfo(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListHoldingsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldingsByAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldingsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HoldingsResponseBody>("/users/{user_guid}/accounts/{account_guid}/holdings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldingsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings by account This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        public async System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsByAccountAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = await ListHoldingsByAccountWithHttpInfoAsync(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings by account This endpoint returns all holdings associated with the specified &#x60;account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for the &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for the &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody>> ListHoldingsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListHoldingsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldingsByAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldingsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HoldingsResponseBody>("/users/{user_guid}/accounts/{account_guid}/holdings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldingsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings by member This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingsResponseBody</returns>
        public HoldingsResponseBody ListHoldingsByMember(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = ListHoldingsByMemberWithHttpInfo(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings by member This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> ListHoldingsByMemberWithHttpInfo(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListHoldingsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldingsByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldingsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HoldingsResponseBody>("/users/{user_guid}/members/{member_guid}/holdings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldingsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List holdings by member This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingsResponseBody</returns>
        public async System.Threading.Tasks.Task<HoldingsResponseBody> ListHoldingsByMemberAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody> localVarResponse = await ListHoldingsByMemberWithHttpInfoAsync(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List holdings by member This endpoint returns all holdings associated with the specified &#x60;member&#x60; across all accounts.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter holdings from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter holdings to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<HoldingsResponseBody>> ListHoldingsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListHoldingsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListHoldingsByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListHoldingsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HoldingsResponseBody>("/users/{user_guid}/members/{member_guid}/holdings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHoldingsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List institution credentials Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CredentialsResponseBody</returns>
        public CredentialsResponseBody ListInstitutionCredentials(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> localVarResponse = ListInstitutionCredentialsWithHttpInfo(institutionCode, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List institution credentials Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CredentialsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> ListInstitutionCredentialsWithHttpInfo(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'institutionCode' is set
            if (institutionCode == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'institutionCode' when calling MxPlatformApi->ListInstitutionCredentials");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("institution_code", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(institutionCode)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListInstitutionCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CredentialsResponseBody>("/institutions/{institution_code}/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInstitutionCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List institution credentials Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialsResponseBody</returns>
        public async System.Threading.Tasks.Task<CredentialsResponseBody> ListInstitutionCredentialsAsync(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> localVarResponse = await ListInstitutionCredentialsWithHttpInfoAsync(institutionCode, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List institution credentials Use this endpoint to see which credentials will be needed to create a member for a specific institution.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody>> ListInstitutionCredentialsWithHttpInfoAsync(string institutionCode, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionCode' is set
            if (institutionCode == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'institutionCode' when calling MxPlatformApi->ListInstitutionCredentials");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("institution_code", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(institutionCode)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListInstitutionCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CredentialsResponseBody>("/institutions/{institution_code}/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInstitutionCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List institutions This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        public InstitutionsResponseBody ListInstitutions(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = ListInstitutionsWithHttpInfo(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List institutions This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> ListInstitutionsWithHttpInfo(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (supportsAccountIdentification != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_identification", supportsAccountIdentification));
            }
            if (supportsAccountStatement != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_statement", supportsAccountStatement));
            }
            if (supportsAccountVerification != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_verification", supportsAccountVerification));
            }
            if (supportsTransactionHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_transaction_history", supportsTransactionHistory));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstitutionsResponseBody>("/institutions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List institutions This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        public async System.Threading.Tasks.Task<InstitutionsResponseBody> ListInstitutionsAsync(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = await ListInstitutionsWithHttpInfoAsync(name, page, recordsPerPage, supportsAccountIdentification, supportsAccountStatement, supportsAccountVerification, supportsTransactionHistory, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List institutions This endpoint returns a list of institutions based on the specified search term or parameter.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">This will list only institutions in which the appended string appears. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="supportsAccountIdentification">Filter only institutions which support account identification. (optional)</param>
        /// <param name="supportsAccountStatement">Filter only institutions which support account statements. (optional)</param>
        /// <param name="supportsAccountVerification">Filter only institutions which support account verification. (optional)</param>
        /// <param name="supportsTransactionHistory">Filter only institutions which support extended transaction history. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody>> ListInstitutionsWithHttpInfoAsync(string? name = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), bool? supportsAccountIdentification = default(bool?), bool? supportsAccountStatement = default(bool?), bool? supportsAccountVerification = default(bool?), bool? supportsTransactionHistory = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (supportsAccountIdentification != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_identification", supportsAccountIdentification));
            }
            if (supportsAccountStatement != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_statement", supportsAccountStatement));
            }
            if (supportsAccountVerification != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_account_verification", supportsAccountVerification));
            }
            if (supportsTransactionHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "supports_transaction_history", supportsTransactionHistory));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstitutionsResponseBody>("/institutions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed accounts Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        public AccountsResponseBody ListManagedAccounts(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = ListManagedAccountsWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed accounts Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> ListManagedAccountsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListManagedAccounts");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedAccounts");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed accounts Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountsResponseBody> ListManagedAccountsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = await ListManagedAccountsWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed accounts Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody>> ListManagedAccountsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListManagedAccounts");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedAccounts");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed institutions This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsResponseBody</returns>
        public InstitutionsResponseBody ListManagedInstitutions(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = ListManagedInstitutionsWithHttpInfo(page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed institutions This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> ListManagedInstitutionsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstitutionsResponseBody>("/managed_institutions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed institutions This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsResponseBody</returns>
        public async System.Threading.Tasks.Task<InstitutionsResponseBody> ListManagedInstitutionsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody> localVarResponse = await ListManagedInstitutionsWithHttpInfoAsync(page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed institutions This endpoint returns a list of institutions which can be used to create partner-managed members.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InstitutionsResponseBody>> ListManagedInstitutionsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedInstitutions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstitutionsResponseBody>("/managed_institutions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedInstitutions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed members This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MembersResponseBody</returns>
        public MembersResponseBody ListManagedMembers(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> localVarResponse = ListManagedMembersWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed members This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MembersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> ListManagedMembersWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedMembers");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MembersResponseBody>("/users/{user_guid}/managed_members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed members This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersResponseBody</returns>
        public async System.Threading.Tasks.Task<MembersResponseBody> ListManagedMembersAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> localVarResponse = await ListManagedMembersWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed members This endpoint returns a list of all the partner-managed members associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody>> ListManagedMembersWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedMembers");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MembersResponseBody>("/users/{user_guid}/managed_members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed transactions This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListManagedTransactions(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListManagedTransactionsWithHttpInfo(accountGuid, memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed transactions This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListManagedTransactionsWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListManagedTransactions");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListManagedTransactions");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedTransactions");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List managed transactions This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListManagedTransactionsAsync(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListManagedTransactionsWithHttpInfoAsync(accountGuid, memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List managed transactions This endpoint returns a list of all the partner-managed transactions associated with the specified &#x60;account&#x60;, scoped through a &#x60;user&#x60; and a &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListManagedTransactionsWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListManagedTransactions");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListManagedTransactions");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListManagedTransactions");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListManagedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListManagedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts by member This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        public AccountsResponseBody ListMemberAccounts(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = ListMemberAccountsWithHttpInfo(userGuid, memberGuid, memberIsManagedByUser, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts by member This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> ListMemberAccountsWithHttpInfo(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberAccounts");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberAccounts");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            if (memberIsManagedByUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "member_is_managed_by_user", memberIsManagedByUser));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsResponseBody>("/users/{user_guid}/members/{member_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts by member This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountsResponseBody> ListMemberAccountsAsync(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = await ListMemberAccountsWithHttpInfoAsync(userGuid, memberGuid, memberIsManagedByUser, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts by member This endpoint returns a list of all the accounts associated with the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody>> ListMemberAccountsWithHttpInfoAsync(string userGuid, string memberGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberAccounts");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberAccounts");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            if (memberIsManagedByUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "member_is_managed_by_user", memberIsManagedByUser));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsResponseBody>("/users/{user_guid}/members/{member_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List member challenges Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChallengesResponseBody</returns>
        public ChallengesResponseBody ListMemberChallenges(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<ChallengesResponseBody> localVarResponse = ListMemberChallengesWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List member challenges Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChallengesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<ChallengesResponseBody> ListMemberChallengesWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberChallenges");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberChallenges");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberChallenges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChallengesResponseBody>("/users/{user_guid}/members/{member_guid}/challenges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberChallenges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List member challenges Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChallengesResponseBody</returns>
        public async System.Threading.Tasks.Task<ChallengesResponseBody> ListMemberChallengesAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<ChallengesResponseBody> localVarResponse = await ListMemberChallengesWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List member challenges Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;204 No Content&#x60; will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of &#x60;CHALLENGED&#x60;, then code &#x60;200 OK&#x60; will be returned - along with the corresponding credentials.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChallengesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<ChallengesResponseBody>> ListMemberChallengesWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberChallenges");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberChallenges");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberChallenges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChallengesResponseBody>("/users/{user_guid}/members/{member_guid}/challenges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberChallenges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List member credentials This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CredentialsResponseBody</returns>
        public CredentialsResponseBody ListMemberCredentials(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> localVarResponse = ListMemberCredentialsWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List member credentials This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CredentialsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> ListMemberCredentialsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberCredentials");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberCredentials");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CredentialsResponseBody>("/users/{user_guid}/members/{member_guid}/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List member credentials This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CredentialsResponseBody</returns>
        public async System.Threading.Tasks.Task<CredentialsResponseBody> ListMemberCredentialsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody> localVarResponse = await ListMemberCredentialsWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List member credentials This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CredentialsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CredentialsResponseBody>> ListMemberCredentialsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListMemberCredentials");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMemberCredentials");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMemberCredentials";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CredentialsResponseBody>("/users/{user_guid}/members/{member_guid}/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberCredentials", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members This endpoint returns an array which contains information on every member associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MembersResponseBody</returns>
        public MembersResponseBody ListMembers(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> localVarResponse = ListMembersWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members This endpoint returns an array which contains information on every member associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MembersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> ListMembersWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMembers");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MembersResponseBody>("/users/{user_guid}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List members This endpoint returns an array which contains information on every member associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersResponseBody</returns>
        public async System.Threading.Tasks.Task<MembersResponseBody> ListMembersAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody> localVarResponse = await ListMembersWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List members This endpoint returns an array which contains information on every member associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MembersResponseBody>> ListMembersWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListMembers");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MembersResponseBody>("/users/{user_guid}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List merchants This endpoint returns a paginated list of all the merchants in the MX system.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantsResponseBody</returns>
        public MerchantsResponseBody ListMerchants(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> localVarResponse = ListMerchantsWithHttpInfo(page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List merchants This endpoint returns a paginated list of all the merchants in the MX system.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> ListMerchantsWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMerchants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MerchantsResponseBody>("/merchants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List merchants This endpoint returns a paginated list of all the merchants in the MX system.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantsResponseBody</returns>
        public async System.Threading.Tasks.Task<MerchantsResponseBody> ListMerchantsAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody> localVarResponse = await ListMerchantsWithHttpInfoAsync(page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List merchants This endpoint returns a paginated list of all the merchants in the MX system.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MerchantsResponseBody>> ListMerchantsWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListMerchants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerchantsResponseBody>("/merchants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rewards Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsResponseBody</returns>
        public RewardsResponseBody ListRewards(string userGuid, string memberGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<RewardsResponseBody> localVarResponse = ListRewardsWithHttpInfo(userGuid, memberGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rewards Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<RewardsResponseBody> ListRewardsWithHttpInfo(string userGuid, string memberGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListRewards");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ListRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RewardsResponseBody>("/users/{user_guid}/members/{member_guid}/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rewards Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsResponseBody> ListRewardsAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<RewardsResponseBody> localVarResponse = await ListRewardsWithHttpInfoAsync(userGuid, memberGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rewards Use this endpoint to list all the &#x60;rewards&#x60; associated with a specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<RewardsResponseBody>> ListRewardsWithHttpInfoAsync(string userGuid, string memberGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListRewards");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ListRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewardsResponseBody>("/users/{user_guid}/members/{member_guid}/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List statements by member Use this endpoint to get an array of available statements.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatementsResponseBody</returns>
        public StatementsResponseBody ListStatementsByMember(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<StatementsResponseBody> localVarResponse = ListStatementsByMemberWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List statements by member Use this endpoint to get an array of available statements.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatementsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<StatementsResponseBody> ListStatementsByMemberWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListStatementsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListStatementsByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListStatementsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatementsResponseBody>("/users/{user_guid}/members/{member_guid}/statements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStatementsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List statements by member Use this endpoint to get an array of available statements.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatementsResponseBody</returns>
        public async System.Threading.Tasks.Task<StatementsResponseBody> ListStatementsByMemberAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<StatementsResponseBody> localVarResponse = await ListStatementsByMemberWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List statements by member Use this endpoint to get an array of available statements.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatementsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<StatementsResponseBody>> ListStatementsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListStatementsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListStatementsByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListStatementsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatementsResponseBody>("/users/{user_guid}/members/{member_guid}/statements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStatementsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List taggings Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingsResponseBody</returns>
        public TaggingsResponseBody ListTaggings(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingsResponseBody> localVarResponse = ListTaggingsWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List taggings Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaggingsResponseBody> ListTaggingsWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTaggings");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTaggings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaggingsResponseBody>("/users/{user_guid}/taggings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaggings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List taggings Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingsResponseBody</returns>
        public async System.Threading.Tasks.Task<TaggingsResponseBody> ListTaggingsAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingsResponseBody> localVarResponse = await ListTaggingsWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List taggings Use this endpoint to retrieve a list of all the taggings associated with a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaggingsResponseBody>> ListTaggingsWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTaggings");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTaggings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaggingsResponseBody>("/users/{user_guid}/taggings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaggings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tags Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagsResponseBody</returns>
        public TagsResponseBody ListTags(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TagsResponseBody> localVarResponse = ListTagsWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List tags Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TagsResponseBody> ListTagsWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTags");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TagsResponseBody>("/users/{user_guid}/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List tags Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagsResponseBody</returns>
        public async System.Threading.Tasks.Task<TagsResponseBody> ListTagsAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TagsResponseBody> localVarResponse = await ListTagsWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List tags Use this endpoint to list all tags associated with the specified &#x60;user&#x60;. Each user includes the &#x60;Business&#x60; tag by default.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TagsResponseBody>> ListTagsWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTags");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagsResponseBody>("/users/{user_guid}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tax Documents Use this endpoint to get a paginated list of tax documents.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxDocumentsResponseBody</returns>
        public TaxDocumentsResponseBody ListTaxDocuments(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaxDocumentsResponseBody> localVarResponse = ListTaxDocumentsWithHttpInfo(memberGuid, userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tax Documents Use this endpoint to get a paginated list of tax documents.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxDocumentsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaxDocumentsResponseBody> ListTaxDocumentsWithHttpInfo(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListTaxDocuments");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTaxDocuments");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTaxDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxDocumentsResponseBody>("/users/{user_guid}/members/{member_guid}/tax_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaxDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tax Documents Use this endpoint to get a paginated list of tax documents.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxDocumentsResponseBody</returns>
        public async System.Threading.Tasks.Task<TaxDocumentsResponseBody> ListTaxDocumentsAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaxDocumentsResponseBody> localVarResponse = await ListTaxDocumentsWithHttpInfoAsync(memberGuid, userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tax Documents Use this endpoint to get a paginated list of tax documents.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxDocumentsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaxDocumentsResponseBody>> ListTaxDocumentsWithHttpInfoAsync(string memberGuid, string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListTaxDocuments");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTaxDocuments");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTaxDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxDocumentsResponseBody>("/users/{user_guid}/members/{member_guid}/tax_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaxDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transaction rules Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRulesResponseBody</returns>
        public TransactionRulesResponseBody ListTransactionRules(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRulesResponseBody> localVarResponse = ListTransactionRulesWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transaction rules Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRulesResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionRulesResponseBody> ListTransactionRulesWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionRules");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionRulesResponseBody>("/users/{user_guid}/transaction_rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transaction rules Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRulesResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionRulesResponseBody> ListTransactionRulesAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRulesResponseBody> localVarResponse = await ListTransactionRulesWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transaction rules Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRulesResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionRulesResponseBody>> ListTransactionRulesWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionRules");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionRulesResponseBody>("/users/{user_guid}/transaction_rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListTransactions(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListTransactionsWithHttpInfo(userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListTransactionsWithHttpInfo(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactions");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListTransactionsWithHttpInfoAsync(userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions Requests to this endpoint return a list of transactions associated with the specified &#x60;user&#x60;, accross all members and accounts associated with that &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListTransactionsWithHttpInfoAsync(string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactions");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by account This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListTransactionsByAccount(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListTransactionsByAccountWithHttpInfo(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by account This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListTransactionsByAccountWithHttpInfo(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListTransactionsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by account This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByAccountAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListTransactionsByAccountWithHttpInfoAsync(accountGuid, userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by account This endpoint returns a list of the last 90 days of transactions associated with the specified account.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListTransactionsByAccountWithHttpInfoAsync(string accountGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ListTransactionsByAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/accounts/{account_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by member Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListTransactionsByMember(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListTransactionsByMemberWithHttpInfo(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by member Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListTransactionsByMemberWithHttpInfo(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListTransactionsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/members/{member_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by member Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByMemberAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListTransactionsByMemberWithHttpInfoAsync(memberGuid, userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by member Requests to this endpoint return a list of transactions associated with the specified &#x60;member&#x60;, accross all accounts associated with that &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListTransactionsByMemberWithHttpInfoAsync(string memberGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ListTransactionsByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/members/{member_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by tag Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsResponseBody</returns>
        public TransactionsResponseBody ListTransactionsByTag(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = ListTransactionsByTagWithHttpInfo(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by tag Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> ListTransactionsByTagWithHttpInfo(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->ListTransactionsByTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByTag");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponseBody>("/users/{user_guid}/tags/{tag_guid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transactions by tag Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionsResponseBody> ListTransactionsByTagAsync(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody> localVarResponse = await ListTransactionsByTagWithHttpInfoAsync(tagGuid, userGuid, fromDate, page, recordsPerPage, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transactions by tag Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="fromDate">Filter transactions from this date. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="toDate">Filter transactions to this date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionsResponseBody>> ListTransactionsByTagWithHttpInfoAsync(string tagGuid, string userGuid, string? fromDate = default(string?), int? page = default(int?), int? recordsPerPage = default(int?), string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->ListTransactionsByTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListTransactionsByTag");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListTransactionsByTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponseBody>("/users/{user_guid}/tags/{tag_guid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionsByTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsResponseBody</returns>
        public AccountsResponseBody ListUserAccounts(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = ListUserAccountsWithHttpInfo(userGuid, memberIsManagedByUser, page, isManual, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> ListUserAccountsWithHttpInfo(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListUserAccounts");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (memberIsManagedByUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "member_is_managed_by_user", memberIsManagedByUser));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (isManual != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "is_manual", isManual));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListUserAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsResponseBody>("/users/{user_guid}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountsResponseBody> ListUserAccountsAsync(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody> localVarResponse = await ListUserAccountsWithHttpInfoAsync(userGuid, memberIsManagedByUser, page, isManual, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts This endpoint returns a list of all the accounts associated with the specified &#x60;user&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberIsManagedByUser">List only accounts whose member is managed by the user. (optional)</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="isManual">List only accounts that were manually created. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountsResponseBody>> ListUserAccountsWithHttpInfoAsync(string userGuid, bool? memberIsManagedByUser = default(bool?), int? page = default(int?), bool? isManual = default(bool?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ListUserAccounts");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (memberIsManagedByUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "member_is_managed_by_user", memberIsManagedByUser));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (isManual != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "is_manual", isManual));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListUserAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsResponseBody>("/users/{user_guid}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsersResponseBody</returns>
        public UsersResponseBody ListUsers(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<UsersResponseBody> localVarResponse = ListUsersWithHttpInfo(page, recordsPerPage, id, email, isDisabled);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsersResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<UsersResponseBody> ListUsersWithHttpInfo(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (isDisabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "is_disabled", isDisabled));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UsersResponseBody>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsersResponseBody</returns>
        public async System.Threading.Tasks.Task<UsersResponseBody> ListUsersAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<UsersResponseBody> localVarResponse = await ListUsersWithHttpInfoAsync(page, recordsPerPage, id, email, isDisabled, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users Use this endpoint to list every user you&#39;ve created in the MX Platform API.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="id">The user &#x60;id&#x60; to search for. (optional)</param>
        /// <param name="email">The user &#x60;email&#x60; to search for. (optional)</param>
        /// <param name="isDisabled">Search for users that are diabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsersResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<UsersResponseBody>> ListUsersWithHttpInfoAsync(int? page = default(int?), int? recordsPerPage = default(int?), string? id = default(string?), string? email = default(string?), bool? isDisabled = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (isDisabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "is_disabled", isDisabled));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UsersResponseBody>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read account This endpoint returns the specified &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody ReadAccount(string accountGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = ReadAccountWithHttpInfo(accountGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read account This endpoint returns the specified &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> ReadAccountWithHttpInfo(string accountGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResponseBody>("/users/{user_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read account This endpoint returns the specified &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> ReadAccountAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await ReadAccountWithHttpInfoAsync(accountGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read account This endpoint returns the specified &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> ReadAccountWithHttpInfoAsync(string accountGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountResponseBody>("/users/{user_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read account by member This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody ReadAccountByMember(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = ReadAccountByMemberWithHttpInfo(accountGuid, memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read account by member This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> ReadAccountByMemberWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadAccountByMember");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadAccountByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadAccountByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadAccountByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResponseBody>("/users/{user_guid}/members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadAccountByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read account by member This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> ReadAccountByMemberAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await ReadAccountByMemberWithHttpInfoAsync(accountGuid, memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read account by member This endpoint allows you to read the attributes of an &#x60;account&#x60; resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> ReadAccountByMemberWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadAccountByMember");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadAccountByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadAccountByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadAccountByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountResponseBody>("/users/{user_guid}/members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadAccountByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a custom category Use this endpoint to read the attributes of either a default category or a custom category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        public CategoryResponseBody ReadCategory(string categoryGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = ReadCategoryWithHttpInfo(categoryGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a custom category Use this endpoint to read the attributes of either a default category or a custom category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> ReadCategoryWithHttpInfo(string categoryGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->ReadCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadCategory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponseBody>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a custom category Use this endpoint to read the attributes of either a default category or a custom category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoryResponseBody> ReadCategoryAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = await ReadCategoryWithHttpInfoAsync(categoryGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a custom category Use this endpoint to read the attributes of either a default category or a custom category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody>> ReadCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->ReadCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadCategory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponseBody>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a default category Use this endpoint to read the attributes of a default category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        public CategoryResponseBody ReadDefaultCategory(string categoryGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = ReadDefaultCategoryWithHttpInfo(categoryGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a default category Use this endpoint to read the attributes of a default category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> ReadDefaultCategoryWithHttpInfo(string categoryGuid, int operationIndex = 0)
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->ReadDefaultCategory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadDefaultCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponseBody>("/categories/{category_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDefaultCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a default category Use this endpoint to read the attributes of a default category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoryResponseBody> ReadDefaultCategoryAsync(string categoryGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = await ReadDefaultCategoryWithHttpInfoAsync(categoryGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a default category Use this endpoint to read the attributes of a default category.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody>> ReadDefaultCategoryWithHttpInfoAsync(string categoryGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->ReadDefaultCategory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadDefaultCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponseBody>("/categories/{category_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDefaultCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read holding Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HoldingResponseBody</returns>
        public HoldingResponseBody ReadHolding(string holdingGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingResponseBody> localVarResponse = ReadHoldingWithHttpInfo(holdingGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read holding Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HoldingResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<HoldingResponseBody> ReadHoldingWithHttpInfo(string holdingGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'holdingGuid' is set
            if (holdingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'holdingGuid' when calling MxPlatformApi->ReadHolding");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadHolding");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("holding_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(holdingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadHolding";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HoldingResponseBody>("/users/{user_guid}/holdings/{holding_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadHolding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read holding Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HoldingResponseBody</returns>
        public async System.Threading.Tasks.Task<HoldingResponseBody> ReadHoldingAsync(string holdingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<HoldingResponseBody> localVarResponse = await ReadHoldingWithHttpInfoAsync(holdingGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read holding Use this endpoint to read the attributes of a specific &#x60;holding&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="holdingGuid">The unique id for a &#x60;holding&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HoldingResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<HoldingResponseBody>> ReadHoldingWithHttpInfoAsync(string holdingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'holdingGuid' is set
            if (holdingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'holdingGuid' when calling MxPlatformApi->ReadHolding");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadHolding");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("holding_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(holdingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadHolding";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HoldingResponseBody>("/users/{user_guid}/holdings/{holding_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadHolding", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read institution This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionResponseBody</returns>
        public InstitutionResponseBody ReadInstitution(string institutionCode, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionResponseBody> localVarResponse = ReadInstitutionWithHttpInfo(institutionCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read institution This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<InstitutionResponseBody> ReadInstitutionWithHttpInfo(string institutionCode, int operationIndex = 0)
        {
            // verify the required parameter 'institutionCode' is set
            if (institutionCode == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'institutionCode' when calling MxPlatformApi->ReadInstitution");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("institution_code", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(institutionCode)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadInstitution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstitutionResponseBody>("/institutions/{institution_code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadInstitution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read institution This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionResponseBody</returns>
        public async System.Threading.Tasks.Task<InstitutionResponseBody> ReadInstitutionAsync(string institutionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<InstitutionResponseBody> localVarResponse = await ReadInstitutionWithHttpInfoAsync(institutionCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read institution This endpoint returns information about the institution specified by &#x60;institution_code&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionCode">The institution_code of the institution.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<InstitutionResponseBody>> ReadInstitutionWithHttpInfoAsync(string institutionCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionCode' is set
            if (institutionCode == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'institutionCode' when calling MxPlatformApi->ReadInstitution");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("institution_code", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(institutionCode)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadInstitution";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstitutionResponseBody>("/institutions/{institution_code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadInstitution", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed account Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody ReadManagedAccount(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = ReadManagedAccountWithHttpInfo(accountGuid, memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed account Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> ReadManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed account Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> ReadManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await ReadManagedAccountWithHttpInfoAsync(accountGuid, memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed account Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> ReadManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed member This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody ReadManagedMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = ReadManagedMemberWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed member This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> ReadManagedMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberResponseBody>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed member This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> ReadManagedMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await ReadManagedMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed member This endpoint returns the attributes of the specified partner-managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> ReadManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberResponseBody>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed transaction Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        public TransactionResponseBody ReadManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = ReadManagedTransactionWithHttpInfo(accountGuid, memberGuid, transactionGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed transaction Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> ReadManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read managed transaction Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionResponseBody> ReadManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = await ReadManagedTransactionWithHttpInfoAsync(accountGuid, memberGuid, transactionGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read managed transaction Requests to this endpoint will return the attributes of the specified partner-managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody>> ReadManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadManagedTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read member Use this endpoint to read the attributes of a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody ReadMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = ReadMemberWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read member Use this endpoint to read the attributes of a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> ReadMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberResponseBody>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read member Use this endpoint to read the attributes of a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> ReadMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await ReadMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read member Use this endpoint to read the attributes of a specific member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> ReadMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read member status This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberStatusResponseBody</returns>
        public MemberStatusResponseBody ReadMemberStatus(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberStatusResponseBody> localVarResponse = ReadMemberStatusWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read member status This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberStatusResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberStatusResponseBody> ReadMemberStatusWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadMemberStatus");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadMemberStatus");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMemberStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberStatusResponseBody>("/users/{user_guid}/members/{member_guid}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMemberStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read member status This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberStatusResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberStatusResponseBody> ReadMemberStatusAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberStatusResponseBody> localVarResponse = await ReadMemberStatusWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read member status This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberStatusResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberStatusResponseBody>> ReadMemberStatusWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadMemberStatus");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadMemberStatus");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMemberStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberStatusResponseBody>("/users/{user_guid}/members/{member_guid}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMemberStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read merchant Returns information about a particular merchant, such as a logo, name, and website.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantResponseBody</returns>
        public MerchantResponseBody ReadMerchant(string merchantGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantResponseBody> localVarResponse = ReadMerchantWithHttpInfo(merchantGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read merchant Returns information about a particular merchant, such as a logo, name, and website.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MerchantResponseBody> ReadMerchantWithHttpInfo(string merchantGuid, int operationIndex = 0)
        {
            // verify the required parameter 'merchantGuid' is set
            if (merchantGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'merchantGuid' when calling MxPlatformApi->ReadMerchant");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("merchant_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(merchantGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMerchant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MerchantResponseBody>("/merchants/{merchant_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMerchant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read merchant Returns information about a particular merchant, such as a logo, name, and website.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantResponseBody</returns>
        public async System.Threading.Tasks.Task<MerchantResponseBody> ReadMerchantAsync(string merchantGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantResponseBody> localVarResponse = await ReadMerchantWithHttpInfoAsync(merchantGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read merchant Returns information about a particular merchant, such as a logo, name, and website.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantGuid">The unique id for a &#x60;merchant&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MerchantResponseBody>> ReadMerchantWithHttpInfoAsync(string merchantGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantGuid' is set
            if (merchantGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'merchantGuid' when calling MxPlatformApi->ReadMerchant");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("merchant_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(merchantGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMerchant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerchantResponseBody>("/merchants/{merchant_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMerchant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read merchant location This endpoint returns the specified merchant_location resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerchantLocationResponseBody</returns>
        public MerchantLocationResponseBody ReadMerchantLocation(string merchantLocationGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantLocationResponseBody> localVarResponse = ReadMerchantLocationWithHttpInfo(merchantLocationGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read merchant location This endpoint returns the specified merchant_location resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerchantLocationResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MerchantLocationResponseBody> ReadMerchantLocationWithHttpInfo(string merchantLocationGuid, int operationIndex = 0)
        {
            // verify the required parameter 'merchantLocationGuid' is set
            if (merchantLocationGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'merchantLocationGuid' when calling MxPlatformApi->ReadMerchantLocation");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("merchant_location_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(merchantLocationGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMerchantLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MerchantLocationResponseBody>("/merchant_locations/{merchant_location_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMerchantLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read merchant location This endpoint returns the specified merchant_location resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerchantLocationResponseBody</returns>
        public async System.Threading.Tasks.Task<MerchantLocationResponseBody> ReadMerchantLocationAsync(string merchantLocationGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MerchantLocationResponseBody> localVarResponse = await ReadMerchantLocationWithHttpInfoAsync(merchantLocationGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read merchant location This endpoint returns the specified merchant_location resource.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantLocationGuid">The unique id for a &#x60;merchant_location&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerchantLocationResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MerchantLocationResponseBody>> ReadMerchantLocationWithHttpInfoAsync(string merchantLocationGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantLocationGuid' is set
            if (merchantLocationGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'merchantLocationGuid' when calling MxPlatformApi->ReadMerchantLocation");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("merchant_location_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(merchantLocationGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadMerchantLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerchantLocationResponseBody>("/merchant_locations/{merchant_location_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMerchantLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Reward Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardResponseBody</returns>
        public RewardResponseBody ReadRewards(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<RewardResponseBody> localVarResponse = ReadRewardsWithHttpInfo(userGuid, memberGuid, rewardGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Reward Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<RewardResponseBody> ReadRewardsWithHttpInfo(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadRewards");
            }

            // verify the required parameter 'rewardGuid' is set
            if (rewardGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'rewardGuid' when calling MxPlatformApi->ReadRewards");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("reward_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(rewardGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RewardResponseBody>("/users/{user_guid}/members/{member_guid}/rewards/{reward_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Reward Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardResponseBody> ReadRewardsAsync(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<RewardResponseBody> localVarResponse = await ReadRewardsWithHttpInfoAsync(userGuid, memberGuid, rewardGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Reward Use this endpoint to read a specific &#x60;reward&#x60; based on its unique GUID..
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberGuid">The unique identifier for the member. Defined by MX.</param>
        /// <param name="rewardGuid">The unique identifier for the rewards. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<RewardResponseBody>> ReadRewardsWithHttpInfoAsync(string userGuid, string memberGuid, string rewardGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadRewards");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadRewards");
            }

            // verify the required parameter 'rewardGuid' is set
            if (rewardGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'rewardGuid' when calling MxPlatformApi->ReadRewards");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("reward_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(rewardGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewardResponseBody>("/users/{user_guid}/members/{member_guid}/rewards/{reward_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read statement by member Use this endpoint to read a JSON representation of the statement.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatementResponseBody</returns>
        public StatementResponseBody ReadStatementByMember(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<StatementResponseBody> localVarResponse = ReadStatementByMemberWithHttpInfo(memberGuid, statementGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read statement by member Use this endpoint to read a JSON representation of the statement.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatementResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<StatementResponseBody> ReadStatementByMemberWithHttpInfo(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadStatementByMember");
            }

            // verify the required parameter 'statementGuid' is set
            if (statementGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'statementGuid' when calling MxPlatformApi->ReadStatementByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadStatementByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("statement_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(statementGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadStatementByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatementResponseBody>("/users/{user_guid}/members/{member_guid}/statements/{statement_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadStatementByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read statement by member Use this endpoint to read a JSON representation of the statement.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatementResponseBody</returns>
        public async System.Threading.Tasks.Task<StatementResponseBody> ReadStatementByMemberAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<StatementResponseBody> localVarResponse = await ReadStatementByMemberWithHttpInfoAsync(memberGuid, statementGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read statement by member Use this endpoint to read a JSON representation of the statement.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="statementGuid">The unique id for a &#x60;statement&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatementResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<StatementResponseBody>> ReadStatementByMemberWithHttpInfoAsync(string memberGuid, string statementGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadStatementByMember");
            }

            // verify the required parameter 'statementGuid' is set
            if (statementGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'statementGuid' when calling MxPlatformApi->ReadStatementByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadStatementByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("statement_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(statementGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadStatementByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatementResponseBody>("/users/{user_guid}/members/{member_guid}/statements/{statement_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadStatementByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read tag Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        public TagResponseBody ReadTag(string tagGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = ReadTagWithHttpInfo(tagGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read tag Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> ReadTagWithHttpInfo(string tagGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->ReadTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTag");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TagResponseBody>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read tag Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        public async System.Threading.Tasks.Task<TagResponseBody> ReadTagAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = await ReadTagWithHttpInfoAsync(tagGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read tag Use this endpoint to read the attributes of a particular tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TagResponseBody>> ReadTagWithHttpInfoAsync(string tagGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->ReadTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTag");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagResponseBody>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read tagging Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        public TaggingResponseBody ReadTagging(string taggingGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = ReadTaggingWithHttpInfo(taggingGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read tagging Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> ReadTaggingWithHttpInfo(string taggingGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->ReadTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTagging");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaggingResponseBody>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read tagging Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        public async System.Threading.Tasks.Task<TaggingResponseBody> ReadTaggingAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = await ReadTaggingWithHttpInfoAsync(taggingGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read tagging Use this endpoint to read the attributes of a &#x60;tagging&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody>> ReadTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->ReadTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTagging");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaggingResponseBody>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a Tax Document Use this endpoint to read the attributes of the specified tax document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxDocumentResponseBody</returns>
        public TaxDocumentResponseBody ReadTaxDocument(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaxDocumentResponseBody> localVarResponse = ReadTaxDocumentWithHttpInfo(taxDocumentGuid, memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a Tax Document Use this endpoint to read the attributes of the specified tax document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxDocumentResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaxDocumentResponseBody> ReadTaxDocumentWithHttpInfo(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'taxDocumentGuid' is set
            if (taxDocumentGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taxDocumentGuid' when calling MxPlatformApi->ReadTaxDocument");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadTaxDocument");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTaxDocument");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_document_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taxDocumentGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTaxDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxDocumentResponseBody>("/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaxDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a Tax Document Use this endpoint to read the attributes of the specified tax document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxDocumentResponseBody</returns>
        public async System.Threading.Tasks.Task<TaxDocumentResponseBody> ReadTaxDocumentAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaxDocumentResponseBody> localVarResponse = await ReadTaxDocumentWithHttpInfoAsync(taxDocumentGuid, memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a Tax Document Use this endpoint to read the attributes of the specified tax document.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxDocumentGuid">The unique id for a &#x60;tax_document&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxDocumentResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaxDocumentResponseBody>> ReadTaxDocumentWithHttpInfoAsync(string taxDocumentGuid, string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taxDocumentGuid' is set
            if (taxDocumentGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taxDocumentGuid' when calling MxPlatformApi->ReadTaxDocument");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ReadTaxDocument");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTaxDocument");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_document_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taxDocumentGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTaxDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxDocumentResponseBody>("/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaxDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read transaction Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        public TransactionResponseBody ReadTransaction(string transactionGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = ReadTransactionWithHttpInfo(transactionGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read transaction Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> ReadTransactionWithHttpInfo(string transactionGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->ReadTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionResponseBody>("/users/{user_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read transaction Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionResponseBody> ReadTransactionAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = await ReadTransactionWithHttpInfoAsync(transactionGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read transaction Requests to this endpoint will return the attributes of the specified &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody>> ReadTransactionWithHttpInfoAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->ReadTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionResponseBody>("/users/{user_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read transaction rule Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        public TransactionRuleResponseBody ReadTransactionRule(string transactionRuleGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = ReadTransactionRuleWithHttpInfo(transactionRuleGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read transaction rule Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> ReadTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->ReadTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTransactionRule");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read transaction rule Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionRuleResponseBody> ReadTransactionRuleAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = await ReadTransactionRuleWithHttpInfoAsync(transactionRuleGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read transaction rule Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody>> ReadTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->ReadTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadTransactionRule");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read user Use this endpoint to read the attributes of a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        public UserResponseBody ReadUser(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = ReadUserWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read user Use this endpoint to read the attributes of a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> ReadUserWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserResponseBody>("/users/{user_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read user Use this endpoint to read the attributes of a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        public async System.Threading.Tasks.Task<UserResponseBody> ReadUserAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = await ReadUserWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read user Use this endpoint to read the attributes of a specific user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<UserResponseBody>> ReadUserWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ReadUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.ReadUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserResponseBody>("/users/{user_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization code. Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizationCodeResponseBody</returns>
        public AuthorizationCodeResponseBody RequestAuthorizationCode(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AuthorizationCodeResponseBody> localVarResponse = RequestAuthorizationCodeWithHttpInfo(authorizationCodeRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an authorization code. Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizationCodeResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AuthorizationCodeResponseBody> RequestAuthorizationCodeWithHttpInfo(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'authorizationCodeRequestBody' is set
            if (authorizationCodeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'authorizationCodeRequestBody' when calling MxPlatformApi->RequestAuthorizationCode");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizationCodeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestAuthorizationCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizationCodeResponseBody>("/authorization_code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestAuthorizationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization code. Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizationCodeResponseBody</returns>
        public async System.Threading.Tasks.Task<AuthorizationCodeResponseBody> RequestAuthorizationCodeAsync(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AuthorizationCodeResponseBody> localVarResponse = await RequestAuthorizationCodeWithHttpInfoAsync(authorizationCodeRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request an authorization code. Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCodeRequestBody">The scope for the authorization code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizationCodeResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AuthorizationCodeResponseBody>> RequestAuthorizationCodeWithHttpInfoAsync(AuthorizationCodeRequestBody authorizationCodeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorizationCodeRequestBody' is set
            if (authorizationCodeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'authorizationCodeRequestBody' when calling MxPlatformApi->RequestAuthorizationCode");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizationCodeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestAuthorizationCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizationCodeResponseBody>("/authorization_code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestAuthorizationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request connect widget url This endpoint will return a URL for an embeddable version of MX Connect.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectWidgetResponseBody</returns>
        public ConnectWidgetResponseBody RequestConnectWidgetURL(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<ConnectWidgetResponseBody> localVarResponse = RequestConnectWidgetURLWithHttpInfo(userGuid, connectWidgetRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request connect widget url This endpoint will return a URL for an embeddable version of MX Connect.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectWidgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<ConnectWidgetResponseBody> RequestConnectWidgetURLWithHttpInfo(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestConnectWidgetURL");
            }

            // verify the required parameter 'connectWidgetRequestBody' is set
            if (connectWidgetRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'connectWidgetRequestBody' when calling MxPlatformApi->RequestConnectWidgetURL");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = connectWidgetRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestConnectWidgetURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectWidgetResponseBody>("/users/{user_guid}/connect_widget_url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestConnectWidgetURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request connect widget url This endpoint will return a URL for an embeddable version of MX Connect.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectWidgetResponseBody</returns>
        public async System.Threading.Tasks.Task<ConnectWidgetResponseBody> RequestConnectWidgetURLAsync(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<ConnectWidgetResponseBody> localVarResponse = await RequestConnectWidgetURLWithHttpInfoAsync(userGuid, connectWidgetRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request connect widget url This endpoint will return a URL for an embeddable version of MX Connect.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="connectWidgetRequestBody">Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectWidgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<ConnectWidgetResponseBody>> RequestConnectWidgetURLWithHttpInfoAsync(string userGuid, ConnectWidgetRequestBody connectWidgetRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestConnectWidgetURL");
            }

            // verify the required parameter 'connectWidgetRequestBody' is set
            if (connectWidgetRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'connectWidgetRequestBody' when calling MxPlatformApi->RequestConnectWidgetURL");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = connectWidgetRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestConnectWidgetURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectWidgetResponseBody>("/users/{user_guid}/connect_widget_url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestConnectWidgetURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request oauth window uri This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuthWindowResponseBody</returns>
        public OAuthWindowResponseBody RequestOAuthWindowURI(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<OAuthWindowResponseBody> localVarResponse = RequestOAuthWindowURIWithHttpInfo(memberGuid, userGuid, clientRedirectUrl, enableApp2app, referralSource, skipAggregation, uiMessageWebviewUrlScheme);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request oauth window uri This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuthWindowResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<OAuthWindowResponseBody> RequestOAuthWindowURIWithHttpInfo(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->RequestOAuthWindowURI");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestOAuthWindowURI");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (clientRedirectUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "client_redirect_url", clientRedirectUrl));
            }
            if (enableApp2app != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "enable_app2app", enableApp2app));
            }
            if (referralSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "referral_source", referralSource));
            }
            if (skipAggregation != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "skip_aggregation", skipAggregation));
            }
            if (uiMessageWebviewUrlScheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "ui_message_webview_url_scheme", uiMessageWebviewUrlScheme));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.RequestOAuthWindowURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuthWindowResponseBody>("/users/{user_guid}/members/{member_guid}/oauth_window_uri", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestOAuthWindowURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request oauth window uri This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthWindowResponseBody</returns>
        public async System.Threading.Tasks.Task<OAuthWindowResponseBody> RequestOAuthWindowURIAsync(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<OAuthWindowResponseBody> localVarResponse = await RequestOAuthWindowURIWithHttpInfoAsync(memberGuid, userGuid, clientRedirectUrl, enableApp2app, referralSource, skipAggregation, uiMessageWebviewUrlScheme, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request oauth window uri This endpoint will generate an &#x60;oauth_window_uri&#x60; for the specified &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="clientRedirectUrl">A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="enableApp2app">This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent. (optional)</param>
        /// <param name="referralSource">Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;. (optional)</param>
        /// <param name="skipAggregation">Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page. (optional)</param>
        /// <param name="uiMessageWebviewUrlScheme">A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthWindowResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<OAuthWindowResponseBody>> RequestOAuthWindowURIWithHttpInfoAsync(string memberGuid, string userGuid, string? clientRedirectUrl = default(string?), string? enableApp2app = default(string?), string? referralSource = default(string?), bool? skipAggregation = default(bool?), string? uiMessageWebviewUrlScheme = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->RequestOAuthWindowURI");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestOAuthWindowURI");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (clientRedirectUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "client_redirect_url", clientRedirectUrl));
            }
            if (enableApp2app != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "enable_app2app", enableApp2app));
            }
            if (referralSource != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "referral_source", referralSource));
            }
            if (skipAggregation != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "skip_aggregation", skipAggregation));
            }
            if (uiMessageWebviewUrlScheme != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "ui_message_webview_url_scheme", uiMessageWebviewUrlScheme));
            }

            localVarRequestOptions.Operation = "MxPlatformApi.RequestOAuthWindowURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuthWindowResponseBody>("/users/{user_guid}/members/{member_guid}/oauth_window_uri", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestOAuthWindowURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request widget url This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WidgetResponseBody</returns>
        public WidgetResponseBody RequestWidgetURL(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<WidgetResponseBody> localVarResponse = RequestWidgetURLWithHttpInfo(userGuid, widgetRequestBody, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request widget url This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WidgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<WidgetResponseBody> RequestWidgetURLWithHttpInfo(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestWidgetURL");
            }

            // verify the required parameter 'widgetRequestBody' is set
            if (widgetRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'widgetRequestBody' when calling MxPlatformApi->RequestWidgetURL");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = widgetRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestWidgetURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WidgetResponseBody>("/users/{user_guid}/widget_urls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestWidgetURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request widget url This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WidgetResponseBody</returns>
        public async System.Threading.Tasks.Task<WidgetResponseBody> RequestWidgetURLAsync(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<WidgetResponseBody> localVarResponse = await RequestWidgetURLWithHttpInfoAsync(userGuid, widgetRequestBody, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request widget url This endpoint allows partners to get a URL by passing the &#x60;widget_type&#x60; in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the &#x60;widget_type&#x60; to &#x60;connect_widget&#x60;. Partners may also pass an optional &#x60;Accept-Language&#x60; header as well as a number of configuration options. Note that this is a &#x60;POST&#x60; request.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="widgetRequestBody">The widget url configuration options.</param>
        /// <param name="acceptLanguage">The desired language of the widget. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WidgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<WidgetResponseBody>> RequestWidgetURLWithHttpInfoAsync(string userGuid, WidgetRequestBody widgetRequestBody, string? acceptLanguage = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->RequestWidgetURL");
            }

            // verify the required parameter 'widgetRequestBody' is set
            if (widgetRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'widgetRequestBody' when calling MxPlatformApi->RequestWidgetURL");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }
            localVarRequestOptions.Data = widgetRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.RequestWidgetURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WidgetResponseBody>("/users/{user_guid}/widget_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestWidgetURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume aggregation This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody ResumeAggregation(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = ResumeAggregationWithHttpInfo(memberGuid, userGuid, memberResumeRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume aggregation This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> ResumeAggregationWithHttpInfo(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ResumeAggregation");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ResumeAggregation");
            }

            // verify the required parameter 'memberResumeRequestBody' is set
            if (memberResumeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberResumeRequestBody' when calling MxPlatformApi->ResumeAggregation");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberResumeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.ResumeAggregation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeAggregation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume aggregation This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> ResumeAggregationAsync(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await ResumeAggregationWithHttpInfoAsync(memberGuid, userGuid, memberResumeRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume aggregation This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberResumeRequestBody">Member object with MFA challenge answers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> ResumeAggregationWithHttpInfoAsync(string memberGuid, string userGuid, MemberResumeRequestBody memberResumeRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->ResumeAggregation");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->ResumeAggregation");
            }

            // verify the required parameter 'memberResumeRequestBody' is set
            if (memberResumeRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberResumeRequestBody' when calling MxPlatformApi->ResumeAggregation");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberResumeRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.ResumeAggregation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeAggregation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account by member This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody UpdateAccountByMember(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = UpdateAccountByMemberWithHttpInfo(accountGuid, memberGuid, userGuid, accountUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update account by member This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> UpdateAccountByMemberWithHttpInfo(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'accountUpdateRequestBody' is set
            if (accountUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountUpdateRequestBody' when calling MxPlatformApi->UpdateAccountByMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = accountUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateAccountByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountResponseBody>("/users/{user_guid}/members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update account by member This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> UpdateAccountByMemberAsync(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await UpdateAccountByMemberWithHttpInfoAsync(accountGuid, memberGuid, userGuid, accountUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update account by member This endpoint allows you to update certain attributes of an &#x60;account&#x60; resource, including manual accounts. For manual accounts, you can update every field listed. For aggregated accounts, you can only update &#x60;is_business&#x60;, &#x60;is_hidden&#x60; and &#x60;metadata&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="accountUpdateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> UpdateAccountByMemberWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, AccountUpdateRequestBody accountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateAccountByMember");
            }

            // verify the required parameter 'accountUpdateRequestBody' is set
            if (accountUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountUpdateRequestBody' when calling MxPlatformApi->UpdateAccountByMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = accountUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateAccountByMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountResponseBody>("/users/{user_guid}/members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountByMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update category Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponseBody</returns>
        public CategoryResponseBody UpdateCategory(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = UpdateCategoryWithHttpInfo(categoryGuid, userGuid, categoryUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update category Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> UpdateCategoryWithHttpInfo(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->UpdateCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateCategory");
            }

            // verify the required parameter 'categoryUpdateRequestBody' is set
            if (categoryUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryUpdateRequestBody' when calling MxPlatformApi->UpdateCategory");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = categoryUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CategoryResponseBody>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update category Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponseBody</returns>
        public async System.Threading.Tasks.Task<CategoryResponseBody> UpdateCategoryAsync(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody> localVarResponse = await UpdateCategoryWithHttpInfoAsync(categoryGuid, userGuid, categoryUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update category Use this endpoint to update the attributes of a custom category according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryGuid">The unique id for a &#x60;category&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="categoryUpdateRequestBody">Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<CategoryResponseBody>> UpdateCategoryWithHttpInfoAsync(string categoryGuid, string userGuid, CategoryUpdateRequestBody categoryUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryGuid' is set
            if (categoryGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryGuid' when calling MxPlatformApi->UpdateCategory");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateCategory");
            }

            // verify the required parameter 'categoryUpdateRequestBody' is set
            if (categoryUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'categoryUpdateRequestBody' when calling MxPlatformApi->UpdateCategory");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(categoryGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = categoryUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CategoryResponseBody>("/users/{user_guid}/categories/{category_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed account Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseBody</returns>
        public AccountResponseBody UpdateManagedAccount(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = UpdateManagedAccountWithHttpInfo(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed account Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> UpdateManagedAccountWithHttpInfo(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'managedAccountUpdateRequestBody' is set
            if (managedAccountUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedAccountUpdateRequestBody' when calling MxPlatformApi->UpdateManagedAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedAccountUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed account Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseBody</returns>
        public async System.Threading.Tasks.Task<AccountResponseBody> UpdateManagedAccountAsync(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody> localVarResponse = await UpdateManagedAccountWithHttpInfoAsync(accountGuid, memberGuid, userGuid, managedAccountUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed account Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedAccountUpdateRequestBody">Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<AccountResponseBody>> UpdateManagedAccountWithHttpInfoAsync(string accountGuid, string memberGuid, string userGuid, ManagedAccountUpdateRequestBody managedAccountUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedAccount");
            }

            // verify the required parameter 'managedAccountUpdateRequestBody' is set
            if (managedAccountUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedAccountUpdateRequestBody' when calling MxPlatformApi->UpdateManagedAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedAccountUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed member Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody UpdateManagedMember(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = UpdateManagedMemberWithHttpInfo(memberGuid, userGuid, managedMemberUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed member Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> UpdateManagedMemberWithHttpInfo(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedMember");
            }

            // verify the required parameter 'managedMemberUpdateRequestBody' is set
            if (managedMemberUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedMemberUpdateRequestBody' when calling MxPlatformApi->UpdateManagedMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedMemberUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MemberResponseBody>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed member Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> UpdateManagedMemberAsync(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await UpdateManagedMemberWithHttpInfoAsync(memberGuid, userGuid, managedMemberUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed member Use this endpoint to update the attributes of the specified partner_managed &#x60;member&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedMemberUpdateRequestBody">Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> UpdateManagedMemberWithHttpInfoAsync(string memberGuid, string userGuid, ManagedMemberUpdateRequestBody managedMemberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedMember");
            }

            // verify the required parameter 'managedMemberUpdateRequestBody' is set
            if (managedMemberUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedMemberUpdateRequestBody' when calling MxPlatformApi->UpdateManagedMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedMemberUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MemberResponseBody>("/users/{user_guid}/managed_members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed transaction Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        public TransactionResponseBody UpdateManagedTransaction(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = UpdateManagedTransactionWithHttpInfo(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed transaction Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> UpdateManagedTransactionWithHttpInfo(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'managedTransactionUpdateRequestBody' is set
            if (managedTransactionUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedTransactionUpdateRequestBody' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedTransactionUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update managed transaction Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionResponseBody> UpdateManagedTransactionAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = await UpdateManagedTransactionWithHttpInfoAsync(accountGuid, memberGuid, transactionGuid, userGuid, managedTransactionUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update managed transaction Use this endpoint to update the attributes of the specified partner_managed &#x60;transaction&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountGuid">The unique id for an &#x60;account&#x60;.</param>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="managedTransactionUpdateRequestBody">Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody>> UpdateManagedTransactionWithHttpInfoAsync(string accountGuid, string memberGuid, string transactionGuid, string userGuid, ManagedTransactionUpdateRequestBody managedTransactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountGuid' is set
            if (accountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'accountGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateManagedTransaction");
            }

            // verify the required parameter 'managedTransactionUpdateRequestBody' is set
            if (managedTransactionUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'managedTransactionUpdateRequestBody' when calling MxPlatformApi->UpdateManagedTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(accountGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = managedTransactionUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateManagedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TransactionResponseBody>("/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManagedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody UpdateMember(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = UpdateMemberWithHttpInfo(memberGuid, userGuid, memberUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> UpdateMemberWithHttpInfo(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateMember");
            }

            // verify the required parameter 'memberUpdateRequestBody' is set
            if (memberUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberUpdateRequestBody' when calling MxPlatformApi->UpdateMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MemberResponseBody>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update member Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> UpdateMemberAsync(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await UpdateMemberWithHttpInfoAsync(memberGuid, userGuid, memberUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update member Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="memberUpdateRequestBody">Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> UpdateMemberWithHttpInfoAsync(string memberGuid, string userGuid, MemberUpdateRequestBody memberUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->UpdateMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateMember");
            }

            // verify the required parameter 'memberUpdateRequestBody' is set
            if (memberUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberUpdateRequestBody' when calling MxPlatformApi->UpdateMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = memberUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update tag Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagResponseBody</returns>
        public TagResponseBody UpdateTag(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = UpdateTagWithHttpInfo(tagGuid, userGuid, tagUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update tag Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> UpdateTagWithHttpInfo(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->UpdateTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTag");
            }

            // verify the required parameter 'tagUpdateRequestBody' is set
            if (tagUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagUpdateRequestBody' when calling MxPlatformApi->UpdateTag");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = tagUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TagResponseBody>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update tag Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponseBody</returns>
        public async System.Threading.Tasks.Task<TagResponseBody> UpdateTagAsync(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TagResponseBody> localVarResponse = await UpdateTagWithHttpInfoAsync(tagGuid, userGuid, tagUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update tag Use this endpoint to update the name of a specific tag according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagGuid">The unique id for a &#x60;tag&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="tagUpdateRequestBody">Tag object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TagResponseBody>> UpdateTagWithHttpInfoAsync(string tagGuid, string userGuid, TagUpdateRequestBody tagUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagGuid' is set
            if (tagGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagGuid' when calling MxPlatformApi->UpdateTag");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTag");
            }

            // verify the required parameter 'tagUpdateRequestBody' is set
            if (tagUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'tagUpdateRequestBody' when calling MxPlatformApi->UpdateTag");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(tagGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = tagUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TagResponseBody>("/users/{user_guid}/tags/{tag_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update tagging Use this endpoint to update a tagging.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaggingResponseBody</returns>
        public TaggingResponseBody UpdateTagging(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = UpdateTaggingWithHttpInfo(taggingGuid, userGuid, taggingUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update tagging Use this endpoint to update a tagging.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaggingResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> UpdateTaggingWithHttpInfo(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->UpdateTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTagging");
            }

            // verify the required parameter 'taggingUpdateRequestBody' is set
            if (taggingUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingUpdateRequestBody' when calling MxPlatformApi->UpdateTagging");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = taggingUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TaggingResponseBody>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update tagging Use this endpoint to update a tagging.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaggingResponseBody</returns>
        public async System.Threading.Tasks.Task<TaggingResponseBody> UpdateTaggingAsync(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody> localVarResponse = await UpdateTaggingWithHttpInfoAsync(taggingGuid, userGuid, taggingUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update tagging Use this endpoint to update a tagging.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taggingGuid">The unique id for a &#x60;tagging&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="taggingUpdateRequestBody">Tagging object to be updated with required parameter (tag_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaggingResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TaggingResponseBody>> UpdateTaggingWithHttpInfoAsync(string taggingGuid, string userGuid, TaggingUpdateRequestBody taggingUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taggingGuid' is set
            if (taggingGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingGuid' when calling MxPlatformApi->UpdateTagging");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTagging");
            }

            // verify the required parameter 'taggingUpdateRequestBody' is set
            if (taggingUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'taggingUpdateRequestBody' when calling MxPlatformApi->UpdateTagging");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tagging_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(taggingGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = taggingUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TaggingResponseBody>("/users/{user_guid}/taggings/{tagging_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update transaction Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponseBody</returns>
        public TransactionResponseBody UpdateTransaction(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = UpdateTransactionWithHttpInfo(transactionGuid, userGuid, transactionUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update transaction Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> UpdateTransactionWithHttpInfo(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UpdateTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTransaction");
            }

            // verify the required parameter 'transactionUpdateRequestBody' is set
            if (transactionUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionUpdateRequestBody' when calling MxPlatformApi->UpdateTransaction");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TransactionResponseBody>("/users/{user_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update transaction Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionResponseBody> UpdateTransactionAsync(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody> localVarResponse = await UpdateTransactionWithHttpInfoAsync(transactionGuid, userGuid, transactionUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update transaction Use this endpoint to update the &#x60;description&#x60; of a specific transaction according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionUpdateRequestBody">Transaction object to be updated with a new description</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionResponseBody>> UpdateTransactionWithHttpInfoAsync(string transactionGuid, string userGuid, TransactionUpdateRequestBody transactionUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UpdateTransaction");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTransaction");
            }

            // verify the required parameter 'transactionUpdateRequestBody' is set
            if (transactionUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionUpdateRequestBody' when calling MxPlatformApi->UpdateTransaction");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TransactionResponseBody>("/users/{user_guid}/transactions/{transaction_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update transaction_rule Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRuleResponseBody</returns>
        public TransactionRuleResponseBody UpdateTransactionRule(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = UpdateTransactionRuleWithHttpInfo(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update transaction_rule Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRuleResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> UpdateTransactionRuleWithHttpInfo(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->UpdateTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTransactionRule");
            }

            // verify the required parameter 'transactionRuleUpdateRequestBody' is set
            if (transactionRuleUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleUpdateRequestBody' when calling MxPlatformApi->UpdateTransactionRule");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionRuleUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update transaction_rule Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRuleResponseBody</returns>
        public async System.Threading.Tasks.Task<TransactionRuleResponseBody> UpdateTransactionRuleAsync(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody> localVarResponse = await UpdateTransactionRuleWithHttpInfoAsync(transactionRuleGuid, userGuid, transactionRuleUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update transaction_rule Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRuleGuid">The unique id for a &#x60;transaction_rule&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="transactionRuleUpdateRequestBody">TransactionRule object to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRuleResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<TransactionRuleResponseBody>> UpdateTransactionRuleWithHttpInfoAsync(string transactionRuleGuid, string userGuid, TransactionRuleUpdateRequestBody transactionRuleUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionRuleGuid' is set
            if (transactionRuleGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleGuid' when calling MxPlatformApi->UpdateTransactionRule");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateTransactionRule");
            }

            // verify the required parameter 'transactionRuleUpdateRequestBody' is set
            if (transactionRuleUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionRuleUpdateRequestBody' when calling MxPlatformApi->UpdateTransactionRule");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_rule_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionRuleGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = transactionRuleUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateTransactionRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TransactionRuleResponseBody>("/users/{user_guid}/transaction_rules/{transaction_rule_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user Use this endpoint to update the attributes of the specified user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserResponseBody</returns>
        public UserResponseBody UpdateUser(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = UpdateUserWithHttpInfo(userGuid, userUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user Use this endpoint to update the attributes of the specified user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> UpdateUserWithHttpInfo(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateUser");
            }

            // verify the required parameter 'userUpdateRequestBody' is set
            if (userUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userUpdateRequestBody' when calling MxPlatformApi->UpdateUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = userUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserResponseBody>("/users/{user_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user Use this endpoint to update the attributes of the specified user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResponseBody</returns>
        public async System.Threading.Tasks.Task<UserResponseBody> UpdateUserAsync(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<UserResponseBody> localVarResponse = await UpdateUserWithHttpInfoAsync(userGuid, userUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user Use this endpoint to update the attributes of the specified user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="userUpdateRequestBody">User object to be updated (None of these parameters are required, but the user object cannot be empty.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<UserResponseBody>> UpdateUserWithHttpInfoAsync(string userGuid, UserUpdateRequestBody userUpdateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UpdateUser");
            }

            // verify the required parameter 'userUpdateRequestBody' is set
            if (userUpdateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userUpdateRequestBody' when calling MxPlatformApi->UpdateUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = userUpdateRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UserResponseBody>("/users/{user_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read monthly cash flow profile 
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MonthlyCashFlowResponseBody</returns>
        public MonthlyCashFlowResponseBody UsersUserGuidMonthlyCashFlowProfileGet(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> localVarResponse = UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read monthly cash flow profile 
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MonthlyCashFlowResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfileGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidMonthlyCashFlowProfileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MonthlyCashFlowResponseBody>("/users/{user_guid}/monthly_cash_flow_profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMonthlyCashFlowProfileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read monthly cash flow profile 
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyCashFlowResponseBody</returns>
        public async System.Threading.Tasks.Task<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfileGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> localVarResponse = await UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read monthly cash flow profile 
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyCashFlowResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody>> UsersUserGuidMonthlyCashFlowProfileGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfileGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidMonthlyCashFlowProfileGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MonthlyCashFlowResponseBody>("/users/{user_guid}/monthly_cash_flow_profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMonthlyCashFlowProfileGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update monthly cash flow profile Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MonthlyCashFlowResponseBody</returns>
        public MonthlyCashFlowResponseBody UsersUserGuidMonthlyCashFlowProfilePut(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> localVarResponse = UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfo(userGuid, monthlyCashFlowProfileRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update monthly cash flow profile Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MonthlyCashFlowResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfo(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfilePut");
            }

            // verify the required parameter 'monthlyCashFlowProfileRequestBody' is set
            if (monthlyCashFlowProfileRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'monthlyCashFlowProfileRequestBody' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfilePut");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = monthlyCashFlowProfileRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidMonthlyCashFlowProfilePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MonthlyCashFlowResponseBody>("/users/{user_guid}/monthly_cash_flow_profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMonthlyCashFlowProfilePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update monthly cash flow profile Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyCashFlowResponseBody</returns>
        public async System.Threading.Tasks.Task<MonthlyCashFlowResponseBody> UsersUserGuidMonthlyCashFlowProfilePutAsync(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody> localVarResponse = await UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfoAsync(userGuid, monthlyCashFlowProfileRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update monthly cash flow profile Use this endpoint to update the attributes of a &#x60;monthly_cash_flow_profile&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user.</param>
        /// <param name="monthlyCashFlowProfileRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyCashFlowResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MonthlyCashFlowResponseBody>> UsersUserGuidMonthlyCashFlowProfilePutWithHttpInfoAsync(string userGuid, MonthlyCashFlowProfileRequestBody monthlyCashFlowProfileRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfilePut");
            }

            // verify the required parameter 'monthlyCashFlowProfileRequestBody' is set
            if (monthlyCashFlowProfileRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'monthlyCashFlowProfileRequestBody' when calling MxPlatformApi->UsersUserGuidMonthlyCashFlowProfilePut");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = monthlyCashFlowProfileRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidMonthlyCashFlowProfilePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MonthlyCashFlowResponseBody>("/users/{user_guid}/monthly_cash_flow_profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidMonthlyCashFlowProfilePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete split transactions This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UsersUserGuidTransactionsTransactionGuidSplitDelete(string transactionGuid, string userGuid, int operationIndex = 0)
        {
            UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfo(transactionGuid, userGuid);
        }

        /// <summary>
        /// Delete split transactions This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfo(string transactionGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitDelete");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidTransactionsTransactionGuidSplitDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/transactions/{transaction_guid}/split", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidTransactionsTransactionGuidSplitDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete split transactions This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserGuidTransactionsTransactionGuidSplitDeleteAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfoAsync(transactionGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete split transactions This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction&#39;s has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionGuid">The unique id for a &#x60;transaction&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> UsersUserGuidTransactionsTransactionGuidSplitDeleteWithHttpInfoAsync(string transactionGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitDelete");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitDelete");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidTransactionsTransactionGuidSplitDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/transactions/{transaction_guid}/split", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidTransactionsTransactionGuidSplitDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create split transactions This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SplitTransactionsResponseBody</returns>
        public SplitTransactionsResponseBody UsersUserGuidTransactionsTransactionGuidSplitPost(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SplitTransactionsResponseBody> localVarResponse = UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfo(userGuid, transactionGuid, splitTransactionRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create split transactions This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SplitTransactionsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SplitTransactionsResponseBody> UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfo(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitPost");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitPost");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.Data = splitTransactionRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidTransactionsTransactionGuidSplitPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SplitTransactionsResponseBody>("/users/{user_guid}/transactions/{transaction_guid}/split", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidTransactionsTransactionGuidSplitPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create split transactions This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SplitTransactionsResponseBody</returns>
        public async System.Threading.Tasks.Task<SplitTransactionsResponseBody> UsersUserGuidTransactionsTransactionGuidSplitPostAsync(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SplitTransactionsResponseBody> localVarResponse = await UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfoAsync(userGuid, transactionGuid, splitTransactionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create split transactions This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction&#39;s &#x60;has_been_split&#x60; field will automatically be updated to true and the child transactions&#39; &#x60;parent_guid&#x60; will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can&#39;t be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction&#39;s &#x60;has_been_split&#x60; field to false. You can then re-split the parent transaction by calling Create Split Transaction again.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="transactionGuid">The unique identifier for the transaction. Defined by MX.</param>
        /// <param name="splitTransactionRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SplitTransactionsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SplitTransactionsResponseBody>> UsersUserGuidTransactionsTransactionGuidSplitPostWithHttpInfoAsync(string userGuid, string transactionGuid, SplitTransactionRequestBody? splitTransactionRequestBody = default(SplitTransactionRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitPost");
            }

            // verify the required parameter 'transactionGuid' is set
            if (transactionGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'transactionGuid' when calling MxPlatformApi->UsersUserGuidTransactionsTransactionGuidSplitPost");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(transactionGuid)); // path parameter
            localVarRequestOptions.Data = splitTransactionRequestBody;

            localVarRequestOptions.Operation = "MxPlatformApi.UsersUserGuidTransactionsTransactionGuidSplitPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SplitTransactionsResponseBody>("/users/{user_guid}/transactions/{transaction_guid}/split", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidTransactionsTransactionGuidSplitPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify member The verify endpoint begins a verification process for a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemberResponseBody</returns>
        public MemberResponseBody VerifyMember(string memberGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = VerifyMemberWithHttpInfo(memberGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify member The verify endpoint begins a verification process for a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemberResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> VerifyMemberWithHttpInfo(string memberGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->VerifyMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->VerifyMember");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.VerifyMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify member The verify endpoint begins a verification process for a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponseBody</returns>
        public async System.Threading.Tasks.Task<MemberResponseBody> VerifyMemberAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody> localVarResponse = await VerifyMemberWithHttpInfoAsync(memberGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify member The verify endpoint begins a verification process for a member.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberGuid">The unique id for a &#x60;member&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<MemberResponseBody>> VerifyMemberWithHttpInfoAsync(string memberGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberGuid' is set
            if (memberGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'memberGuid' when calling MxPlatformApi->VerifyMember");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling MxPlatformApi->VerifyMember");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("member_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(memberGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "MxPlatformApi.VerifyMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponseBody>("/users/{user_guid}/members/{member_guid}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
