/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpendingPlanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create spending plan
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanResponse</returns>
        SpendingPlanResponse CreateSpendingPlan(string userGuid, int operationIndex = 0);

        /// <summary>
        /// Create spending plan
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanResponse</returns>
        ApiResponse<SpendingPlanResponse> CreateSpendingPlanWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// Create spending plan iteration item
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        SpendingPlanIterationItemResponse CreateSpendingPlanIterationItem(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create spending plan iteration item
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        ApiResponse<SpendingPlanIterationItemResponse> CreateSpendingPlanIterationItemWithHttpInfo(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0);
        /// <summary>
        /// Delete spending plan
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSpendingPlan(string userGuid, string spendingPlanGuid, int operationIndex = 0);

        /// <summary>
        /// Delete spending plan
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSpendingPlanWithHttpInfo(string userGuid, string spendingPlanGuid, int operationIndex = 0);
        /// <summary>
        /// Delete spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSpendingPlanAccount(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0);

        /// <summary>
        /// Delete spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSpendingPlanAccountWithHttpInfo(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0);
        /// <summary>
        /// Delete spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0);

        /// <summary>
        /// Delete spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0);
        /// <summary>
        /// List spending plan accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanAccountsResponse</returns>
        SpendingPlanAccountsResponse ListSpendingPlanAccounts(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List spending plan accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanAccountsResponse</returns>
        ApiResponse<SpendingPlanAccountsResponse> ListSpendingPlanAccountsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List spending plan iteration items
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemsResponseBody</returns>
        SpendingPlanIterationItemsResponseBody ListSpendingPlanIterationItems(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List spending plan iteration items
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemsResponseBody</returns>
        ApiResponse<SpendingPlanIterationItemsResponseBody> ListSpendingPlanIterationItemsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List spending plan iterations
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationsResponse</returns>
        SpendingPlanIterationsResponse ListSpendingPlanIterations(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List spending plan iterations
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationsResponse</returns>
        ApiResponse<SpendingPlanIterationsResponse> ListSpendingPlanIterationsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// List spending plans
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plans associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlansResponseBody</returns>
        SpendingPlansResponseBody ListSpendingPlans(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// List spending plans
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plans associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlansResponseBody</returns>
        ApiResponse<SpendingPlansResponseBody> ListSpendingPlansWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Read spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanAccountResponse</returns>
        SpendingPlanAccountResponse ReadSpendingPlanAccount(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Read spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanAccountResponse</returns>
        ApiResponse<SpendingPlanAccountResponse> ReadSpendingPlanAccountWithHttpInfo(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Read a spending plan iteration
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationResponse</returns>
        SpendingPlanIterationResponse ReadSpendingPlanIteration(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Read a spending plan iteration
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationResponse</returns>
        ApiResponse<SpendingPlanIterationResponse> ReadSpendingPlanIterationWithHttpInfo(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Read a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        SpendingPlanIterationItemResponse ReadSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Read a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        ApiResponse<SpendingPlanIterationItemResponse> ReadSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Read a spending plan for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanResponse</returns>
        SpendingPlanResponse ReadSpendingPlanUser(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Read a spending plan for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanResponse</returns>
        ApiResponse<SpendingPlanResponse> ReadSpendingPlanUserWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        SpendingPlanIterationItemResponse UpdateSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Update a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        ApiResponse<SpendingPlanIterationItemResponse> UpdateSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpendingPlanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create spending plan
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanResponse> CreateSpendingPlanAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create spending plan
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanResponse>> CreateSpendingPlanWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create spending plan iteration item
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> CreateSpendingPlanIterationItemAsync(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create spending plan iteration item
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationItemResponse>> CreateSpendingPlanIterationItemWithHttpInfoAsync(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete spending plan
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSpendingPlanAsync(string userGuid, string spendingPlanGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete spending plan
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpendingPlanWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSpendingPlanAccountAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpendingPlanAccountWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List spending plan accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanAccountsResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanAccountsResponse> ListSpendingPlanAccountsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List spending plan accounts
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanAccountsResponse>> ListSpendingPlanAccountsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List spending plan iteration items
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemsResponseBody</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationItemsResponseBody> ListSpendingPlanIterationItemsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List spending plan iteration items
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationItemsResponseBody>> ListSpendingPlanIterationItemsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List spending plan iterations
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationsResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationsResponse> ListSpendingPlanIterationsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List spending plan iterations
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationsResponse>> ListSpendingPlanIterationsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List spending plans
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plans associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlansResponseBody</returns>
        System.Threading.Tasks.Task<SpendingPlansResponseBody> ListSpendingPlansAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List spending plans
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all the spending plans associated with the user.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlansResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlansResponseBody>> ListSpendingPlansWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanAccountResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanAccountResponse> ReadSpendingPlanAccountAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read spending plan account
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanAccountResponse>> ReadSpendingPlanAccountWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a spending plan iteration
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationResponse> ReadSpendingPlanIterationAsync(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a spending plan iteration
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationResponse>> ReadSpendingPlanIterationWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> ReadSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationItemResponse>> ReadSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a spending plan for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanResponse> ReadSpendingPlanUserAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a spending plan for a user
        /// </summary>
        /// <remarks>
        /// Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanResponse>> ReadSpendingPlanUserWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> UpdateSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a spending plan iteration item
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpendingPlanIterationItemResponse>> UpdateSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpendingPlanApi : ISpendingPlanApiSync, ISpendingPlanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpendingPlanApi : ISpendingPlanApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpendingPlanApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpendingPlanApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpendingPlanApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingPlanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpendingPlanApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create spending plan This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanResponse</returns>
        public SpendingPlanResponse CreateSpendingPlan(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> localVarResponse = CreateSpendingPlanWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create spending plan This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> CreateSpendingPlanWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->CreateSpendingPlan");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.CreateSpendingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpendingPlanResponse>("/users/{user_guid}/spending_plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpendingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create spending plan This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanResponse> CreateSpendingPlanAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> localVarResponse = await CreateSpendingPlanWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create spending plan This endpoint creates a new &#x60;spending_plan&#x60; for the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse>> CreateSpendingPlanWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->CreateSpendingPlan");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.CreateSpendingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SpendingPlanResponse>("/users/{user_guid}/spending_plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpendingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create spending plan iteration item This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        public SpendingPlanIterationItemResponse CreateSpendingPlanIterationItem(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = CreateSpendingPlanIterationItemWithHttpInfo(spendingPlanGuid, userGuid, spendingPlanIterationItemCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create spending plan iteration item This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> CreateSpendingPlanIterationItemWithHttpInfo(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanIterationItemCreateRequestBody' is set
            if (spendingPlanIterationItemCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanIterationItemCreateRequestBody' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = spendingPlanIterationItemCreateRequestBody;

            localVarRequestOptions.Operation = "SpendingPlanApi.CreateSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create spending plan iteration item This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> CreateSpendingPlanIterationItemAsync(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = await CreateSpendingPlanIterationItemWithHttpInfoAsync(spendingPlanGuid, userGuid, spendingPlanIterationItemCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create spending plan iteration item This endpoint creates a new &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item to be created with required parameters (planned_amount)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse>> CreateSpendingPlanIterationItemWithHttpInfoAsync(string spendingPlanGuid, string userGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanIterationItemCreateRequestBody' is set
            if (spendingPlanIterationItemCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanIterationItemCreateRequestBody' when calling SpendingPlanApi->CreateSpendingPlanIterationItem");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = spendingPlanIterationItemCreateRequestBody;

            localVarRequestOptions.Operation = "SpendingPlanApi.CreateSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSpendingPlan(string userGuid, string spendingPlanGuid, int operationIndex = 0)
        {
            DeleteSpendingPlanWithHttpInfo(userGuid, spendingPlanGuid);
        }

        /// <summary>
        /// Delete spending plan Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteSpendingPlanWithHttpInfo(string userGuid, string spendingPlanGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlan");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlan");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSpendingPlanAsync(string userGuid, string spendingPlanGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSpendingPlanWithHttpInfoAsync(userGuid, spendingPlanGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete spending plan Use this endpoint to delete a user&#39;s &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteSpendingPlanWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlan");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlan");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan account Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSpendingPlanAccount(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0)
        {
            DeleteSpendingPlanAccountWithHttpInfo(userGuid, spendingPlanGuid, spendingPlanAccountGuid);
        }

        /// <summary>
        /// Delete spending plan account Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteSpendingPlanAccountWithHttpInfo(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanAccountGuid' is set
            if (spendingPlanAccountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanAccountGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanAccountGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlanAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlanAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan account Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSpendingPlanAccountAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSpendingPlanAccountWithHttpInfoAsync(userGuid, spendingPlanGuid, spendingPlanAccountGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete spending plan account Use this endpoint to delete a &#x60;spending_plan_account&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteSpendingPlanAccountWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanAccountGuid' is set
            if (spendingPlanAccountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanAccountGuid' when calling SpendingPlanApi->DeleteSpendingPlanAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanAccountGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlanAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlanAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan iteration item Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0)
        {
            DeleteSpendingPlanIterationItemWithHttpInfo(userGuid, spendingPlanGuid, iterationItemGuid);
        }

        /// <summary>
        /// Delete spending plan iteration item Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> DeleteSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete spending plan iteration item Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSpendingPlanIterationItemWithHttpInfoAsync(userGuid, spendingPlanGuid, iterationItemGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete spending plan iteration item Use this endpoint to delete a spending plan &#x60;iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique ID for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> DeleteSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->DeleteSpendingPlanIterationItem");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter

            localVarRequestOptions.Operation = "SpendingPlanApi.DeleteSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan accounts Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanAccountsResponse</returns>
        public SpendingPlanAccountsResponse ListSpendingPlanAccounts(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountsResponse> localVarResponse = ListSpendingPlanAccountsWithHttpInfo(userGuid, spendingPlanGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan accounts Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanAccountsResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountsResponse> ListSpendingPlanAccountsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanAccounts");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanAccounts");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanAccountsResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan accounts Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanAccountsResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanAccountsResponse> ListSpendingPlanAccountsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountsResponse> localVarResponse = await ListSpendingPlanAccountsWithHttpInfoAsync(userGuid, spendingPlanGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan accounts Use this endpoint to list all the spending plan accounts associated with the spending plan.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountsResponse>> ListSpendingPlanAccountsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanAccounts");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanAccounts");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanAccountsResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan iteration items Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemsResponseBody</returns>
        public SpendingPlanIterationItemsResponseBody ListSpendingPlanIterationItems(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemsResponseBody> localVarResponse = ListSpendingPlanIterationItemsWithHttpInfo(userGuid, spendingPlanGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan iteration items Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemsResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemsResponseBody> ListSpendingPlanIterationItemsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanIterationItems");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanIterationItems");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanIterationItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanIterationItemsResponseBody>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanIterationItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan iteration items Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemsResponseBody</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationItemsResponseBody> ListSpendingPlanIterationItemsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemsResponseBody> localVarResponse = await ListSpendingPlanIterationItemsWithHttpInfoAsync(userGuid, spendingPlanGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan iteration items Use this endpoint to list all the spending plan &#x60;iteration_items&#x60; associated with the &#x60;iteration&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemsResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemsResponseBody>> ListSpendingPlanIterationItemsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanIterationItems");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanIterationItems");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanIterationItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanIterationItemsResponseBody>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanIterationItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan iterations Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationsResponse</returns>
        public SpendingPlanIterationsResponse ListSpendingPlanIterations(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationsResponse> localVarResponse = ListSpendingPlanIterationsWithHttpInfo(userGuid, spendingPlanGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan iterations Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationsResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationsResponse> ListSpendingPlanIterationsWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanIterations");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanIterations");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanIterations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanIterationsResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanIterations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plan iterations Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationsResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationsResponse> ListSpendingPlanIterationsAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationsResponse> localVarResponse = await ListSpendingPlanIterationsWithHttpInfoAsync(userGuid, spendingPlanGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plan iterations Use this endpoint to list all the spending plan &#x60;iterations&#x60; associated with the &#x60;spending_plan&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationsResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationsResponse>> ListSpendingPlanIterationsWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlanIterations");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ListSpendingPlanIterations");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlanIterations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanIterationsResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlanIterations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plans Use this endpoint to list all the spending plans associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlansResponseBody</returns>
        public SpendingPlansResponseBody ListSpendingPlans(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlansResponseBody> localVarResponse = ListSpendingPlansWithHttpInfo(userGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plans Use this endpoint to list all the spending plans associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlansResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlansResponseBody> ListSpendingPlansWithHttpInfo(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlans");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlansResponseBody>("/users/{user_guid}/spending_plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spending plans Use this endpoint to list all the spending plans associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlansResponseBody</returns>
        public async System.Threading.Tasks.Task<SpendingPlansResponseBody> ListSpendingPlansAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlansResponseBody> localVarResponse = await ListSpendingPlansWithHttpInfoAsync(userGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spending plans Use this endpoint to list all the spending plans associated with the user.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlansResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlansResponseBody>> ListSpendingPlansWithHttpInfoAsync(string userGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ListSpendingPlans");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ListSpendingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlansResponseBody>("/users/{user_guid}/spending_plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpendingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read spending plan account Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanAccountResponse</returns>
        public SpendingPlanAccountResponse ReadSpendingPlanAccount(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountResponse> localVarResponse = ReadSpendingPlanAccountWithHttpInfo(userGuid, spendingPlanGuid, spendingPlanAccountGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read spending plan account Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanAccountResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountResponse> ReadSpendingPlanAccountWithHttpInfo(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanAccountGuid' is set
            if (spendingPlanAccountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanAccountGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanAccountGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanAccountResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read spending plan account Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanAccountResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanAccountResponse> ReadSpendingPlanAccountAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountResponse> localVarResponse = await ReadSpendingPlanAccountWithHttpInfoAsync(userGuid, spendingPlanGuid, spendingPlanAccountGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read spending plan account Use this endpoint to read the attributes of a specific spending plan account according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="spendingPlanAccountGuid">The unique ID for the specified account.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanAccountResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanAccountResponse>> ReadSpendingPlanAccountWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string spendingPlanAccountGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }

            // verify the required parameter 'spendingPlanAccountGuid' is set
            if (spendingPlanAccountGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanAccountGuid' when calling SpendingPlanApi->ReadSpendingPlanAccount");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_account_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanAccountGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanAccountResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/spending_plan_accounts/{spending_plan_account_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan iteration Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationResponse</returns>
        public SpendingPlanIterationResponse ReadSpendingPlanIteration(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationResponse> localVarResponse = ReadSpendingPlanIterationWithHttpInfo(userGuid, spendingPlanGuid, iterationNumber, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan iteration Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationResponse> ReadSpendingPlanIterationWithHttpInfo(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanIteration");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanIteration");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_number", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationNumber)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanIteration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanIterationResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/{iteration_number}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanIteration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan iteration Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationResponse> ReadSpendingPlanIterationAsync(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationResponse> localVarResponse = await ReadSpendingPlanIterationWithHttpInfoAsync(userGuid, spendingPlanGuid, iterationNumber, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan iteration Use this endpoint to read the attributes of a specific spending plan &#x60;iteration&#x60; according to its &#x60;iteration_number&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationNumber">The current iteration number for the spending plan &#x60;iteration&#x60;&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationResponse>> ReadSpendingPlanIterationWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int iterationNumber, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanIteration");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanIteration");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_number", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationNumber)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanIteration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanIterationResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/{iteration_number}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanIteration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan iteration item Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        public SpendingPlanIterationItemResponse ReadSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = ReadSpendingPlanIterationItemWithHttpInfo(userGuid, spendingPlanGuid, iterationItemGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan iteration item Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> ReadSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan iteration item Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> ReadSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = await ReadSpendingPlanIterationItemWithHttpInfoAsync(userGuid, spendingPlanGuid, iterationItemGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan iteration item Use this endpoint to read the attributes of a specific spending plan &#x60;iteration_item&#x60; according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse>> ReadSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->ReadSpendingPlanIterationItem");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan for a user Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanResponse</returns>
        public SpendingPlanResponse ReadSpendingPlanUser(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> localVarResponse = ReadSpendingPlanUserWithHttpInfo(userGuid, spendingPlanGuid, page, recordsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan for a user Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> ReadSpendingPlanUserWithHttpInfo(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanUser");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanUser");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpendingPlanResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a spending plan for a user Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanResponse> ReadSpendingPlanUserAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse> localVarResponse = await ReadSpendingPlanUserWithHttpInfoAsync(userGuid, spendingPlanGuid, page, recordsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a spending plan for a user Use this endpoint to read the attributes of a specific spending plan according to its unique GUID.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="page">Specify current page. (optional)</param>
        /// <param name="recordsPerPage">Specify records per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanResponse>> ReadSpendingPlanUserWithHttpInfoAsync(string userGuid, string spendingPlanGuid, int? page = default(int?), int? recordsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->ReadSpendingPlanUser");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->ReadSpendingPlanUser");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (recordsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(MX.Platform.CSharp.Client.ClientUtils.ParameterToMultiMap("", "records_per_page", recordsPerPage));
            }

            localVarRequestOptions.Operation = "SpendingPlanApi.ReadSpendingPlanUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpendingPlanResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSpendingPlanUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a spending plan iteration item Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpendingPlanIterationItemResponse</returns>
        public SpendingPlanIterationItemResponse UpdateSpendingPlanIterationItem(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = UpdateSpendingPlanIterationItemWithHttpInfo(userGuid, spendingPlanGuid, iterationItemGuid, spendingPlanIterationItemCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a spending plan iteration item Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpendingPlanIterationItemResponse</returns>
        public MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> UpdateSpendingPlanIterationItemWithHttpInfo(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanIterationItemCreateRequestBody' is set
            if (spendingPlanIterationItemCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanIterationItemCreateRequestBody' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter
            localVarRequestOptions.Data = spendingPlanIterationItemCreateRequestBody;

            localVarRequestOptions.Operation = "SpendingPlanApi.UpdateSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a spending plan iteration item Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpendingPlanIterationItemResponse</returns>
        public async System.Threading.Tasks.Task<SpendingPlanIterationItemResponse> UpdateSpendingPlanIterationItemAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse> localVarResponse = await UpdateSpendingPlanIterationItemWithHttpInfoAsync(userGuid, spendingPlanGuid, iterationItemGuid, spendingPlanIterationItemCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a spending plan iteration item Use this endpoint to update an existing &#x60;spending_plan_iteration_item&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique id for a &#x60;user&#x60;.</param>
        /// <param name="spendingPlanGuid">The unique ID for the &#x60;spending_plan&#x60;.</param>
        /// <param name="iterationItemGuid">The unique ID for the &#x60;iteration_item&#x60;.</param>
        /// <param name="spendingPlanIterationItemCreateRequestBody">Iteration item object to be updated with required parameter (iteration_item_guid)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpendingPlanIterationItemResponse)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<SpendingPlanIterationItemResponse>> UpdateSpendingPlanIterationItemWithHttpInfoAsync(string userGuid, string spendingPlanGuid, string iterationItemGuid, SpendingPlanIterationItemCreateRequestBody spendingPlanIterationItemCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanGuid' is set
            if (spendingPlanGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'iterationItemGuid' is set
            if (iterationItemGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'iterationItemGuid' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }

            // verify the required parameter 'spendingPlanIterationItemCreateRequestBody' is set
            if (spendingPlanIterationItemCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'spendingPlanIterationItemCreateRequestBody' when calling SpendingPlanApi->UpdateSpendingPlanIterationItem");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.mx.api.v1+json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("spending_plan_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(spendingPlanGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("iteration_item_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(iterationItemGuid)); // path parameter
            localVarRequestOptions.Data = spendingPlanIterationItemCreateRequestBody;

            localVarRequestOptions.Operation = "SpendingPlanApi.UpdateSpendingPlanIterationItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SpendingPlanIterationItemResponse>("/users/{user_guid}/spending_plans/{spending_plan_guid}/iterations/current/iteration_items/{iteration_item_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSpendingPlanIterationItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
