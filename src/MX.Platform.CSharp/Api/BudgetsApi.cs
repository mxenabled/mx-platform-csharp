/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MX.Platform.CSharp.Client;
using MX.Platform.CSharp.Model;

namespace MX.Platform.CSharp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a budget
        /// </summary>
        /// <remarks>
        /// Delete a budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UsersUserGuidBudgetsBudgetGuidDelete(string userGuid, string budgetGuid, int operationIndex = 0);

        /// <summary>
        /// Delete a budget
        /// </summary>
        /// <remarks>
        /// Delete a budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfo(string userGuid, string budgetGuid, int operationIndex = 0);
        /// <summary>
        /// Read a specific budget
        /// </summary>
        /// <remarks>
        /// Read a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        BudgetResponseBody UsersUserGuidBudgetsBudgetGuidGet(string budgetGuid, string userGuid, int operationIndex = 0);

        /// <summary>
        /// Read a specific budget
        /// </summary>
        /// <remarks>
        /// Read a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidGetWithHttpInfo(string budgetGuid, string userGuid, int operationIndex = 0);
        /// <summary>
        /// Update a specific budget
        /// </summary>
        /// <remarks>
        /// Update a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        BudgetResponseBody UsersUserGuidBudgetsBudgetGuidPut(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0);

        /// <summary>
        /// Update a specific budget
        /// </summary>
        /// <remarks>
        /// Update a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidPutWithHttpInfo(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0);
        /// <summary>
        /// Auto-generate budgets
        /// </summary>
        /// <remarks>
        /// This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        BudgetResponseBody UsersUserGuidBudgetsGeneratePost(string userGuid, int operationIndex = 0);

        /// <summary>
        /// Auto-generate budgets
        /// </summary>
        /// <remarks>
        /// This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsGeneratePostWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// List all budgets
        /// </summary>
        /// <remarks>
        /// List all budgets
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        BudgetResponseBody UsersUserGuidBudgetsGet(string userGuid, int operationIndex = 0);

        /// <summary>
        /// List all budgets
        /// </summary>
        /// <remarks>
        /// List all budgets
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsGetWithHttpInfo(string userGuid, int operationIndex = 0);
        /// <summary>
        /// Create a budget
        /// </summary>
        /// <remarks>
        /// Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        BudgetResponseBody UsersUserGuidBudgetsPost(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0);

        /// <summary>
        /// Create a budget
        /// </summary>
        /// <remarks>
        /// Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsPostWithHttpInfo(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a budget
        /// </summary>
        /// <remarks>
        /// Delete a budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserGuidBudgetsBudgetGuidDeleteAsync(string userGuid, string budgetGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a budget
        /// </summary>
        /// <remarks>
        /// Delete a budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfoAsync(string userGuid, string budgetGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a specific budget
        /// </summary>
        /// <remarks>
        /// Read a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidGetAsync(string budgetGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a specific budget
        /// </summary>
        /// <remarks>
        /// Read a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsBudgetGuidGetWithHttpInfoAsync(string budgetGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a specific budget
        /// </summary>
        /// <remarks>
        /// Update a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidPutAsync(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a specific budget
        /// </summary>
        /// <remarks>
        /// Update a specific budget.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsBudgetGuidPutWithHttpInfoAsync(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Auto-generate budgets
        /// </summary>
        /// <remarks>
        /// This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsGeneratePostAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Auto-generate budgets
        /// </summary>
        /// <remarks>
        /// This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsGeneratePostWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all budgets
        /// </summary>
        /// <remarks>
        /// List all budgets
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all budgets
        /// </summary>
        /// <remarks>
        /// List all budgets
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a budget
        /// </summary>
        /// <remarks>
        /// Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsPostAsync(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a budget
        /// </summary>
        /// <remarks>
        /// Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </remarks>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsPostWithHttpInfoAsync(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetsApi : IBudgetsApiSync, IBudgetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BudgetsApi : IBudgetsApi
    {
        private MX.Platform.CSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BudgetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BudgetsApi(string basePath)
        {
            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                new MX.Platform.CSharp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BudgetsApi(MX.Platform.CSharp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MX.Platform.CSharp.Client.Configuration.MergeConfigurations(
                MX.Platform.CSharp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MX.Platform.CSharp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BudgetsApi(MX.Platform.CSharp.Client.ISynchronousClient client, MX.Platform.CSharp.Client.IAsynchronousClient asyncClient, MX.Platform.CSharp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MX.Platform.CSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MX.Platform.CSharp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Platform.CSharp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Platform.CSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a budget Delete a budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UsersUserGuidBudgetsBudgetGuidDelete(string userGuid, string budgetGuid, int operationIndex = 0)
        {
            UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfo(userGuid, budgetGuid);
        }

        /// <summary>
        /// Delete a budget Delete a budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MX.Platform.CSharp.Client.ApiResponse<Object> UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfo(string userGuid, string budgetGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidDelete");
            }

            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidDelete");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a budget Delete a budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserGuidBudgetsBudgetGuidDeleteAsync(string userGuid, string budgetGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfoAsync(userGuid, budgetGuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a budget Delete a budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<Object>> UsersUserGuidBudgetsBudgetGuidDeleteWithHttpInfoAsync(string userGuid, string budgetGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidDelete");
            }

            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidDelete");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a specific budget Read a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        public BudgetResponseBody UsersUserGuidBudgetsBudgetGuidGet(string budgetGuid, string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = UsersUserGuidBudgetsBudgetGuidGetWithHttpInfo(budgetGuid, userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a specific budget Read a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidGetWithHttpInfo(string budgetGuid, string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidGet");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BudgetResponseBody>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a specific budget Read a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        public async System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidGetAsync(string budgetGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = await UsersUserGuidBudgetsBudgetGuidGetWithHttpInfoAsync(budgetGuid, userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a specific budget Read a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsBudgetGuidGetWithHttpInfoAsync(string budgetGuid, string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidGet");
            }

            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetResponseBody>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a specific budget Update a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        public BudgetResponseBody UsersUserGuidBudgetsBudgetGuidPut(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = UsersUserGuidBudgetsBudgetGuidPutWithHttpInfo(userGuid, budgetGuid, budgetUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific budget Update a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidPutWithHttpInfo(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidPut");
            }

            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidPut");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter
            localVarRequestOptions.Data = budgetUpdateRequestBody;

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<BudgetResponseBody>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a specific budget Update a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        public async System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsBudgetGuidPutAsync(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = await UsersUserGuidBudgetsBudgetGuidPutWithHttpInfoAsync(userGuid, budgetGuid, budgetUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific budget Update a specific budget.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetGuid">The unique identifier for the budget. Defined by MX.</param>
        /// <param name="budgetUpdateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsBudgetGuidPutWithHttpInfoAsync(string userGuid, string budgetGuid, BudgetUpdateRequestBody? budgetUpdateRequestBody = default(BudgetUpdateRequestBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidPut");
            }

            // verify the required parameter 'budgetGuid' is set
            if (budgetGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetGuid' when calling BudgetsApi->UsersUserGuidBudgetsBudgetGuidPut");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("budget_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(budgetGuid)); // path parameter
            localVarRequestOptions.Data = budgetUpdateRequestBody;

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsBudgetGuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BudgetResponseBody>("/users/{user_guid}/budgets/{budget_guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsBudgetGuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Auto-generate budgets This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        public BudgetResponseBody UsersUserGuidBudgetsGeneratePost(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = UsersUserGuidBudgetsGeneratePostWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Auto-generate budgets This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsGeneratePostWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsGeneratePost");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsGeneratePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BudgetResponseBody>("/users/{user_guid}/budgets/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Auto-generate budgets This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        public async System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsGeneratePostAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = await UsersUserGuidBudgetsGeneratePostWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Auto-generate budgets This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsGeneratePostWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsGeneratePost");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsGeneratePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BudgetResponseBody>("/users/{user_guid}/budgets/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budgets List all budgets
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        public BudgetResponseBody UsersUserGuidBudgetsGet(string userGuid, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = UsersUserGuidBudgetsGetWithHttpInfo(userGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budgets List all budgets
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsGetWithHttpInfo(string userGuid, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsGet");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BudgetResponseBody>("/users/{user_guid}/budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budgets List all budgets
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        public async System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsGetAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = await UsersUserGuidBudgetsGetWithHttpInfoAsync(userGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budgets List all budgets
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsGetWithHttpInfoAsync(string userGuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsGet");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetResponseBody>("/users/{user_guid}/budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a budget Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetResponseBody</returns>
        public BudgetResponseBody UsersUserGuidBudgetsPost(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0)
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = UsersUserGuidBudgetsPostWithHttpInfo(userGuid, budgetCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a budget Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetResponseBody</returns>
        public MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> UsersUserGuidBudgetsPostWithHttpInfo(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsPost");
            }

            // verify the required parameter 'budgetCreateRequestBody' is set
            if (budgetCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetCreateRequestBody' when calling BudgetsApi->UsersUserGuidBudgetsPost");
            }

            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = budgetCreateRequestBody;

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BudgetResponseBody>("/users/{user_guid}/budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a budget Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetResponseBody</returns>
        public async System.Threading.Tasks.Task<BudgetResponseBody> UsersUserGuidBudgetsPostAsync(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody> localVarResponse = await UsersUserGuidBudgetsPostWithHttpInfoAsync(userGuid, budgetCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a budget Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
        /// </summary>
        /// <exception cref="MX.Platform.CSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGuid">The unique identifier for the user. Defined by MX.</param>
        /// <param name="budgetCreateRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetResponseBody)</returns>
        public async System.Threading.Tasks.Task<MX.Platform.CSharp.Client.ApiResponse<BudgetResponseBody>> UsersUserGuidBudgetsPostWithHttpInfoAsync(string userGuid, BudgetCreateRequestBody budgetCreateRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGuid' is set
            if (userGuid == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'userGuid' when calling BudgetsApi->UsersUserGuidBudgetsPost");
            }

            // verify the required parameter 'budgetCreateRequestBody' is set
            if (budgetCreateRequestBody == null)
            {
                throw new MX.Platform.CSharp.Client.ApiException(400, "Missing required parameter 'budgetCreateRequestBody' when calling BudgetsApi->UsersUserGuidBudgetsPost");
            }


            MX.Platform.CSharp.Client.RequestOptions localVarRequestOptions = new MX.Platform.CSharp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MX.Platform.CSharp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_guid", MX.Platform.CSharp.Client.ClientUtils.ParameterToString(userGuid)); // path parameter
            localVarRequestOptions.Data = budgetCreateRequestBody;

            localVarRequestOptions.Operation = "BudgetsApi.UsersUserGuidBudgetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + MX.Platform.CSharp.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BudgetResponseBody>("/users/{user_guid}/budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserGuidBudgetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
