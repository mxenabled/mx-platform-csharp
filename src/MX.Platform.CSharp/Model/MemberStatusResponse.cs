/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// MemberStatusResponse
    /// </summary>
    [DataContract(Name = "MemberStatusResponse")]
    public partial class MemberStatusResponse : IEquatable<MemberStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberStatusResponse" /> class.
        /// </summary>
        /// <param name="aggregatedAt">aggregatedAt.</param>
        /// <param name="challenges">challenges.</param>
        /// <param name="connectionStatus">connectionStatus.</param>
        /// <param name="guid">guid.</param>
        /// <param name="hasProcessedAccounts">hasProcessedAccounts.</param>
        /// <param name="hasProcessedTransactions">hasProcessedTransactions.</param>
        /// <param name="isAuthenticated">isAuthenticated.</param>
        /// <param name="isBeingAggregated">isBeingAggregated.</param>
        /// <param name="successfullyAggregatedAt">successfullyAggregatedAt.</param>
        public MemberStatusResponse(string aggregatedAt = default(string), List<ChallengeResponse> challenges = default(List<ChallengeResponse>), string connectionStatus = default(string), string guid = default(string), bool? hasProcessedAccounts = default(bool?), bool? hasProcessedTransactions = default(bool?), bool? isAuthenticated = default(bool?), bool? isBeingAggregated = default(bool?), string successfullyAggregatedAt = default(string))
        {
            this.AggregatedAt = aggregatedAt;
            this.Challenges = challenges;
            this.ConnectionStatus = connectionStatus;
            this.Guid = guid;
            this.HasProcessedAccounts = hasProcessedAccounts;
            this.HasProcessedTransactions = hasProcessedTransactions;
            this.IsAuthenticated = isAuthenticated;
            this.IsBeingAggregated = isBeingAggregated;
            this.SuccessfullyAggregatedAt = successfullyAggregatedAt;
        }

        /// <summary>
        /// Gets or Sets AggregatedAt
        /// </summary>
        [DataMember(Name = "aggregated_at", EmitDefaultValue = true)]
        public string AggregatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Challenges
        /// </summary>
        [DataMember(Name = "challenges", EmitDefaultValue = false)]
        public List<ChallengeResponse> Challenges { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionStatus
        /// </summary>
        [DataMember(Name = "connection_status", EmitDefaultValue = true)]
        public string ConnectionStatus { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name = "guid", EmitDefaultValue = false)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets HasProcessedAccounts
        /// </summary>
        [DataMember(Name = "has_processed_accounts", EmitDefaultValue = true)]
        public bool? HasProcessedAccounts { get; set; }

        /// <summary>
        /// Gets or Sets HasProcessedTransactions
        /// </summary>
        [DataMember(Name = "has_processed_transactions", EmitDefaultValue = true)]
        public bool? HasProcessedTransactions { get; set; }

        /// <summary>
        /// Gets or Sets IsAuthenticated
        /// </summary>
        [DataMember(Name = "is_authenticated", EmitDefaultValue = true)]
        public bool? IsAuthenticated { get; set; }

        /// <summary>
        /// Gets or Sets IsBeingAggregated
        /// </summary>
        [DataMember(Name = "is_being_aggregated", EmitDefaultValue = true)]
        public bool? IsBeingAggregated { get; set; }

        /// <summary>
        /// Gets or Sets SuccessfullyAggregatedAt
        /// </summary>
        [DataMember(Name = "successfully_aggregated_at", EmitDefaultValue = true)]
        public string SuccessfullyAggregatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberStatusResponse {\n");
            sb.Append("  AggregatedAt: ").Append(AggregatedAt).Append("\n");
            sb.Append("  Challenges: ").Append(Challenges).Append("\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  HasProcessedAccounts: ").Append(HasProcessedAccounts).Append("\n");
            sb.Append("  HasProcessedTransactions: ").Append(HasProcessedTransactions).Append("\n");
            sb.Append("  IsAuthenticated: ").Append(IsAuthenticated).Append("\n");
            sb.Append("  IsBeingAggregated: ").Append(IsBeingAggregated).Append("\n");
            sb.Append("  SuccessfullyAggregatedAt: ").Append(SuccessfullyAggregatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberStatusResponse);
        }

        /// <summary>
        /// Returns true if MemberStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AggregatedAt == input.AggregatedAt ||
                    (this.AggregatedAt != null &&
                    this.AggregatedAt.Equals(input.AggregatedAt))
                ) && 
                (
                    this.Challenges == input.Challenges ||
                    this.Challenges != null &&
                    input.Challenges != null &&
                    this.Challenges.SequenceEqual(input.Challenges)
                ) && 
                (
                    this.ConnectionStatus == input.ConnectionStatus ||
                    (this.ConnectionStatus != null &&
                    this.ConnectionStatus.Equals(input.ConnectionStatus))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.HasProcessedAccounts == input.HasProcessedAccounts ||
                    (this.HasProcessedAccounts != null &&
                    this.HasProcessedAccounts.Equals(input.HasProcessedAccounts))
                ) && 
                (
                    this.HasProcessedTransactions == input.HasProcessedTransactions ||
                    (this.HasProcessedTransactions != null &&
                    this.HasProcessedTransactions.Equals(input.HasProcessedTransactions))
                ) && 
                (
                    this.IsAuthenticated == input.IsAuthenticated ||
                    (this.IsAuthenticated != null &&
                    this.IsAuthenticated.Equals(input.IsAuthenticated))
                ) && 
                (
                    this.IsBeingAggregated == input.IsBeingAggregated ||
                    (this.IsBeingAggregated != null &&
                    this.IsBeingAggregated.Equals(input.IsBeingAggregated))
                ) && 
                (
                    this.SuccessfullyAggregatedAt == input.SuccessfullyAggregatedAt ||
                    (this.SuccessfullyAggregatedAt != null &&
                    this.SuccessfullyAggregatedAt.Equals(input.SuccessfullyAggregatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregatedAt != null)
                    hashCode = hashCode * 59 + this.AggregatedAt.GetHashCode();
                if (this.Challenges != null)
                    hashCode = hashCode * 59 + this.Challenges.GetHashCode();
                if (this.ConnectionStatus != null)
                    hashCode = hashCode * 59 + this.ConnectionStatus.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.HasProcessedAccounts != null)
                    hashCode = hashCode * 59 + this.HasProcessedAccounts.GetHashCode();
                if (this.HasProcessedTransactions != null)
                    hashCode = hashCode * 59 + this.HasProcessedTransactions.GetHashCode();
                if (this.IsAuthenticated != null)
                    hashCode = hashCode * 59 + this.IsAuthenticated.GetHashCode();
                if (this.IsBeingAggregated != null)
                    hashCode = hashCode * 59 + this.IsBeingAggregated.GetHashCode();
                if (this.SuccessfullyAggregatedAt != null)
                    hashCode = hashCode * 59 + this.SuccessfullyAggregatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
