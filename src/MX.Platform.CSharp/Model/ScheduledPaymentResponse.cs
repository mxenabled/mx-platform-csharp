/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// ScheduledPaymentResponse
    /// </summary>
    [DataContract(Name = "ScheduledPaymentResponse")]
    public partial class ScheduledPaymentResponse : IEquatable<ScheduledPaymentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledPaymentResponse" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="description">description.</param>
        /// <param name="guid">guid.</param>
        /// <param name="isCompleted">isCompleted.</param>
        /// <param name="isRecurring">isRecurring.</param>
        /// <param name="merchantGuid">merchantGuid.</param>
        /// <param name="occursOn">occursOn.</param>
        /// <param name="recurrenceDay">recurrenceDay.</param>
        /// <param name="recurrenceType">recurrenceType.</param>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userGuid">userGuid.</param>
        public ScheduledPaymentResponse(decimal amount = default(decimal), string createdAt = default(string), string description = default(string), string guid = default(string), bool isCompleted = default(bool), bool isRecurring = default(bool), string merchantGuid = default(string), string occursOn = default(string), int recurrenceDay = default(int), string recurrenceType = default(string), string transactionType = default(string), string updatedAt = default(string), string userGuid = default(string))
        {
            this.Amount = amount;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.Guid = guid;
            this.IsCompleted = isCompleted;
            this.IsRecurring = isRecurring;
            this.MerchantGuid = merchantGuid;
            this.OccursOn = occursOn;
            this.RecurrenceDay = recurrenceDay;
            this.RecurrenceType = recurrenceType;
            this.TransactionType = transactionType;
            this.UpdatedAt = updatedAt;
            this.UserGuid = userGuid;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        /// <example>13.54</example>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2023-04-27T23:14:16Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>Netflix</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        /// <example>SPA-c76e4a85-b2c4-4335-82b7-8f8b8f28c35a</example>
        [DataMember(Name = "guid", EmitDefaultValue = false)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets IsCompleted
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "is_completed", EmitDefaultValue = true)]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets IsRecurring
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "is_recurring", EmitDefaultValue = true)]
        public bool IsRecurring { get; set; }

        /// <summary>
        /// Gets or Sets MerchantGuid
        /// </summary>
        /// <example>MCH-b8a2624c-2176-59ec-c150-37854bc38aa8</example>
        [DataMember(Name = "merchant_guid", EmitDefaultValue = false)]
        public string MerchantGuid { get; set; }

        /// <summary>
        /// Gets or Sets OccursOn
        /// </summary>
        /// <example>2022-01-15</example>
        [DataMember(Name = "occurs_on", EmitDefaultValue = false)]
        public string OccursOn { get; set; }

        /// <summary>
        /// Gets or Sets RecurrenceDay
        /// </summary>
        /// <example>15</example>
        [DataMember(Name = "recurrence_day", EmitDefaultValue = false)]
        public int RecurrenceDay { get; set; }

        /// <summary>
        /// Gets or Sets RecurrenceType
        /// </summary>
        /// <example>EVERY_MONTH</example>
        [DataMember(Name = "recurrence_type", EmitDefaultValue = false)]
        public string RecurrenceType { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        /// <example>DEBIT</example>
        [DataMember(Name = "transaction_type", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2023-04-27T23:14:16Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        /// <example>USR-72086f59-6684-4adf-8f29-c4d32db43cd7</example>
        [DataMember(Name = "user_guid", EmitDefaultValue = false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduledPaymentResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  MerchantGuid: ").Append(MerchantGuid).Append("\n");
            sb.Append("  OccursOn: ").Append(OccursOn).Append("\n");
            sb.Append("  RecurrenceDay: ").Append(RecurrenceDay).Append("\n");
            sb.Append("  RecurrenceType: ").Append(RecurrenceType).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduledPaymentResponse);
        }

        /// <summary>
        /// Returns true if ScheduledPaymentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduledPaymentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduledPaymentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.IsCompleted == input.IsCompleted ||
                    this.IsCompleted.Equals(input.IsCompleted)
                ) && 
                (
                    this.IsRecurring == input.IsRecurring ||
                    this.IsRecurring.Equals(input.IsRecurring)
                ) && 
                (
                    this.MerchantGuid == input.MerchantGuid ||
                    (this.MerchantGuid != null &&
                    this.MerchantGuid.Equals(input.MerchantGuid))
                ) && 
                (
                    this.OccursOn == input.OccursOn ||
                    (this.OccursOn != null &&
                    this.OccursOn.Equals(input.OccursOn))
                ) && 
                (
                    this.RecurrenceDay == input.RecurrenceDay ||
                    this.RecurrenceDay.Equals(input.RecurrenceDay)
                ) && 
                (
                    this.RecurrenceType == input.RecurrenceType ||
                    (this.RecurrenceType != null &&
                    this.RecurrenceType.Equals(input.RecurrenceType))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Guid != null)
                {
                    hashCode = (hashCode * 59) + this.Guid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCompleted.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRecurring.GetHashCode();
                if (this.MerchantGuid != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantGuid.GetHashCode();
                }
                if (this.OccursOn != null)
                {
                    hashCode = (hashCode * 59) + this.OccursOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecurrenceDay.GetHashCode();
                if (this.RecurrenceType != null)
                {
                    hashCode = (hashCode * 59) + this.RecurrenceType.GetHashCode();
                }
                if (this.TransactionType != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UserGuid != null)
                {
                    hashCode = (hashCode * 59) + this.UserGuid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
