/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// MemberResponse
    /// </summary>
    [DataContract(Name = "MemberResponse")]
    public partial class MemberResponse : IEquatable<MemberResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberResponse" /> class.
        /// </summary>
        /// <param name="aggregatedAt">aggregatedAt.</param>
        /// <param name="connectionStatus">connectionStatus.</param>
        /// <param name="guid">guid.</param>
        /// <param name="id">id.</param>
        /// <param name="institutionCode">institutionCode.</param>
        /// <param name="isBeingAggregated">isBeingAggregated.</param>
        /// <param name="isManagedByUser">isManagedByUser.</param>
        /// <param name="isOauth">isOauth.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name.</param>
        /// <param name="oauthWindowUri">oauthWindowUri.</param>
        /// <param name="successfullyAggregatedAt">successfullyAggregatedAt.</param>
        /// <param name="userGuid">userGuid.</param>
        /// <param name="userId">userId.</param>
        public MemberResponse(string aggregatedAt = default(string), string connectionStatus = default(string), string guid = default(string), string id = default(string), string institutionCode = default(string), bool? isBeingAggregated = default(bool?), bool? isManagedByUser = default(bool?), bool? isOauth = default(bool?), string metadata = default(string), string name = default(string), string oauthWindowUri = default(string), string successfullyAggregatedAt = default(string), string userGuid = default(string), string userId = default(string))
        {
            this.AggregatedAt = aggregatedAt;
            this.ConnectionStatus = connectionStatus;
            this.Guid = guid;
            this.Id = id;
            this.InstitutionCode = institutionCode;
            this.IsBeingAggregated = isBeingAggregated;
            this.IsManagedByUser = isManagedByUser;
            this.IsOauth = isOauth;
            this.Metadata = metadata;
            this.Name = name;
            this.OauthWindowUri = oauthWindowUri;
            this.SuccessfullyAggregatedAt = successfullyAggregatedAt;
            this.UserGuid = userGuid;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets AggregatedAt
        /// </summary>
        [DataMember(Name = "aggregated_at", EmitDefaultValue = true)]
        public string AggregatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionStatus
        /// </summary>
        [DataMember(Name = "connection_status", EmitDefaultValue = true)]
        public string ConnectionStatus { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name = "guid", EmitDefaultValue = false)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InstitutionCode
        /// </summary>
        [DataMember(Name = "institution_code", EmitDefaultValue = true)]
        public string InstitutionCode { get; set; }

        /// <summary>
        /// Gets or Sets IsBeingAggregated
        /// </summary>
        [DataMember(Name = "is_being_aggregated", EmitDefaultValue = true)]
        public bool? IsBeingAggregated { get; set; }

        /// <summary>
        /// Gets or Sets IsManagedByUser
        /// </summary>
        [DataMember(Name = "is_managed_by_user", EmitDefaultValue = true)]
        public bool? IsManagedByUser { get; set; }

        /// <summary>
        /// Gets or Sets IsOauth
        /// </summary>
        [DataMember(Name = "is_oauth", EmitDefaultValue = true)]
        public bool? IsOauth { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OauthWindowUri
        /// </summary>
        [DataMember(Name = "oauth_window_uri", EmitDefaultValue = true)]
        public string OauthWindowUri { get; set; }

        /// <summary>
        /// Gets or Sets SuccessfullyAggregatedAt
        /// </summary>
        [DataMember(Name = "successfully_aggregated_at", EmitDefaultValue = true)]
        public string SuccessfullyAggregatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        [DataMember(Name = "user_guid", EmitDefaultValue = false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberResponse {\n");
            sb.Append("  AggregatedAt: ").Append(AggregatedAt).Append("\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstitutionCode: ").Append(InstitutionCode).Append("\n");
            sb.Append("  IsBeingAggregated: ").Append(IsBeingAggregated).Append("\n");
            sb.Append("  IsManagedByUser: ").Append(IsManagedByUser).Append("\n");
            sb.Append("  IsOauth: ").Append(IsOauth).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OauthWindowUri: ").Append(OauthWindowUri).Append("\n");
            sb.Append("  SuccessfullyAggregatedAt: ").Append(SuccessfullyAggregatedAt).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberResponse);
        }

        /// <summary>
        /// Returns true if MemberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AggregatedAt == input.AggregatedAt ||
                    (this.AggregatedAt != null &&
                    this.AggregatedAt.Equals(input.AggregatedAt))
                ) && 
                (
                    this.ConnectionStatus == input.ConnectionStatus ||
                    (this.ConnectionStatus != null &&
                    this.ConnectionStatus.Equals(input.ConnectionStatus))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstitutionCode == input.InstitutionCode ||
                    (this.InstitutionCode != null &&
                    this.InstitutionCode.Equals(input.InstitutionCode))
                ) && 
                (
                    this.IsBeingAggregated == input.IsBeingAggregated ||
                    (this.IsBeingAggregated != null &&
                    this.IsBeingAggregated.Equals(input.IsBeingAggregated))
                ) && 
                (
                    this.IsManagedByUser == input.IsManagedByUser ||
                    (this.IsManagedByUser != null &&
                    this.IsManagedByUser.Equals(input.IsManagedByUser))
                ) && 
                (
                    this.IsOauth == input.IsOauth ||
                    (this.IsOauth != null &&
                    this.IsOauth.Equals(input.IsOauth))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OauthWindowUri == input.OauthWindowUri ||
                    (this.OauthWindowUri != null &&
                    this.OauthWindowUri.Equals(input.OauthWindowUri))
                ) && 
                (
                    this.SuccessfullyAggregatedAt == input.SuccessfullyAggregatedAt ||
                    (this.SuccessfullyAggregatedAt != null &&
                    this.SuccessfullyAggregatedAt.Equals(input.SuccessfullyAggregatedAt))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregatedAt != null)
                    hashCode = hashCode * 59 + this.AggregatedAt.GetHashCode();
                if (this.ConnectionStatus != null)
                    hashCode = hashCode * 59 + this.ConnectionStatus.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstitutionCode != null)
                    hashCode = hashCode * 59 + this.InstitutionCode.GetHashCode();
                if (this.IsBeingAggregated != null)
                    hashCode = hashCode * 59 + this.IsBeingAggregated.GetHashCode();
                if (this.IsManagedByUser != null)
                    hashCode = hashCode * 59 + this.IsManagedByUser.GetHashCode();
                if (this.IsOauth != null)
                    hashCode = hashCode * 59 + this.IsOauth.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OauthWindowUri != null)
                    hashCode = hashCode * 59 + this.OauthWindowUri.GetHashCode();
                if (this.SuccessfullyAggregatedAt != null)
                    hashCode = hashCode * 59 + this.SuccessfullyAggregatedAt.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
