/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// BudgetResponse
    /// </summary>
    [DataContract(Name = "BudgetResponse")]
    public partial class BudgetResponse : IEquatable<BudgetResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetResponse" /> class.
        /// </summary>
        /// <param name="amount">A goal amount set by the user for a category&#39;s transaction total during a month..</param>
        /// <param name="categoryGuid">Unique identifier for the budget category. Defined by MX..</param>
        /// <param name="createdAt">Date and time the budget was created, represented in ISO 8601 format with timestamp..</param>
        /// <param name="guid">Unique identifier for the budget. Defined by MX..</param>
        /// <param name="isExceeded">If the budget has been exceeded, this field will be true. Otherwise, this field will be false..</param>
        /// <param name="isOffTrack">If the budget is off track, this field will be true. Otherwise, this field will be false..</param>
        /// <param name="metadata">Additional information a partner can store on the budget..</param>
        /// <param name="name">The name of the budget that is visible to the user (ie \&quot;Food\&quot;, \&quot;Bills\&quot;, \&quot;Entertainment\&quot;, etc)..</param>
        /// <param name="offTrackPercentage">The percentage amount of off track spending. (Deprecated)..</param>
        /// <param name="parentGuid">Unique identifier for the parent budget. Defined by MX..</param>
        /// <param name="percentSpent">The percentage of a budget that has been spent during the current calendar month Calculated as the transaction total divided by the amount and then multiplied by 100.A value of zero will be returned when &#x60;amount&#x60; is zero..</param>
        /// <param name="projectedSpending">The projected amount of spending for the budget..</param>
        /// <param name="revision">The revision number of this budget record..</param>
        /// <param name="transactionTotal">The cumulative amount of all transactions under the budget..</param>
        /// <param name="updatedAt">Date and time the budget was updated, represented in ISO 8601 format with timestamp..</param>
        /// <param name="userGuid">Unique identifier for the user. Defined by MX..</param>
        public BudgetResponse(decimal amount = default(decimal), string categoryGuid = default(string), string createdAt = default(string), string guid = default(string), bool isExceeded = default(bool), bool isOffTrack = default(bool), string metadata = default(string), string name = default(string), decimal? offTrackPercentage = default(decimal?), string parentGuid = default(string), decimal? percentSpent = default(decimal?), decimal projectedSpending = default(decimal), int revision = default(int), Object transactionTotal = default(Object), Object updatedAt = default(Object), Object userGuid = default(Object))
        {
            this.Amount = amount;
            this.CategoryGuid = categoryGuid;
            this.CreatedAt = createdAt;
            this.Guid = guid;
            this.IsExceeded = isExceeded;
            this.IsOffTrack = isOffTrack;
            this.Metadata = metadata;
            this.Name = name;
            this.OffTrackPercentage = offTrackPercentage;
            this.ParentGuid = parentGuid;
            this.PercentSpent = percentSpent;
            this.ProjectedSpending = projectedSpending;
            this.Revision = revision;
            this.TransactionTotal = transactionTotal;
            this.UpdatedAt = updatedAt;
            this.UserGuid = userGuid;
        }

        /// <summary>
        /// A goal amount set by the user for a category&#39;s transaction total during a month.
        /// </summary>
        /// <value>A goal amount set by the user for a category&#39;s transaction total during a month.</value>
        /// <example>153.0</example>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Unique identifier for the budget category. Defined by MX.
        /// </summary>
        /// <value>Unique identifier for the budget category. Defined by MX.</value>
        /// <example>CAT-bd56d35a-a9a7-6e10-66c1-5b9cc1b6c81a</example>
        [DataMember(Name = "category_guid", EmitDefaultValue = false)]
        public string CategoryGuid { get; set; }

        /// <summary>
        /// Date and time the budget was created, represented in ISO 8601 format with timestamp.
        /// </summary>
        /// <value>Date and time the budget was created, represented in ISO 8601 format with timestamp.</value>
        /// <example>2018-10-18T19:51:26+00:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier for the budget. Defined by MX.
        /// </summary>
        /// <value>Unique identifier for the budget. Defined by MX.</value>
        /// <example>BGT-6ca0e3ef-c65e-4655-8b5a-275a3c19c21d</example>
        [DataMember(Name = "guid", EmitDefaultValue = false)]
        public string Guid { get; set; }

        /// <summary>
        /// If the budget has been exceeded, this field will be true. Otherwise, this field will be false.
        /// </summary>
        /// <value>If the budget has been exceeded, this field will be true. Otherwise, this field will be false.</value>
        /// <example>true</example>
        [DataMember(Name = "is_exceeded", EmitDefaultValue = true)]
        public bool IsExceeded { get; set; }

        /// <summary>
        /// If the budget is off track, this field will be true. Otherwise, this field will be false.
        /// </summary>
        /// <value>If the budget is off track, this field will be true. Otherwise, this field will be false.</value>
        /// <example>true</example>
        [DataMember(Name = "is_off_track", EmitDefaultValue = true)]
        public bool IsOffTrack { get; set; }

        /// <summary>
        /// Additional information a partner can store on the budget.
        /// </summary>
        /// <value>Additional information a partner can store on the budget.</value>
        /// <example>some metadata</example>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// The name of the budget that is visible to the user (ie \&quot;Food\&quot;, \&quot;Bills\&quot;, \&quot;Entertainment\&quot;, etc).
        /// </summary>
        /// <value>The name of the budget that is visible to the user (ie \&quot;Food\&quot;, \&quot;Bills\&quot;, \&quot;Entertainment\&quot;, etc).</value>
        /// <example>Food &amp; Dining</example>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The percentage amount of off track spending. (Deprecated).
        /// </summary>
        /// <value>The percentage amount of off track spending. (Deprecated).</value>
        [DataMember(Name = "off_track_percentage", EmitDefaultValue = true)]
        public decimal? OffTrackPercentage { get; set; }

        /// <summary>
        /// Unique identifier for the parent budget. Defined by MX.
        /// </summary>
        /// <value>Unique identifier for the parent budget. Defined by MX.</value>
        [DataMember(Name = "parent_guid", EmitDefaultValue = true)]
        public string ParentGuid { get; set; }

        /// <summary>
        /// The percentage of a budget that has been spent during the current calendar month Calculated as the transaction total divided by the amount and then multiplied by 100.A value of zero will be returned when &#x60;amount&#x60; is zero.
        /// </summary>
        /// <value>The percentage of a budget that has been spent during the current calendar month Calculated as the transaction total divided by the amount and then multiplied by 100.A value of zero will be returned when &#x60;amount&#x60; is zero.</value>
        /// <example>1276.34</example>
        [DataMember(Name = "percent_spent", EmitDefaultValue = true)]
        public decimal? PercentSpent { get; set; }

        /// <summary>
        /// The projected amount of spending for the budget.
        /// </summary>
        /// <value>The projected amount of spending for the budget.</value>
        /// <example>3562.4</example>
        [DataMember(Name = "projected_spending", EmitDefaultValue = false)]
        public decimal ProjectedSpending { get; set; }

        /// <summary>
        /// The revision number of this budget record.
        /// </summary>
        /// <value>The revision number of this budget record.</value>
        /// <example>561</example>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// The cumulative amount of all transactions under the budget.
        /// </summary>
        /// <value>The cumulative amount of all transactions under the budget.</value>
        /// <example>1952.8</example>
        [DataMember(Name = "transaction_total", EmitDefaultValue = true)]
        public Object TransactionTotal { get; set; }

        /// <summary>
        /// Date and time the budget was updated, represented in ISO 8601 format with timestamp.
        /// </summary>
        /// <value>Date and time the budget was updated, represented in ISO 8601 format with timestamp.</value>
        /// <example>2022-06-14T21:17:11+00:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public Object UpdatedAt { get; set; }

        /// <summary>
        /// Unique identifier for the user. Defined by MX.
        /// </summary>
        /// <value>Unique identifier for the user. Defined by MX.</value>
        /// <example>USR-11141024-90b3-1bce-cac9-c06ced52ab4c</example>
        [DataMember(Name = "user_guid", EmitDefaultValue = true)]
        public Object UserGuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetResponse {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CategoryGuid: ").Append(CategoryGuid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  IsExceeded: ").Append(IsExceeded).Append("\n");
            sb.Append("  IsOffTrack: ").Append(IsOffTrack).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OffTrackPercentage: ").Append(OffTrackPercentage).Append("\n");
            sb.Append("  ParentGuid: ").Append(ParentGuid).Append("\n");
            sb.Append("  PercentSpent: ").Append(PercentSpent).Append("\n");
            sb.Append("  ProjectedSpending: ").Append(ProjectedSpending).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  TransactionTotal: ").Append(TransactionTotal).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BudgetResponse);
        }

        /// <summary>
        /// Returns true if BudgetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BudgetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BudgetResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CategoryGuid == input.CategoryGuid ||
                    (this.CategoryGuid != null &&
                    this.CategoryGuid.Equals(input.CategoryGuid))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.IsExceeded == input.IsExceeded ||
                    this.IsExceeded.Equals(input.IsExceeded)
                ) && 
                (
                    this.IsOffTrack == input.IsOffTrack ||
                    this.IsOffTrack.Equals(input.IsOffTrack)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OffTrackPercentage == input.OffTrackPercentage ||
                    (this.OffTrackPercentage != null &&
                    this.OffTrackPercentage.Equals(input.OffTrackPercentage))
                ) && 
                (
                    this.ParentGuid == input.ParentGuid ||
                    (this.ParentGuid != null &&
                    this.ParentGuid.Equals(input.ParentGuid))
                ) && 
                (
                    this.PercentSpent == input.PercentSpent ||
                    (this.PercentSpent != null &&
                    this.PercentSpent.Equals(input.PercentSpent))
                ) && 
                (
                    this.ProjectedSpending == input.ProjectedSpending ||
                    this.ProjectedSpending.Equals(input.ProjectedSpending)
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.TransactionTotal == input.TransactionTotal ||
                    (this.TransactionTotal != null &&
                    this.TransactionTotal.Equals(input.TransactionTotal))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.CategoryGuid != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryGuid.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Guid != null)
                {
                    hashCode = (hashCode * 59) + this.Guid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsExceeded.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOffTrack.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OffTrackPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.OffTrackPercentage.GetHashCode();
                }
                if (this.ParentGuid != null)
                {
                    hashCode = (hashCode * 59) + this.ParentGuid.GetHashCode();
                }
                if (this.PercentSpent != null)
                {
                    hashCode = (hashCode * 59) + this.PercentSpent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectedSpending.GetHashCode();
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                if (this.TransactionTotal != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionTotal.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UserGuid != null)
                {
                    hashCode = (hashCode * 59) + this.UserGuid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
