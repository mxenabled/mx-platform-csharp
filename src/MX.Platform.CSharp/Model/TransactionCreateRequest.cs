/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// TransactionCreateRequest
    /// </summary>
    [DataContract(Name = "TransactionCreateRequest")]
    public partial class TransactionCreateRequest : IEquatable<TransactionCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionCreateRequest" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">The type of transaction, which must be CREDIT or DEBIT. See Transaction Fields for more information. (required).</param>
        /// <param name="categoryGuid">Unique identifier of the category..</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="hasBeenViewed">hasBeenViewed.</param>
        /// <param name="isHidden">isHidden.</param>
        /// <param name="isInternational">isInternational.</param>
        /// <param name="memo">memo.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="skipWebhook">When set to true, this parameter will prevent a webhook from being triggered by the request..</param>
        public TransactionCreateRequest(decimal amount = default(decimal), string date = default(string), string description = default(string), string type = default(string), string categoryGuid = default(string), string currencyCode = default(string), bool hasBeenViewed = default(bool), bool isHidden = default(bool), bool isInternational = default(bool), string memo = default(string), string metadata = default(string), bool skipWebhook = default(bool))
        {
            this.Amount = amount;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for TransactionCreateRequest and cannot be null");
            }
            this.Date = date;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TransactionCreateRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TransactionCreateRequest and cannot be null");
            }
            this.Type = type;
            this.CategoryGuid = categoryGuid;
            this.CurrencyCode = currencyCode;
            this.HasBeenViewed = hasBeenViewed;
            this.IsHidden = isHidden;
            this.IsInternational = isInternational;
            this.Memo = memo;
            this.Metadata = metadata;
            this.SkipWebhook = skipWebhook;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        /// <example>61.11</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /// <example>2016-10-06</example>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>Whole foods</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of transaction, which must be CREDIT or DEBIT. See Transaction Fields for more information.
        /// </summary>
        /// <value>The type of transaction, which must be CREDIT or DEBIT. See Transaction Fields for more information.</value>
        /// <example>DEBIT</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Unique identifier of the category.
        /// </summary>
        /// <value>Unique identifier of the category.</value>
        /// <example>CAT-b6d61a19-30a7-e852-2703-bdfb4072289e</example>
        [DataMember(Name = "category_guid", EmitDefaultValue = false)]
        public string CategoryGuid { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        /// <example>USD</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets HasBeenViewed
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "has_been_viewed", EmitDefaultValue = true)]
        public bool HasBeenViewed { get; set; }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "is_hidden", EmitDefaultValue = true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets IsInternational
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "is_international", EmitDefaultValue = true)]
        public bool IsInternational { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        /// <example>This is a memo</example>
        [DataMember(Name = "memo", EmitDefaultValue = false)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        /// <example>some metadata</example>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// When set to true, this parameter will prevent a webhook from being triggered by the request.
        /// </summary>
        /// <value>When set to true, this parameter will prevent a webhook from being triggered by the request.</value>
        /// <example>true</example>
        [DataMember(Name = "skip_webhook", EmitDefaultValue = true)]
        public bool SkipWebhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionCreateRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CategoryGuid: ").Append(CategoryGuid).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  HasBeenViewed: ").Append(HasBeenViewed).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsInternational: ").Append(IsInternational).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SkipWebhook: ").Append(SkipWebhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionCreateRequest);
        }

        /// <summary>
        /// Returns true if TransactionCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CategoryGuid == input.CategoryGuid ||
                    (this.CategoryGuid != null &&
                    this.CategoryGuid.Equals(input.CategoryGuid))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.HasBeenViewed == input.HasBeenViewed ||
                    this.HasBeenViewed.Equals(input.HasBeenViewed)
                ) && 
                (
                    this.IsHidden == input.IsHidden ||
                    this.IsHidden.Equals(input.IsHidden)
                ) && 
                (
                    this.IsInternational == input.IsInternational ||
                    this.IsInternational.Equals(input.IsInternational)
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.SkipWebhook == input.SkipWebhook ||
                    this.SkipWebhook.Equals(input.SkipWebhook)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CategoryGuid != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryGuid.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasBeenViewed.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHidden.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInternational.GetHashCode();
                if (this.Memo != null)
                {
                    hashCode = (hashCode * 59) + this.Memo.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkipWebhook.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
