/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.CSharp.Client.OpenAPIDateConverter;

namespace MX.Platform.CSharp.Model
{
    /// <summary>
    /// SplitTransactionRequest
    /// </summary>
    [DataContract(Name = "SplitTransactionRequest")]
    public partial class SplitTransactionRequest : IEquatable<SplitTransactionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitTransactionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitTransactionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitTransactionRequest" /> class.
        /// </summary>
        /// <param name="amount">Amount of money you want to re-categorize. (required).</param>
        /// <param name="description">Description for the split transaction..</param>
        /// <param name="categoryGuid">Unique identifier of the category..</param>
        /// <param name="memo">Memo for the split transaction.</param>
        public SplitTransactionRequest(decimal amount = default(decimal), string description = default(string), string categoryGuid = default(string), string memo = default(string))
        {
            this.Amount = amount;
            this.Description = description;
            this.CategoryGuid = categoryGuid;
            this.Memo = memo;
        }

        /// <summary>
        /// Amount of money you want to re-categorize.
        /// </summary>
        /// <value>Amount of money you want to re-categorize.</value>
        /// <example>54.19</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Description for the split transaction.
        /// </summary>
        /// <value>Description for the split transaction.</value>
        /// <example>Chevron Gas</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Unique identifier of the category.
        /// </summary>
        /// <value>Unique identifier of the category.</value>
        /// <example>CAT-b6d61a19-30a7-e852-2703-bdfb4072289e</example>
        [DataMember(Name = "category_guid", EmitDefaultValue = false)]
        public string CategoryGuid { get; set; }

        /// <summary>
        /// Memo for the split transaction
        /// </summary>
        /// <value>Memo for the split transaction</value>
        /// <example>Chips and Soda</example>
        [DataMember(Name = "memo", EmitDefaultValue = false)]
        public string Memo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitTransactionRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CategoryGuid: ").Append(CategoryGuid).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitTransactionRequest);
        }

        /// <summary>
        /// Returns true if SplitTransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitTransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitTransactionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CategoryGuid == input.CategoryGuid ||
                    (this.CategoryGuid != null &&
                    this.CategoryGuid.Equals(input.CategoryGuid))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CategoryGuid != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryGuid.GetHashCode();
                }
                if (this.Memo != null)
                {
                    hashCode = (hashCode * 59) + this.Memo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
