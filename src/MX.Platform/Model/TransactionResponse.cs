/*
 * MX Platform API
 *
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MX.Platform.Client.OpenAPIDateConverter;

namespace MX.Platform.Model
{
    /// <summary>
    /// TransactionResponse
    /// </summary>
    [DataContract(Name = "TransactionResponse")]
    public partial class TransactionResponse : IEquatable<TransactionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResponse" /> class.
        /// </summary>
        /// <param name="accountGuid">accountGuid.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="category">category.</param>
        /// <param name="categoryGuid">categoryGuid.</param>
        /// <param name="checkNumberString">checkNumberString.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="extendedTransactionType">extendedTransactionType.</param>
        /// <param name="guid">guid.</param>
        /// <param name="id">id.</param>
        /// <param name="isBillPay">isBillPay.</param>
        /// <param name="isDirectDeposit">isDirectDeposit.</param>
        /// <param name="isExpense">isExpense.</param>
        /// <param name="isFee">isFee.</param>
        /// <param name="isIncome">isIncome.</param>
        /// <param name="isInternational">isInternational.</param>
        /// <param name="isOverdraftFee">isOverdraftFee.</param>
        /// <param name="isPayrollAdvance">isPayrollAdvance.</param>
        /// <param name="isRecurring">isRecurring.</param>
        /// <param name="isSubscription">isSubscription.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="localizedDescription">localizedDescription.</param>
        /// <param name="localizedMemo">localizedMemo.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="memberGuid">memberGuid.</param>
        /// <param name="memberIsManagedByUser">memberIsManagedByUser.</param>
        /// <param name="memo">memo.</param>
        /// <param name="merchantCategoryCode">merchantCategoryCode.</param>
        /// <param name="merchantGuid">merchantGuid.</param>
        /// <param name="merchantLocationGuid">merchantLocationGuid.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="originalDescription">originalDescription.</param>
        /// <param name="postedAt">postedAt.</param>
        /// <param name="status">status.</param>
        /// <param name="topLevelCategory">topLevelCategory.</param>
        /// <param name="transactedAt">transactedAt.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userGuid">userGuid.</param>
        /// <param name="userId">userId.</param>
        public TransactionResponse(string accountGuid = default(string), string accountId = default(string), decimal? amount = default(decimal?), string category = default(string), string categoryGuid = default(string), string checkNumberString = default(string), string createdAt = default(string), string currencyCode = default(string), string date = default(string), string description = default(string), string extendedTransactionType = default(string), string guid = default(string), string id = default(string), bool? isBillPay = default(bool?), bool? isDirectDeposit = default(bool?), bool? isExpense = default(bool?), bool? isFee = default(bool?), bool? isIncome = default(bool?), bool? isInternational = default(bool?), bool? isOverdraftFee = default(bool?), bool? isPayrollAdvance = default(bool?), bool? isRecurring = default(bool?), bool? isSubscription = default(bool?), decimal? latitude = default(decimal?), string localizedDescription = default(string), string localizedMemo = default(string), decimal? longitude = default(decimal?), string memberGuid = default(string), bool? memberIsManagedByUser = default(bool?), string memo = default(string), int? merchantCategoryCode = default(int?), string merchantGuid = default(string), string merchantLocationGuid = default(string), string metadata = default(string), string originalDescription = default(string), string postedAt = default(string), string status = default(string), string topLevelCategory = default(string), string transactedAt = default(string), string type = default(string), string updatedAt = default(string), string userGuid = default(string), string userId = default(string))
        {
            this.AccountGuid = accountGuid;
            this.AccountId = accountId;
            this.Amount = amount;
            this.Category = category;
            this.CategoryGuid = categoryGuid;
            this.CheckNumberString = checkNumberString;
            this.CreatedAt = createdAt;
            this.CurrencyCode = currencyCode;
            this.Date = date;
            this.Description = description;
            this.ExtendedTransactionType = extendedTransactionType;
            this.Guid = guid;
            this.Id = id;
            this.IsBillPay = isBillPay;
            this.IsDirectDeposit = isDirectDeposit;
            this.IsExpense = isExpense;
            this.IsFee = isFee;
            this.IsIncome = isIncome;
            this.IsInternational = isInternational;
            this.IsOverdraftFee = isOverdraftFee;
            this.IsPayrollAdvance = isPayrollAdvance;
            this.IsRecurring = isRecurring;
            this.IsSubscription = isSubscription;
            this.Latitude = latitude;
            this.LocalizedDescription = localizedDescription;
            this.LocalizedMemo = localizedMemo;
            this.Longitude = longitude;
            this.MemberGuid = memberGuid;
            this.MemberIsManagedByUser = memberIsManagedByUser;
            this.Memo = memo;
            this.MerchantCategoryCode = merchantCategoryCode;
            this.MerchantGuid = merchantGuid;
            this.MerchantLocationGuid = merchantLocationGuid;
            this.Metadata = metadata;
            this.OriginalDescription = originalDescription;
            this.PostedAt = postedAt;
            this.Status = status;
            this.TopLevelCategory = topLevelCategory;
            this.TransactedAt = transactedAt;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.UserGuid = userGuid;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets AccountGuid
        /// </summary>
        [DataMember(Name = "account_guid", EmitDefaultValue = false)]
        public string AccountGuid { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CategoryGuid
        /// </summary>
        [DataMember(Name = "category_guid", EmitDefaultValue = true)]
        public string CategoryGuid { get; set; }

        /// <summary>
        /// Gets or Sets CheckNumberString
        /// </summary>
        [DataMember(Name = "check_number_string", EmitDefaultValue = true)]
        public string CheckNumberString { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "currency_code", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedTransactionType
        /// </summary>
        [DataMember(Name = "extended_transaction_type", EmitDefaultValue = true)]
        public string ExtendedTransactionType { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name = "guid", EmitDefaultValue = false)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsBillPay
        /// </summary>
        [DataMember(Name = "is_bill_pay", EmitDefaultValue = true)]
        public bool? IsBillPay { get; set; }

        /// <summary>
        /// Gets or Sets IsDirectDeposit
        /// </summary>
        [DataMember(Name = "is_direct_deposit", EmitDefaultValue = true)]
        public bool? IsDirectDeposit { get; set; }

        /// <summary>
        /// Gets or Sets IsExpense
        /// </summary>
        [DataMember(Name = "is_expense", EmitDefaultValue = true)]
        public bool? IsExpense { get; set; }

        /// <summary>
        /// Gets or Sets IsFee
        /// </summary>
        [DataMember(Name = "is_fee", EmitDefaultValue = true)]
        public bool? IsFee { get; set; }

        /// <summary>
        /// Gets or Sets IsIncome
        /// </summary>
        [DataMember(Name = "is_income", EmitDefaultValue = true)]
        public bool? IsIncome { get; set; }

        /// <summary>
        /// Gets or Sets IsInternational
        /// </summary>
        [DataMember(Name = "is_international", EmitDefaultValue = true)]
        public bool? IsInternational { get; set; }

        /// <summary>
        /// Gets or Sets IsOverdraftFee
        /// </summary>
        [DataMember(Name = "is_overdraft_fee", EmitDefaultValue = true)]
        public bool? IsOverdraftFee { get; set; }

        /// <summary>
        /// Gets or Sets IsPayrollAdvance
        /// </summary>
        [DataMember(Name = "is_payroll_advance", EmitDefaultValue = true)]
        public bool? IsPayrollAdvance { get; set; }

        /// <summary>
        /// Gets or Sets IsRecurring
        /// </summary>
        [DataMember(Name = "is_recurring", EmitDefaultValue = true)]
        public bool? IsRecurring { get; set; }

        /// <summary>
        /// Gets or Sets IsSubscription
        /// </summary>
        [DataMember(Name = "is_subscription", EmitDefaultValue = true)]
        public bool? IsSubscription { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedDescription
        /// </summary>
        [DataMember(Name = "localized_description", EmitDefaultValue = true)]
        public string LocalizedDescription { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedMemo
        /// </summary>
        [DataMember(Name = "localized_memo", EmitDefaultValue = true)]
        public string LocalizedMemo { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets MemberGuid
        /// </summary>
        [DataMember(Name = "member_guid", EmitDefaultValue = false)]
        public string MemberGuid { get; set; }

        /// <summary>
        /// Gets or Sets MemberIsManagedByUser
        /// </summary>
        [DataMember(Name = "member_is_managed_by_user", EmitDefaultValue = true)]
        public bool? MemberIsManagedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name = "memo", EmitDefaultValue = true)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCategoryCode
        /// </summary>
        [DataMember(Name = "merchant_category_code", EmitDefaultValue = true)]
        public int? MerchantCategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets MerchantGuid
        /// </summary>
        [DataMember(Name = "merchant_guid", EmitDefaultValue = false)]
        public string MerchantGuid { get; set; }

        /// <summary>
        /// Gets or Sets MerchantLocationGuid
        /// </summary>
        [DataMember(Name = "merchant_location_guid", EmitDefaultValue = false)]
        public string MerchantLocationGuid { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets OriginalDescription
        /// </summary>
        [DataMember(Name = "original_description", EmitDefaultValue = true)]
        public string OriginalDescription { get; set; }

        /// <summary>
        /// Gets or Sets PostedAt
        /// </summary>
        [DataMember(Name = "posted_at", EmitDefaultValue = true)]
        public string PostedAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TopLevelCategory
        /// </summary>
        [DataMember(Name = "top_level_category", EmitDefaultValue = true)]
        public string TopLevelCategory { get; set; }

        /// <summary>
        /// Gets or Sets TransactedAt
        /// </summary>
        [DataMember(Name = "transacted_at", EmitDefaultValue = true)]
        public string TransactedAt { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        [DataMember(Name = "user_guid", EmitDefaultValue = false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionResponse {\n");
            sb.Append("  AccountGuid: ").Append(AccountGuid).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryGuid: ").Append(CategoryGuid).Append("\n");
            sb.Append("  CheckNumberString: ").Append(CheckNumberString).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExtendedTransactionType: ").Append(ExtendedTransactionType).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsBillPay: ").Append(IsBillPay).Append("\n");
            sb.Append("  IsDirectDeposit: ").Append(IsDirectDeposit).Append("\n");
            sb.Append("  IsExpense: ").Append(IsExpense).Append("\n");
            sb.Append("  IsFee: ").Append(IsFee).Append("\n");
            sb.Append("  IsIncome: ").Append(IsIncome).Append("\n");
            sb.Append("  IsInternational: ").Append(IsInternational).Append("\n");
            sb.Append("  IsOverdraftFee: ").Append(IsOverdraftFee).Append("\n");
            sb.Append("  IsPayrollAdvance: ").Append(IsPayrollAdvance).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  IsSubscription: ").Append(IsSubscription).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LocalizedDescription: ").Append(LocalizedDescription).Append("\n");
            sb.Append("  LocalizedMemo: ").Append(LocalizedMemo).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MemberGuid: ").Append(MemberGuid).Append("\n");
            sb.Append("  MemberIsManagedByUser: ").Append(MemberIsManagedByUser).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  MerchantGuid: ").Append(MerchantGuid).Append("\n");
            sb.Append("  MerchantLocationGuid: ").Append(MerchantLocationGuid).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OriginalDescription: ").Append(OriginalDescription).Append("\n");
            sb.Append("  PostedAt: ").Append(PostedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TopLevelCategory: ").Append(TopLevelCategory).Append("\n");
            sb.Append("  TransactedAt: ").Append(TransactedAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionResponse);
        }

        /// <summary>
        /// Returns true if TransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountGuid == input.AccountGuid ||
                    (this.AccountGuid != null &&
                    this.AccountGuid.Equals(input.AccountGuid))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CategoryGuid == input.CategoryGuid ||
                    (this.CategoryGuid != null &&
                    this.CategoryGuid.Equals(input.CategoryGuid))
                ) && 
                (
                    this.CheckNumberString == input.CheckNumberString ||
                    (this.CheckNumberString != null &&
                    this.CheckNumberString.Equals(input.CheckNumberString))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExtendedTransactionType == input.ExtendedTransactionType ||
                    (this.ExtendedTransactionType != null &&
                    this.ExtendedTransactionType.Equals(input.ExtendedTransactionType))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsBillPay == input.IsBillPay ||
                    (this.IsBillPay != null &&
                    this.IsBillPay.Equals(input.IsBillPay))
                ) && 
                (
                    this.IsDirectDeposit == input.IsDirectDeposit ||
                    (this.IsDirectDeposit != null &&
                    this.IsDirectDeposit.Equals(input.IsDirectDeposit))
                ) && 
                (
                    this.IsExpense == input.IsExpense ||
                    (this.IsExpense != null &&
                    this.IsExpense.Equals(input.IsExpense))
                ) && 
                (
                    this.IsFee == input.IsFee ||
                    (this.IsFee != null &&
                    this.IsFee.Equals(input.IsFee))
                ) && 
                (
                    this.IsIncome == input.IsIncome ||
                    (this.IsIncome != null &&
                    this.IsIncome.Equals(input.IsIncome))
                ) && 
                (
                    this.IsInternational == input.IsInternational ||
                    (this.IsInternational != null &&
                    this.IsInternational.Equals(input.IsInternational))
                ) && 
                (
                    this.IsOverdraftFee == input.IsOverdraftFee ||
                    (this.IsOverdraftFee != null &&
                    this.IsOverdraftFee.Equals(input.IsOverdraftFee))
                ) && 
                (
                    this.IsPayrollAdvance == input.IsPayrollAdvance ||
                    (this.IsPayrollAdvance != null &&
                    this.IsPayrollAdvance.Equals(input.IsPayrollAdvance))
                ) && 
                (
                    this.IsRecurring == input.IsRecurring ||
                    (this.IsRecurring != null &&
                    this.IsRecurring.Equals(input.IsRecurring))
                ) && 
                (
                    this.IsSubscription == input.IsSubscription ||
                    (this.IsSubscription != null &&
                    this.IsSubscription.Equals(input.IsSubscription))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.LocalizedDescription == input.LocalizedDescription ||
                    (this.LocalizedDescription != null &&
                    this.LocalizedDescription.Equals(input.LocalizedDescription))
                ) && 
                (
                    this.LocalizedMemo == input.LocalizedMemo ||
                    (this.LocalizedMemo != null &&
                    this.LocalizedMemo.Equals(input.LocalizedMemo))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.MemberGuid == input.MemberGuid ||
                    (this.MemberGuid != null &&
                    this.MemberGuid.Equals(input.MemberGuid))
                ) && 
                (
                    this.MemberIsManagedByUser == input.MemberIsManagedByUser ||
                    (this.MemberIsManagedByUser != null &&
                    this.MemberIsManagedByUser.Equals(input.MemberIsManagedByUser))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.MerchantCategoryCode == input.MerchantCategoryCode ||
                    (this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(input.MerchantCategoryCode))
                ) && 
                (
                    this.MerchantGuid == input.MerchantGuid ||
                    (this.MerchantGuid != null &&
                    this.MerchantGuid.Equals(input.MerchantGuid))
                ) && 
                (
                    this.MerchantLocationGuid == input.MerchantLocationGuid ||
                    (this.MerchantLocationGuid != null &&
                    this.MerchantLocationGuid.Equals(input.MerchantLocationGuid))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.OriginalDescription == input.OriginalDescription ||
                    (this.OriginalDescription != null &&
                    this.OriginalDescription.Equals(input.OriginalDescription))
                ) && 
                (
                    this.PostedAt == input.PostedAt ||
                    (this.PostedAt != null &&
                    this.PostedAt.Equals(input.PostedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TopLevelCategory == input.TopLevelCategory ||
                    (this.TopLevelCategory != null &&
                    this.TopLevelCategory.Equals(input.TopLevelCategory))
                ) && 
                (
                    this.TransactedAt == input.TransactedAt ||
                    (this.TransactedAt != null &&
                    this.TransactedAt.Equals(input.TransactedAt))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountGuid != null)
                    hashCode = hashCode * 59 + this.AccountGuid.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CategoryGuid != null)
                    hashCode = hashCode * 59 + this.CategoryGuid.GetHashCode();
                if (this.CheckNumberString != null)
                    hashCode = hashCode * 59 + this.CheckNumberString.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExtendedTransactionType != null)
                    hashCode = hashCode * 59 + this.ExtendedTransactionType.GetHashCode();
                if (this.Guid != null)
                    hashCode = hashCode * 59 + this.Guid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsBillPay != null)
                    hashCode = hashCode * 59 + this.IsBillPay.GetHashCode();
                if (this.IsDirectDeposit != null)
                    hashCode = hashCode * 59 + this.IsDirectDeposit.GetHashCode();
                if (this.IsExpense != null)
                    hashCode = hashCode * 59 + this.IsExpense.GetHashCode();
                if (this.IsFee != null)
                    hashCode = hashCode * 59 + this.IsFee.GetHashCode();
                if (this.IsIncome != null)
                    hashCode = hashCode * 59 + this.IsIncome.GetHashCode();
                if (this.IsInternational != null)
                    hashCode = hashCode * 59 + this.IsInternational.GetHashCode();
                if (this.IsOverdraftFee != null)
                    hashCode = hashCode * 59 + this.IsOverdraftFee.GetHashCode();
                if (this.IsPayrollAdvance != null)
                    hashCode = hashCode * 59 + this.IsPayrollAdvance.GetHashCode();
                if (this.IsRecurring != null)
                    hashCode = hashCode * 59 + this.IsRecurring.GetHashCode();
                if (this.IsSubscription != null)
                    hashCode = hashCode * 59 + this.IsSubscription.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.LocalizedDescription != null)
                    hashCode = hashCode * 59 + this.LocalizedDescription.GetHashCode();
                if (this.LocalizedMemo != null)
                    hashCode = hashCode * 59 + this.LocalizedMemo.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.MemberGuid != null)
                    hashCode = hashCode * 59 + this.MemberGuid.GetHashCode();
                if (this.MemberIsManagedByUser != null)
                    hashCode = hashCode * 59 + this.MemberIsManagedByUser.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.MerchantGuid != null)
                    hashCode = hashCode * 59 + this.MerchantGuid.GetHashCode();
                if (this.MerchantLocationGuid != null)
                    hashCode = hashCode * 59 + this.MerchantLocationGuid.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.OriginalDescription != null)
                    hashCode = hashCode * 59 + this.OriginalDescription.GetHashCode();
                if (this.PostedAt != null)
                    hashCode = hashCode * 59 + this.PostedAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TopLevelCategory != null)
                    hashCode = hashCode * 59 + this.TopLevelCategory.GetHashCode();
                if (this.TransactedAt != null)
                    hashCode = hashCode * 59 + this.TransactedAt.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
